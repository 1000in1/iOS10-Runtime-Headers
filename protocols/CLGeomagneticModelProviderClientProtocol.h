/* Generated by RuntimeBrowser.
 */

@protocol CLGeomagneticModelProviderClientProtocol <CLNotifierServiceProtocol>

@required

- (void)doAsync:(void *)arg1; // needs 1 arg types, found 5: id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void* x42[ /* ? */ ]; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; }*
- (void)doAsync:(void *)arg1 withReply:(void *)arg2; // needs 2 arg types, found 252: id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; void*x11; void*x12; id /* block */ x13; void*x14; void x15; id /* block */ x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; SEL x24; void*x25; void*x26; void*x27; const void*x28; void*x29; void*x30; in out double x31; void*x32; void*x33; unsigned int x34/* : ? */; void*x35; short x36; void*x37; void*x38; void x39; out int x40; double x41; void*x42; char *x43; void*x44; void*x45; char *x46; void*x47; void*x48; void*x49; short x50; void*x51; double x52; SEL x53; SEL x54; void*x55; void*x56; void*x57; SEL x58; SEL x59; void*x60; long x61; long x62; out BOOL x63; void*x64; void*x65; out const void*x66; short x67; void*x68; double x69; SEL x70; SEL x71; void*x72; void*x73; void*x74; SEL x75; SEL x76; void*x77; void*x78; void*x79; const void*x80; unsigned char x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; struct  struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> { {} x93; void*x94; char *x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; short x105; void*x106; const void*x107; BOOL x108; void*x109; void*x110; void*x111; void*x112; BOOL x113; out void*x114; void*x115; const void*x116; short x117; short x118; void*x119; double x120; void*x121; void*x122; void*x123; int x124; const void*x125; short x126; void*x127; double x128; SEL x129; SEL x130; void*x131; void*x132; void*x133; SEL x134; SEL x135; void*x136; void*x137; void*x138; const void*x139; void*x140; void*x141; void*x142; in double x143; void*x144; in out double x145; void*x146; void*x147; short x148; void*x149; double x150; SEL x151; SEL x152; void*x153; void*x154; void*x155; SEL x156; SEL x157; void*x158; void*x159; void*x160; const void*x161; void*x162; void*x163; in out double x164; void*x165; void*x166; unsigned int x167/* : ? */; void*x168; short x169; void*x170; void*x171; void x172; out int x173; double x174; void*x175; char *x176; void*x177; void*x178; char *x179; void*x180; void*x181; void*x182; short x183; void*x184; double x185; SEL x186; SEL x187; void*x188; void*x189; void*x190; SEL x191; SEL x192; void*x193; long x194; long x195; out BOOL x196; void*x197; void*x198; out const void*x199; short x200; void*x201; double x202; SEL x203; SEL x204; void*x205; void*x206; void*x207; SEL x208; SEL x209; void*x210; void*x211; void*x212; const void*x213; void*x214; void*x215; in out double x216; void*x217; void*x218; short x219; void*x220; double x221; SEL x222; SEL x223; void*x224; void*x225; void*x226; SEL x227; SEL x228; void*x229; void*x230; void x231; void*x232; long x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; int x242; in void*x243; void*x244; void*x245; unsigned char x246; unsigned long x247; inout out void*x248; int x249; float x250; int x251; void*x252; const void*x253; unsigned char x254; unsigned long x255; void*x256; void*x257; out void*x258; void*x259; void*x260; in void*x261; void*x262; int x263; BOOL x264; void*x265; out double x266; void*x267; long x268; void*x269; const out void x270; int x271; double x272; void*x273; const void*x274; void*x275; void*x276; void*x277; void*x278; SEL x279; SEL x280; inout out void*x281; int x282; float x283; int x284; BOOL x285; void*x286; void*x287; int x288; out in void*x289; void*x290; unsigned char x291; unsigned long x292; void*x293; void*x294; out void*x295; void*x296; void*x297; in void*x298; void*x299; int x300; BOOL x301; void*x302; out double x303; void*x304; long x305; void*x306; const out void x307; int x308; double x309; void*x310; const void*x311; void*x312; void*x313; void*x314; void*x315; SEL x316; SEL x317; inout out void*x318; int x319; float x320; int x321; BOOL x322; void*x323; void*x324; int x325; out in long doublex326; void*x327; void*x328; void*x329; void*x330; void*x331; BOOL x332; void*x333; void*x334; const void*x335; void*x336; BOOL x337; void*x338; void*x339; const void*x340; SEL x341; SEL x342; inout out void*x343; int x344; float x345; int x346; BOOL x347; void*x348; void*x349; int x350; out in void*x351; void*x352; void*x353; void x354; out int x355; double x356; void*x357; char *x358; void*x359; void*x360; void*x361; void*x362; void*x363; void*x364; struct  struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> { {} x365; void*x366; char *x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; }*, void*, void*, void*, void*, void*, void*, void*, void*, void*, void*, void*, void*, void*, void*, void*, short, void*, const void*, BOOL, void*, void*, void*, void*, BOOL, out void*, void*, const void*, short, short, void*, double, void*, void*, void*, int, const void*, void*, in short, int, void*, in void*, double, void*, long, out in void*, void*, void*, short, void*, double, SEL, SEL, void*, void*, SEL, SEL, void*, void*, void*, void*, void*, void*, void, void*, long, void*, void*, void*, BOOL, out void*, void*, void*, const void*, void*, int, in void*, void*, void*, short, void*, double, SEL, SEL, void*, void*, SEL, SEL, void*, void*, void, void*, long, void*, void*, void*, void*, void*, void*, void*, void*, int, in void*, void*, void*, unsigned char, unsigned long, inout out void*, int, float, int, void*, const void*, unsigned char, unsigned long, void*, void*, out void*, void*, void*, in void*, void*, int, BOOL, void*, out double, void*, long, void*, const out void, int, double, void*, const void*, void*, void*, void*, void*, SEL, SEL, inout out void*, int, float, int, BOOL, void*, void*, int, out in void*, void*, unsigned char, unsigned long, void*, void*, out void*, void*, void*, in void*, void*, int, BOOL, void*, out double, void*, long, void*, const out void, int, double, void*, const void*, void*, void*, void*, void*, SEL, SEL, inout out void*, int, float, int, BOOL, void*, void*, int, out in long double, void*, void*, void*, void*, void*, BOOL, void*, void*, const void*, void*, BOOL, void*, void*, const void*, SEL, SEL, inout out void*, int, float, int, BOOL, void*, void*, int, out in void*, void*, void*, short, void*, double, SEL, SEL, void*, void*, SEL, SEL, long, void*, short, short, void*, int, in void*, void*, void*, void*, void*, const void*, void*, void*, void*, void*, void*, struct  unsigned long x_3_3_1;  {}, void*, void*, void*, void*, void*, void*, void*, void*
- (BOOL)syncgetDoSync:(void *)arg1; // needs 1 arg types, found 5: id /* block */, /* Warning: Unrecognized filer type: '<' using 'void*' */ void*, void, id /* block */, struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; SEL x26; void*x27; SEL x28; void*x29; inout void*x30; out void*x31; void*x32; void*x33; int x34; void*x35; float x36; void*x37; int x38; void*x39; BOOL x40; void*x41; void*x42; void*x43; void*x44; void*x45; int x46; void*x47; out void*x48; in void*x49; long doublex50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; BOOL x62; void*x63; void*x64; void*x65; void*x66; void*x67; const void*x68; void*x69; void*x70; void*x71; void*x72; BOOL x73; void*x74; void*x75; void*x76; void*x77; void*x78; const void*x79; void*x80; void*x81; SEL x82; void*x83; void*x84; void*x85; in void*x86; int x87; void*x88; out void*x89; in void*x90; void*x91; void*x92; struct x93; void*x94; void*x95; void*x96; short x97; void*x98; void*x99; void*x100; const void*x101; void*x102; void*x103; BOOL x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; long x114; void*x115; out void*x116; in void*x117; void*x118; void*x119; void*x120; void*x121; struct x122; void*x123; void*x124; void*x125; void*x126; void*x127; in void*x128; short x129; void*x130; int x131; void*x132; void*x133; void*x134; in void*x135; void*x136; void*x137; double x138; void*x139; void*x140; void*x141; int x142; void*x143; in void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; in void*x169; short x170; void*x171; int x172; void*x173; void*x174; void*x175; in void*x176; void*x177; void*x178; double x179; void*x180; void*x181; void*x182; int x183; void*x184; in void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; BOOL x208; void*x209; void*x210; void*x211; void*x212; void*x213; const void*x214; void*x215; void*x216; char *x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; }*

@end

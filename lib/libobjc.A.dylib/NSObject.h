/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/usr/lib/libobjc.A.dylib
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, NSArray, UIBezierPath, _UITraitStorageList;

@interface NSObject <NSObject, PQLResultSetInitializer> {
    Class isa;
}

@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(retain) NSArray * accessibilityElements;
@property(retain) NSArray * accessibilityCustomActions;
@property bool isAccessibilityElement;
@property(copy) NSString * accessibilityLabel;
@property(copy) NSString * accessibilityHint;
@property(copy) NSString * accessibilityValue;
@property unsigned long long accessibilityTraits;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } accessibilityFrame;
@property(copy) UIBezierPath * accessibilityPath;
@property struct CGPoint { double x1; double x2; } accessibilityActivationPoint;
@property(retain) NSString * accessibilityLanguage;
@property bool accessibilityElementsHidden;
@property bool accessibilityViewIsModal;
@property bool shouldGroupAccessibilityChildren;
@property long long accessibilityNavigationStyle;
@property(getter=_traitStorageList,setter=_setTraitStorageList:) _UITraitStorageList * traitStorageList;
@property(retain,readonly) id autoContentAccessingProxy;
@property(readonly) Class classForKeyedArchiver;
@property void* observationInfo;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;

+ (bool)isFault;
+ (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
+ (bool)isSubclassOfClass:(Class)arg1;
+ (bool)instancesRespondToSelector:(SEL)arg1;
+ (id)init;
+ (id)debugDescription;
+ (Class)class;
+ (int (*)())methodForSelector:(SEL)arg1;
+ (id)forwardingTargetForSelector:(SEL)arg1;
+ (id)methodSignatureForSelector:(SEL)arg1;
+ (bool)conformsToProtocol:(id)arg1;
+ (id)performSelector:(SEL)arg1 withObject:(id)arg2;
+ (id)performSelector:(SEL)arg1;
+ (id)self;
+ (bool)respondsToSelector:(SEL)arg1;
+ (bool)isEqual:(id)arg1;
+ (unsigned long long)hash;
+ (id)mutableCopy;
+ (bool)isKindOfClass:(Class)arg1;
+ (Class)superclass;
+ (bool)isMemberOfClass:(Class)arg1;
+ (bool)isProxy;
+ (bool)allowsWeakReference;
+ (bool)retainWeakReference;
+ (bool)_isDeallocating;
+ (bool)_tryRetain;
+ (void)forwardInvocation:(id)arg1;
+ (void)finalize;
+ (id)new;
+ (id)copy;
+ (void)dealloc;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)alloc;
+ (unsigned long long)retainCount;
+ (id)autorelease;
+ (oneway void)release;
+ (id)retain;
+ (bool)resolveClassMethod:(SEL)arg1;
+ (bool)resolveInstanceMethod:(SEL)arg1;
+ (void)initialize;
+ (void)load;
+ (id)description;
+ (void)doesNotRecognizeSelector:(SEL)arg1;
+ (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
+ (id)copyWithZone:(struct _NSZone { }*)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (bool)isAncestorOfObject:(id)arg1;
+ (int (*)())instanceMethodForSelector:(SEL)arg1;
+ (struct _NSZone { }*)zone;
+ (id)init;
+ (id)_copyDescription;
+ (id)__allocWithZone_OA:(struct _NSZone { }*)arg1;
+ (id)methodSignatureForSelector:(SEL)arg1;
+ (void)finalize;
+ (void)dealloc;
+ (void)load;
+ (id)description;
+ (void)doesNotRecognizeSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (bool)accessInstanceVariablesDirectly;
+ (id)_createMutableArrayValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createOtherValueSetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createOtherValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValuePrimitiveSetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValuePrimitiveGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createMutableSetValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createMutableOrderedSetValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValueSetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)_createValueGetterWithContainerClassID:(id)arg1 key:(id)arg2;
+ (id)keyPathsForValuesAffectingValueForKey:(id)arg1;
+ (id)_keysForValuesAffectingValueForKey:(id)arg1;
+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)setKeys:(id)arg1 triggerChangeNotificationsForDependentKey:(id)arg2;
+ (bool)_shouldAddObservationForwardersForKey:(id)arg1;
+ (id)classFallbacksForKeyedArchiver;
+ (Class)classForKeyedUnarchiver;
+ (long long)version;
+ (void)load;
+ (void)setVersion:(long long)arg1;
+ (bool)instancesImplementSelector:(SEL)arg1;
+ (bool)implementsSelector:(SEL)arg1;
+ (void)cancelPreviousPerformRequestsWithTarget:(id)arg1;
+ (void)cancelPreviousPerformRequestsWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
+ (const char *)_localClassNameForClass;
+ (struct objc_method_description { SEL x1; char *x2; }*)methodDescriptionForSelector:(SEL)arg1;
+ (struct objc_method_description { SEL x1; char *x2; }*)instanceMethodDescriptionForSelector:(SEL)arg1;
+ (id)replacementObjectForPortCoder:(id)arg1;
+ (id)bs_objectFromData:(id)arg1;
+ (bool)bs_synchronousWrapper:(id)arg1 timeout:(double)arg2;
+ (id)bs_dataFromObject:(id)arg1;
+ (void)bs_waitAsynchronouslyForNotification:(id)arg1 object:(id)arg2 forDuration:(double)arg3 andPerformBlock:(id)arg4 onQueue:(id)arg5;
+ (id)CA_CAMLPropertyForKey:(id)arg1;
+ (int (*)())CA_getterForProperty:(const struct _CAPropertyInfo { unsigned int x1; SEL x2[2]; unsigned int x3 : 16; unsigned int x4 : 16; char *x5; struct __CFString {} *x6; }*)arg1;
+ (int (*)())CA_setterForProperty:(const struct _CAPropertyInfo { unsigned int x1; SEL x2[2]; unsigned int x3 : 16; unsigned int x4 : 16; char *x5; struct __CFString {} *x6; }*)arg1;
+ (bool)CA_encodesPropertyConditionally:(unsigned int)arg1 type:(int)arg2;
+ (bool)CA_automaticallyNotifiesObservers:(Class)arg1;
+ (id)sbs_valueFromData:(id)arg1 ofType:(const char *)arg2;
+ (id)sbs_dataWithValue:(id)arg1;
+ (bool)sbs_synchronousWrapper:(id)arg1 timeout:(double)arg2;
+ (bool)sbs_synchronousWrapper:(id)arg1;
+ (id)sbs_objectFromData:(id)arg1;
+ (id)sbs_dataFromObject:(id)arg1;
+ (bool)sbs_synchronousWrapper:(id)arg1 dispatchTimeout:(unsigned long long)arg2;
+ (id)_webkit_invokeOnMainThread;
+ (bool)isKeyExcludedFromWebScript:(const char *)arg1;
+ (bool)isSelectorExcludedFromWebScript:(SEL)arg1;
+ (id)_alternateUISwitchableSelectorPairs;
+ (void)__accessibilityRequestGuidedAccessSession:(bool)arg1 completion:(id)arg2;
+ (long long)__accessibilityGuidedAccessRestrictionStateForIdentifier:(id)arg1;
+ (bool)__accessibilityGuidedAccessStateEnabled;
+ (void)_installAppearanceSwizzlesForSetter:(id)arg1;
+ (void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1;
+ (void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
+ (void)performSelectorWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 withObject:(id)arg3 afterDelay:(double)arg4;
+ (void)mf_clearLocks;
+ (id)_gkDefaultKeymap;
+ (Class)classForStoredClassName:(id)arg1 forCPLArchiver:(id)arg2;
+ (id)cplAllPropertyNames;
+ (void)cplDumpProperties;
+ (id)_cplPropertyAttributeMap;
+ (void)_addPropertyAttributeMapToPropertyMapLocked:(id)arg1;
+ (bool)cplShouldIgnorePropertyForCoding:(id)arg1;
+ (id)cplAdditionalSecureClassesForProperty:(id)arg1;
+ (bool)brc_swizzleClassMethod:(SEL)arg1 with:(SEL)arg2;
+ (bool)brc_swizzleInstanceMethod:(SEL)arg1 with:(SEL)arg2;
+ (bool)object:(id)arg1 isEqualToObject:(id)arg2;
+ (bool)overridesClassSelector:(SEL)arg1 ofBaseClass:(Class)arg2;
+ (bool)overridesSelector:(SEL)arg1 ofBaseClass:(Class)arg2;

- (bool)isFault;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)init;
- (id)debugDescription;
- (Class)class;
- (int (*)())methodForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (bool)conformsToProtocol:(id)arg1;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (bool)respondsToSelector:(SEL)arg1;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)mutableCopy;
- (bool)isKindOfClass:(Class)arg1;
- (Class)superclass;
- (bool)isMemberOfClass:(Class)arg1;
- (bool)isProxy;
- (bool)allowsWeakReference;
- (bool)retainWeakReference;
- (bool)_isDeallocating;
- (bool)_tryRetain;
- (void)forwardInvocation:(id)arg1;
- (void)finalize;
- (id)copy;
- (void)dealloc;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (id)description;
- (void)doesNotRecognizeSelector:(SEL)arg1;
- (struct _NSZone { }*)zone;
- (id)_copyDescription;
- (bool)___tryRetain_OA;
- (id)__autorelease_OA;
- (oneway void)__release_OA;
- (id)__retain_OA;
- (void)__dealloc_zombie;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)description;
- (void)doesNotRecognizeSelector:(SEL)arg1;
- (bool)isNSTimeZone__;
- (bool)isNSSet__;
- (bool)isNSOrderedSet__;
- (bool)isNSDate__;
- (bool)isNSData__;
- (bool)isNSDictionary__;
- (bool)isNSArray__;
- (bool)isNSNumber__;
- (bool)isNSString__;
- (bool)isNSValue__;
- (unsigned long long)_cfTypeID;
- (Class)classForArchiver;
- (id)replacementObjectForArchiver:(id)arg1;
- (id)dictionaryWithValuesForKeys:(id)arg1;
- (void)setValuesForKeysWithDictionary:(id)arg1;
- (id)valueForKeyPath:(id)arg1;
- (id)valueForKey:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)mutableSetValueForKey:(id)arg1;
- (id)mutableSetValueForKeyPath:(id)arg1;
- (id)mutableOrderedSetValueForKey:(id)arg1;
- (id)mutableOrderedSetValueForKeyPath:(id)arg1;
- (id)mutableArrayValueForKey:(id)arg1;
- (id)mutableArrayValueForKeyPath:(id)arg1;
- (bool)validateValue:(inout id*)arg1 forKey:(id)arg2 error:(out id*)arg3;
- (bool)validateValue:(inout id*)arg1 forKeyPath:(id)arg2 error:(out id*)arg3;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (void)setNilValueForKey:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (bool)_isKVOA;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void*)arg3;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4;
- (void)_removeObserver:(id)arg1 forProperty:(id)arg2;
- (void)_addObserver:(id)arg1 forProperty:(id)arg2 options:(unsigned long long)arg3 context:(void*)arg4;
- (void)didChangeValueForKey:(id)arg1;
- (void)willChangeValueForKey:(id)arg1;
- (void)didChangeValueForKey:(id)arg1 withSetMutation:(unsigned long long)arg2 usingObjects:(id)arg3;
- (void)willChangeValueForKey:(id)arg1 withSetMutation:(unsigned long long)arg2 usingObjects:(id)arg3;
- (void)didChange:(unsigned long long)arg1 valuesAtIndexes:(id)arg2 forKey:(id)arg3;
- (void)willChange:(unsigned long long)arg1 valuesAtIndexes:(id)arg2 forKey:(id)arg3;
- (void)setObservationInfo:(void*)arg1;
- (void*)observationInfo;
- (void)_didChangeValuesForKeys:(id)arg1;
- (void)_willChangeValuesForKeys:(id)arg1;
- (void)_changeValueForKey:(id)arg1 usingBlock:(id)arg2;
- (void)_notifyObserversForKeyPath:(id)arg1 change:(id)arg2;
- (void)_changeValueForKey:(id)arg1 key:(id)arg2 key:(id)arg3 usingBlock:(id)arg4;
- (id)_implicitObservationInfo;
- (id)replacementObjectForKeyedArchiver:(id)arg1;
- (Class)classForKeyedArchiver;
- (bool)implementsSelector:(SEL)arg1;
- (bool)_allowsDirectEncoding;
- (id)awakeAfterUsingCoder:(id)arg1;
- (id)replacementObjectForCoder:(id)arg1;
- (Class)classForCoder;
- (id)autoContentAccessingProxy;
- (void)performSelector:(SEL)arg1 object:(id)arg2 afterDelay:(double)arg3;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4;
- (void)performSelector:(SEL)arg1 onThread:(id)arg2 withObject:(id)arg3 waitUntilDone:(bool)arg4;
- (void)performSelectorOnMainThread:(SEL)arg1 withObject:(id)arg2 waitUntilDone:(bool)arg3 modes:(id)arg4;
- (void)performSelectorInBackground:(SEL)arg1 withObject:(id)arg2;
- (void)performSelectorOnMainThread:(SEL)arg1 withObject:(id)arg2 waitUntilDone:(bool)arg3;
- (void)performSelector:(SEL)arg1 onThread:(id)arg2 withObject:(id)arg3 waitUntilDone:(bool)arg4 modes:(id)arg5;
- (const char *)_localClassNameForClass;
- (struct objc_method_description { SEL x1; char *x2; }*)methodDescriptionForSelector:(SEL)arg1;
- (bool)_conformsToProtocolNamed:(const char *)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (Class)classForPortCoder;
- (bool)isNull;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 ignoreMenuTracking:(bool)arg4;
- (id)__im_getInvocation:(id*)arg1;
- (id)__im_onDetachedThread;
- (id)__im_onMainThreadIfNecessary;
- (id)__im_onMainThread;
- (id)__im_onThread:(id)arg1 immediateForMatchingThread:(bool)arg2;
- (id)__im_onThread:(id)arg1;
- (id)__im_afterDelay:(double)arg1 modes:(id)arg2;
- (id)__im_afterDelay:(double)arg1;
- (id)pep_getInvocation:(id*)arg1;
- (id)pep_onOperationQueue:(id)arg1;
- (id)pep_afterDelay:(double)arg1;
- (id)pep_onDetachedThread;
- (id)pep_onMainThreadIfNecessary;
- (id)pep_onOperationQueue:(id)arg1 priority:(long long)arg2;
- (id)pep_onThread:(id)arg1 immediateForMatchingThread:(bool)arg2;
- (id)pep_onThread:(id)arg1;
- (id)pep_onMainThread;
- (bool)bs_isPlistableType;
- (bool)bs_performSynchronously:(id)arg1 timeout:(double)arg2;
- (void)CA_prepareRenderValue;
- (struct Object { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; }*)CA_copyRenderValue;
- (id)CA_interpolateValues:(id)arg1 :(id)arg2 :(id)arg3 interpolator:(const struct ValueInterpolator { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; boolx10; }*)arg4;
- (double)CA_distanceToValue:(id)arg1;
- (id)CA_roundToIntegerFromValue:(id)arg1;
- (id)CA_interpolateValue:(id)arg1 byFraction:(float)arg2;
- (id)CA_addValue:(id)arg1 multipliedBy:(int)arg2;
- (id)CAMLType;
- (id)CAMLTypeForKey:(id)arg1;
- (void)encodeWithCAMLWriter:(id)arg1;
- (bool)sbs_isPlistableType;
- (void)releaseOnMainThread;
- (void)fromMainThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (void)fromNotifySafeThreadPostNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (void)disallowSafePerformSelector;
- (void)allowSafePerformSelector;
- (void)fromNotifySafeThreadPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (bool)okToNotifyFromThisThread;
- (void)postNotificationWithDescription:(id)arg1;
- (id)_webkit_invokeOnMainThread;
- (id)_shortMethodDescription;
- (id)_methodDescription;
- (id)_ivarDescription;
- (id)__methodDescriptionForClass:(Class)arg1;
- (id)__ivarDescriptionForClass:(Class)arg1;
- (void)_setTraitStorageList:(id)arg1;
- (id)_traitStorageList;
- (void)_applyTraitStorageRecordsForTraitCollection:(id)arg1;
- (void)_connectInterfaceBuilderEventConnection:(id)arg1;
- (void)prepareForInterfaceBuilder;
- (void)awakeFromNib;
- (id)accessibilityContainer;
- (bool)isAccessibilityElement;
- (id)accessibilityLabel;
- (void)setAccessibilityValue:(id)arg1;
- (id)accessibilityValue;
- (void)setAccessibilityLabel:(id)arg1;
- (void)setAccessibilityNavigationStyle:(long long)arg1;
- (void)setShouldGroupAccessibilityChildren:(bool)arg1;
- (void)setAccessibilityIdentifier:(id)arg1;
- (void)setAccessibilityLanguage:(id)arg1;
- (void)setAccessibilityContainer:(id)arg1;
- (void)setIsAccessibilityElement:(bool)arg1;
- (void)setAccessibilityTraits:(unsigned long long)arg1;
- (void)setAccessibilityActivationPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAccessibilityPath:(id)arg1;
- (void)setAccessibilityFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAccessibilityHint:(id)arg1;
- (void)setAccessibilityViewIsModal:(bool)arg1;
- (void)setAccessibilityElementsHidden:(bool)arg1;
- (id)storedAccessibilityActivationPoint;
- (id)storedAccessibilityFrame;
- (id)storedIsAccessibilityElement;
- (id)storedAccessibilityTraits;
- (long long)accessibilityNavigationStyle;
- (bool)shouldGroupAccessibilityChildren;
- (bool)accessibilityElementsHidden;
- (bool)accessibilityViewIsModal;
- (id)accessibilityPath;
- (id)accessibilityLanguage;
- (unsigned long long)accessibilityTraits;
- (struct CGPoint { double x1; double x2; })accessibilityActivationPoint;
- (id)accessibilityHint;
- (id)storedAccessibilityNavigationStyle;
- (id)storedShouldGroupAccessibilityChildren;
- (id)storedAccessibilityElementsHidden;
- (id)storedAccessibilityViewIsModal;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })accessibilityFrame;
- (id)accessibilityIdentifier;
- (bool)accessibilityElementIsFocused;
- (void)accessibilityElementDidLoseFocus;
- (void)accessibilityElementDidBecomeFocused;
- (id)accessibilityCustomActions;
- (void)setAccessibilityCustomActions:(id)arg1;
- (bool)accessibilityActivate;
- (bool)accessibilityPerformMagicTap;
- (bool)accessibilityPerformEscape;
- (bool)accessibilityScroll:(long long)arg1;
- (void)accessibilityDecrement;
- (void)accessibilityIncrement;
- (long long)indexOfAccessibilityElement:(id)arg1;
- (id)accessibilityElementAtIndex:(long long)arg1;
- (long long)accessibilityElementCount;
- (void)setAccessibilityElements:(id)arg1;
- (id)accessibilityElements;
- (void)accessibilitySetIdentification:(id)arg1;
- (void)_accessibilityFinalize;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isAccessibilityElementByDefault;
- (unsigned long long)defaultAccessibilityTraits;
- (id)_NSItemProviderTypeCoercion_coercedUIImageValueFromNSDataValue:(id)arg1 error:(id*)arg2;
- (id)_NSItemProviderTypeCoercion_coercedUIImageValueFromNSURLValue:(id)arg1 error:(id*)arg2;
- (id)className;
- (id)mainThreadProxy;
- (id)delayedProxy:(double)arg1;
- (id)blockingMainThreadProxy;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt { }*)arg1 atPosition:(int)arg2;
- (id)ml_stringValueForSQL;
- (void)dispatchAsyncWithCancellationIdentifier:(id)arg1 delay:(double)arg2 queue:(id)arg3 block:(id)arg4;
- (bool)cancelPreviousDispatchAsyncWithCancellationIdentifier:(id)arg1;
- (id)_MPCancellableDispatchAccessQueue;
- (void)_nonRetainingPerformSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4;
- (void)unregisterForTimeMarkerNotifications;
- (void)registerForTimeMarkerNotificationsIfNecessaryForPlayer:(id)arg1;
- (void)__crossedTimeMarkerNotification:(id)arg1;
- (id)MPMediaLibraryDataProviderSystemML3CoercedString;
- (id)CKPropertiesDescription;
- (id)CKDescription;
- (void)CKAssignToContainerWithID:(id)arg1;
- (id)_ICSStringWithOptions:(unsigned long long)arg1;
- (void)_ICSStringWithOptions:(unsigned long long)arg1 appendingToString:(id)arg2;
- (bool)mf_tryLockWithPriority;
- (void)mf_lockWithPriority;
- (bool)mf_tryLock;
- (void)_mf_checkToAllowLock:(id)arg1;
- (void)_mf_checkToAllowExclusiveLocksWithLock:(id)arg1;
- (void)_mf_checkToAllowStrictProgressionWithLock:(id)arg1;
- (void)_mf_checkToAllowOrderingWithLock:(id)arg1;
- (bool)_mf_ntsIsLocked;
- (void)_mf_dumpLockCallStacks:(unsigned long long)arg1 ordering:(id)arg2;
- (id)_mf_lockOrderingForType:(int)arg1;
- (id)mf_exclusiveLocks;
- (id)mf_strictLockOrdering;
- (id)mf_lockOrdering;
- (void)mf_unlock;
- (void)mf_lock;
- (void)da_performSelectorThatDoesntAffectRetainCount:(SEL)arg1 withObject:(id)arg2;
- (void)addNullRunLoopSourceAndPerformSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4;
- (void)mf_performOnewaySelectorInMainThread:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (void)ab_updateDictionaryForKey:(id)arg1 withChanges:(id)arg2;
- (bool)_mapkit_isInternalAnnotation;
- (bool)_mapkit_internalAnnotationAllowsCustomView;
- (bool)_mapkit_isInternalAnnotationView;
- (void)performBlockOnMainThreadSynchronously:(id)arg1;
- (id)CalClassName;
- (bool)isNull;
- (void)_gkPopulateWithObject:(id)arg1 keymap:(id)arg2;
- (id)_gkViewDebuggingChildren;
- (id)_gkRecursiveDescription;
- (id)_gkViewDebuggingChildKeys;
- (id)_gkDescriptionWithChildren:(int)arg1;
- (id)_gkDescription;
- (void)_gkRemoveObserverWithBlockToken:(id)arg1;
- (id)_gkAddObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 withBlock:(id)arg3;
- (id)mf_objectWithHighest:(id)arg1;
- (void)_gkSetupAccountWithParamaters:(id)arg1 completionHandler:(id)arg2;
- (id)_gkAuthenticatedPlayerID;
- (void)_gkRefreshPhotoForPlayer:(id)arg1 completionHandler:(id)arg2;
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
- (id)storedClassNameForCPLArchiver:(id)arg1;
- (void)cplCopyProperties:(id)arg1 fromObject:(id)arg2;
- (void)_cplCopyProperties:(id)arg1 fromOtherObject:(id)arg2;
- (id)cplDeepCopy;
- (bool)cplProperties:(id)arg1 areEqualToPropertiesOf:(id)arg2 differingProperty:(id*)arg3;
- (bool)cplProperties:(id)arg1 areEqualToPropertiesOf:(id)arg2;
- (unsigned long long)cplSpecialHash;
- (bool)cplSpecialIsEqual:(id)arg1;
- (void)cplCopyPropertiesFromObject:(id)arg1;
- (void)cplDecodePropertiesFromCoder:(id)arg1;
- (void)cplEncodePropertiesWithCoder:(id)arg1;
- (id)cplFullDescription;
- (unsigned long long)cplHash;
- (bool)cplIsEqual:(id)arg1;
- (bool)isNull;
- (id)initFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (void)performSelector:(SEL)arg1 withValue:(id)arg2;
- (void)tsu_runBlock;
- (void)appendJsonStringToString:(id)arg1;
- (id)responderChainProxy:(id)arg1;

@end

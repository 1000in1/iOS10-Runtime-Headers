/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/GameCenterFoundation.framework/GameCenterFoundation
 */

@class NSArray, GKPlayerInternal, NSString, NSDate, NSAttributedString, GKGame;

@interface GKPlayer : NSObject <NSCoding, NSSecureCoding> {
    GKPlayerInternal *_internal;
    NSAttributedString *_whenString;
    NSArray *_friends;
}

@property(retain) NSString * reason;
@property(retain) NSString * reason2;
@property unsigned int rid;
@property int source;
@property(readonly) bool isFriendRecommendation;
@property(readonly) NSString * referenceKey;
@property(retain) NSString * playerID;
@property(readonly) NSString * displayName;
@property(copy) NSString * alias;
@property(retain) GKPlayerInternal * internal;
@property(copy) NSString * status;
@property(readonly) NSString * firstName;
@property(readonly) NSString * lastName;
@property(readonly) NSDate * lastPlayedDate;
@property(readonly) GKGame * lastPlayedGame;
@property(readonly) bool hasPhoto;
@property(getter=isLoaded,readonly) bool loaded;
@property(readonly) bool isFamiliarFriend;
@property unsigned long long numberOfFriends;
@property(readonly) struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; long long x9; } stats;
@property(readonly) NSString * cacheKey;
@property(retain) NSAttributedString * whenString;
@property(readonly) bool isLocalPlayer;
@property(readonly) bool isAnonymousPlayer;
@property(readonly) bool isUnknownPlayer;
@property(readonly) bool isAutomatchPlayer;
@property(retain) NSArray * friends;
@property bool isFriend;

+ (id)playerFromPlayerID:(id)arg1;
+ (void)loadCompletePlayersForPlayers:(id)arg1 completionHandler:(id)arg2;
+ (id)automatchPlayer;
+ (id)unknownPlayer;
+ (id)anonymousPlayer;
+ (void)_loadPlayersForIdentifiers:(id)arg1 withCompletionHandler:(id)arg2;
+ (id)cacheKeyForPlayerID:(id)arg1;
+ (void)loadPlayersForLegacyIdentifiers:(id)arg1 withCompletionHandler:(id)arg2;
+ (void)loadPlayersForIdentifiers:(id)arg1 withCompletionHandler:(id)arg2;
+ (id)canonicalizedPlayerForInternal:(id)arg1;
+ (bool)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (bool)supportsSecureCoding;
+ (void)preloadImagesForPlayers:(id)arg1 size:(long long)arg2;
+ (long long)sizeForPhotoSize:(long long)arg1;

- (bool)hasPhoto;
- (id)playerID;
- (void)loadProfileWithCompletionHandler:(id)arg1;
- (id)minimalPlayer;
- (bool)isFriendRecommendation;
- (void)setWhenString:(id)arg1;
- (id)whenString;
- (void)loadGamesPlayedDetailsWithCompletionHandler:(id)arg1;
- (void)loadGamesPlayed:(id)arg1;
- (void)loadRecentMatchesForGame:(id)arg1 block:(id)arg2;
- (void)loadFriendsAsPlayersWithCompletionHandler:(id)arg1;
- (void)declineFriendRequestWithCompletionHandler:(id)arg1;
- (void)acceptFriendRequestWithCompletionHandler:(id)arg1;
- (bool)isFamiliarFriend;
- (struct { long long x1; long long x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; long long x9; })stats;
- (void)loadGamesPlayedIncludingInstalledGames:(bool)arg1 completionHandler:(id)arg2;
- (void)loadCommonFriends:(bool)arg1 asPlayersWithCompletionHandler:(id)arg2;
- (id)lastPlayedGame;
- (id)displayNameWithOptions:(unsigned char)arg1;
- (void)setFriends:(id)arg1;
- (id)friends;
- (void)postChangeNotification;
- (id)internal;
- (void)setInternal:(id)arg1;
- (id)initWithInternalRepresentation:(id)arg1;
- (id)sortName;
- (void)_postChangeNotification;
- (id)email;
- (id)emails;
- (id)init;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (bool)respondsToSelector:(SEL)arg1;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)displayName;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (id)referenceKey;
- (id)cacheKey;
- (id)imageURLForPhotoSizeList;
- (id)imageSourceForPlaceholders;
- (id)placeholderImageForType:(unsigned char)arg1;
- (id)photoURLForSize:(long long)arg1;
- (id)placeholderImage;
- (void)loadPhotoForSize:(long long)arg1 withCompletionHandler:(id)arg2;
- (void)_loadPhotoForSize:(long long)arg1 withCompletionHandler:(id)arg2;

@end

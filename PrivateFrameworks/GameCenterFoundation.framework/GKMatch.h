/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/GameCenterFoundation.framework/GameCenterFoundation
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSData, GKSession, NSString, NSArray, GKConnection, NSMutableDictionary, GKThreadsafeDictionary, NSMutableArray, NSDictionary, <GKMatchDelegate>;

@interface GKMatch : NSObject <GKSessionDelegate, GKSessionPrivateDelegate> {
    unsigned char _version;
    bool_needHostScore;
    bool_hostScoreForQuery;
    unsigned int _packetSequenceNumber;
    GKThreadsafeDictionary *_playersByIdentifier;
    <GKMatchDelegate> *_delegateWeak;
    GKSession *_session;
    GKConnection *_connection;
    unsigned long long _expectedPlayerCount;
    NSMutableDictionary *_playerEventQueues;
    NSMutableArray *_reinvitedPlayers;
    NSData *_selfBlob;
    <GKMatchDelegate> *_inviteDelegateWeak;
    NSMutableDictionary *_playerPushTokens;
    NSMutableArray *_opponentIDs;
    NSString *_rematchID;
    long long _rematchCount;
    NSDictionary *_networkStatistics;
    NSMutableDictionary *_hostScores;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _chooseHostCompletion;

}

@property(readonly) NSArray * players;
@property <GKMatchDelegate> * delegate;
@property(readonly) unsigned long long expectedPlayerCount;
@property(retain) GKSession * session;
@property(retain) GKConnection * connection;
@property(retain) NSMutableDictionary * playerEventQueues;
@property(retain) GKThreadsafeDictionary * playersByIdentifier;
@property(retain) NSMutableArray * reinvitedPlayers;
@property(retain) NSData * selfBlob;
@property unsigned char version;
@property <GKMatchDelegate> * inviteDelegate;
@property unsigned int packetSequenceNumber;
@property(retain) NSMutableDictionary * playerPushTokens;
@property(retain) NSMutableArray * opponentIDs;
@property(retain) NSString * rematchID;
@property long long rematchCount;
@property(retain) NSDictionary * networkStatistics;
@property(retain) NSMutableDictionary * hostScores;
@property bool needHostScore;
@property bool hostScoreForQuery;
@property(copy) id chooseHostCompletion;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;


- (id)selfBlob;
- (void)session:(id)arg1 networkStatisticsChanged:(id)arg2;
- (void)session:(id)arg1 initiateRelay:(id)arg2 forPeer:(id)arg3;
- (void)session:(id)arg1 connectionWithPeerFailed:(id)arg2 withError:(id)arg3;
- (void)receiveData:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void*)arg4;
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (id)networkStatistics;
- (void)setInviteDelegate:(id)arg1;
- (id)chooseHostCompletion;
- (bool)hostScoreForQuery;
- (bool)needHostScore;
- (id)hostScores;
- (long long)rematchCount;
- (id)opponentIDs;
- (id)playerPushTokens;
- (void)setReinvitedPlayers:(id)arg1;
- (void)setPlayerEventQueues:(id)arg1;
- (id)playerEventQueues;
- (void)setPlayersByIdentifier:(id)arg1;
- (void)session:(id)arg1 updateRelay:(id)arg2 forPeer:(id)arg3;
- (void)preemptRelay:(id)arg1;
- (void)acceptRelayResponse:(id)arg1 player:(id)arg2;
- (void)chooseBestHostPlayerWithCompletionHandler:(id)arg1;
- (void)rematchWithCompletionHandler:(id)arg1;
- (id)voiceChatWithName:(id)arg1;
- (bool)sendDataToAllPlayers:(id)arg1 withDataMode:(long long)arg2 error:(id*)arg3;
- (bool)sendData:(id)arg1 toPlayers:(id)arg2 withDataMode:(long long)arg3 error:(id*)arg4;
- (void)inviteeComboMatched:(long long)arg1;
- (void)connectToNearbyPlayer:(id)arg1 withConnectionData:(id)arg2;
- (void)preLoadInviter:(id)arg1 sessionToken:(id)arg2;
- (id)playerIDs;
- (void)requestRelayUpdateForPlayer:(id)arg1;
- (void)updateRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;
- (void)requestRelayInitForPlayer:(id)arg1;
- (void)initRelayInfoFromServerResponse:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayResponse:(id)arg1 player:(id)arg2;
- (void)updateRelayConnectionForPlayer:(id)arg1;
- (void)updateRelayInfo:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayConnectionForPlayer:(id)arg1;
- (void)initRelayInfoFromPush:(id)arg1 forPlayer:(id)arg2;
- (bool)shouldStartRelay:(id)arg1;
- (id)dataFromBase64String:(id)arg1;
- (void)setNetworkStatistics:(id)arg1;
- (void)queueData:(id)arg1 forPlayer:(id)arg2;
- (void)sendData:(id)arg1 fromPlayer:(id)arg2;
- (void)receivedChooseHostData:(id)arg1 fromPlayer:(id)arg2;
- (void)deferStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (void)conditionallyReinvitePlayer:(id)arg1 sessionToken:(id)arg2;
- (void)conditionallyRelaunchPlayer:(id)arg1;
- (id)allIDs;
- (id)inviteDelegate;
- (void)sendVersionData:(unsigned char)arg1 toPeer:(id)arg2;
- (void)setNeedHostScore:(bool)arg1;
- (bool)haveAllHostScores;
- (void)addHostScore:(int)arg1 forPlayer:(id)arg2;
- (void)sendHostScoreAsQuery:(bool)arg1;
- (void)setHostScoreForQuery:(bool)arg1;
- (bool)selectHostIfRequestedAndAllScored;
- (void)calculateHostScore;
- (void)setChooseHostCompletion:(id)arg1;
- (void)setHostScores:(id)arg1;
- (void)chooseBestHostingPlayerWithCompletionHandler:(id)arg1;
- (bool)sendInviteData:(id)arg1 error:(id*)arg2;
- (void)reinviteeDeclinedNotification:(id)arg1;
- (void)reinviteeAcceptedNotification:(id)arg1;
- (void)relayPush:(id)arg1;
- (void)connectToPlayers:(id)arg1 withPeerDictionaries:(id)arg2 version:(unsigned char)arg3 sessionToken:(id)arg4 cdxTicket:(id)arg5;
- (void)updateStateForPlayer:(id)arg1 state:(long long)arg2;
- (void)sendStateCallbackToDelegate:(id)arg1 forPlayer:(id)arg2 state:(long long)arg3;
- (void)updateRematchID;
- (void)_delegate:(id)arg1 didReceiveData:(id)arg2 fromPlayer:(id)arg3;
- (id)playersByIdentifier;
- (id)rematchID;
- (bool)sendData:(id)arg1 toPlayers:(id)arg2 dataMode:(long long)arg3 error:(id*)arg4;
- (id)peerFromPlayer:(id)arg1;
- (id)packet:(unsigned char)arg1 data:(id)arg2;
- (void)setPacketSequenceNumber:(unsigned int)arg1;
- (id)nearbyConnectionData;
- (void)withEventQueueForPlayer:(id)arg1 createIfNeeded:(bool)arg2 perform:(id)arg3;
- (id)playerFromPeer:(id)arg1;
- (void)sendVersionData:(unsigned char)arg1;
- (void)setRematchCount:(long long)arg1;
- (void)setRematchID:(id)arg1;
- (void)addPlayers:(id)arg1;
- (void)withEventQueueForPlayer:(id)arg1 create:(id)arg2 perform:(id)arg3;
- (void)getLocalConnectionDataWithCompletionHandler:(id)arg1;
- (void)setSelfBlob:(id)arg1;
- (void)localPlayerDidChange:(id)arg1;
- (void)relayPushNotification:(id)arg1;
- (void)setOpponentIDs:(id)arg1;
- (void)setPlayerPushTokens:(id)arg1;
- (void)sendQueuedPacketsForPlayer:(id)arg1;
- (void)sendStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (void)withEventQueueForPlayer:(id)arg1 perform:(id)arg2;
- (id)reinvitedPlayers;
- (unsigned int)packetSequenceNumber;
- (unsigned long long)expectedPlayerCount;
- (id)players;
- (unsigned char)version;
- (id)connection;
- (id)init;
- (void)setDelegate:(id)arg1;
- (void)setSession:(id)arg1;
- (id)delegate;
- (id)session;
- (void)setConnection:(id)arg1;
- (void)dealloc;
- (id)description;
- (void)disconnect;
- (void)setVersion:(unsigned char)arg1;
- (bool)connected:(id)arg1;

@end

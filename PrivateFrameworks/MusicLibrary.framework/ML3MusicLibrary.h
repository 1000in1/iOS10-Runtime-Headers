/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class ML3DatabaseConnection, ML3DatabaseConnectionPool, ML3Container, ML3DatabaseMetadata, NSCountedSet, _LibraryNotification, NSArray, NSObject<OS_dispatch_queue>, ML3ArtworkUtility, ML3AccountCacheDatabase, NSString, ML3UbiquitousDatabase, NSMutableArray, NSMutableDictionary;

@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate> {
    NSString *_libraryUID;
    NSObject<OS_dispatch_queue> *_atomicityQueue;
    BOOL _reloadForMediaServiceNeeded;
    NSMutableArray *_validatingConnections;
    NSMutableArray *_artworkConversionCompletionHandlers;
    NSString *_artworkConverterPIDNotifyName;
    int _artworkConverterPIDToken;
    BOOL _isConvertingArtwork;
    ML3AccountCacheDatabase *_accountCacheDatabase;
    ML3UbiquitousDatabase *_ubiquitousDatabase;
    ML3DatabaseConnection *_geniusDatabase;
    NSCountedSet *_notifyNamesToIgnore;
    NSMutableArray *_pendingNotifyPostNames;
    NSMutableDictionary *_pendingLocalNotificationsToPost;
    _LibraryNotification *_libraryChangedNotify;
    _LibraryNotification *_nonContentsNotify;
    _LibraryNotification *_invisiblePropertyNotify;
    _LibraryNotification *_displayValuesNotify;
    _LibraryNotification *_syncGenerationNotify;
    _LibraryNotification *_libraryUIDNotify;
    id _mcSettingsObserver;
    id _loggingObserver;
    int _willDeleteDatabaseNotifyToken;
    ML3ArtworkUtility *_artworkUtility;
    struct iPhoneSortKeyBuilder { } *_sortKeyBuilder;
    BOOL _isHomeSharingLibraryLoaded;
    BOOL _isHomeSharingLibrary;
    BOOL _hasEverConnectedTo;
    BOOL _keepPresignedValidyAfterVerification;
    ML3DatabaseConnectionPool *_connectionPool;
    NSString *_databasePath;
    NSArray *_libraryEntityFilterPredicates;
    NSArray *_libraryContainerFilterPredicates;
}

@property(retain) ML3DatabaseConnectionPool * connectionPool;
@property(retain) ML3ArtworkUtility * artworkUtility;
@property(retain) NSString * databasePath;
@property(copy) NSString * libraryUID;
@property(readonly) long long persistentID;
@property(readonly) long long currentRevision;
@property(readonly) long long currentContentRevision;
@property long long syncGenerationID;
@property(readonly) long long autoFilledTracksTotalSize;
@property(readonly) ML3Container * currentDevicePurchasesPlaylist;
@property(readonly) ML3DatabaseMetadata * databaseInfo;
@property(readonly) NSArray * localizedSectionIndexTitles;
@property(readonly) NSArray * preferredAudioTracks;
@property(readonly) NSArray * preferredSubtitleTracks;
@property BOOL isHomeSharingLibrary;
@property(readonly) BOOL mediaRestrictionEnabled;
@property(readonly) BOOL hasEverConnectedToDatabase;
@property BOOL keepPresignedValidyAfterVerification;
@property(retain) NSArray * libraryEntityFilterPredicates;
@property(retain) NSArray * libraryContainerFilterPredicates;

+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 isFolder:(BOOL*)arg4;
+ (id)controlDirectoryPathWithBasePath:(id)arg1;
+ (id)mediaFolderPath;
+ (BOOL)dropIndexesUsingConnection:(id)arg1;
+ (id)itemSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (id)storeLinkSchemaSQL;
+ (BOOL)migrateToCurrentUserVersionUsingConnection:(id)arg1 musicLibrary:(id)arg2;
+ (id)allTriggersSQL;
+ (id)indexSchemaSQL;
+ (BOOL)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (int)userVersionUsingConnection:(id)arg1;
+ (int)currentUserVersion;
+ (BOOL)createTriggersUsingConnection:(id)arg1;
+ (BOOL)createIndexesUsingConnection:(id)arg1;
+ (id)allSchemaSQL;
+ (id)allPragmaSQL;
+ (id)itemIndexSchemaSQL;
+ (BOOL)defaultRememberBookmarkTimeForMediaType:(unsigned long)arg1;
+ (BOOL)defaultExcludeFromShuffleForMediaType:(unsigned long)arg1;
+ (id)systemCurrentLanguage;
+ (id)sortMapNewSchemaSQL;
+ (BOOL)inTransactionUpdateSearchMapOnConnection:(id)arg1;
+ (BOOL)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(BOOL)arg2;
+ (BOOL)updateTrackIntegrityOnConnection:(id)arg1;
+ (void)enumerateSortMapTablesUsingBlock:(id)arg1;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (void)setImportationEnabled:(BOOL)arg1;
+ (BOOL)importationEnabled;
+ (BOOL)processHasDatabaseWritePermissions;
+ (void)disableAutomaticDatabaseArtworkConversion;
+ (void)disableAutomaticDatabaseValidation;
+ (void)disableSharedLibrary;
+ (id)mediaFolderRelativePath:(id)arg1;
+ (id)_purgeableTrackPredicateWithUrgency:(unsigned int)arg1;
+ (BOOL)automaticDatabaseArtworkConversionEnabled;
+ (BOOL)updateSortMapOnConnection:(id)arg1;
+ (BOOL)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (id)allTables;
+ (BOOL)_hasArtworkConversionManifestTasksRemainingUsingConnection:(id)arg1;
+ (BOOL)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 createParentFolderIfNecessary:(BOOL)arg4;
+ (id)fallbackGeniusDatabaseFilePath;
+ (void)configureMediaLibraryDatabaseConnection:(id)arg1;
+ (BOOL)buildDatabaseTablesUsingConnection:(id)arg1 popuplateDatabaseTablesOnConnectionBlock:(id)arg2;
+ (id)geniusDatabaseFilePath;
+ (id)sharedLibraryDatabasePath;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)sharedLibrary;
+ (id)sectionIndexTitles;
+ (void)initialize;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3 progressHandler:(id)arg4;

- (void)updateOrderingLanguagesForCurrentLanguage;
- (void)setIsHomeSharingLibrary:(BOOL)arg1;
- (BOOL)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id*)arg2;
- (void)removeSource:(int)arg1 fromTracksWithPersistentIDs:(id)arg2;
- (BOOL)finishImportSession:(id)arg1;
- (BOOL)removeTrack:(id)arg1 withSessionRef:(id)arg2;
- (BOOL)updateTrack:(id)arg1 withSessionRef:(id)arg2;
- (BOOL)addTrack:(id)arg1 withSessionRef:(id)arg2;
- (id)beginImportSessionWithConnection:(id)arg1;
- (id)locationKindForKind:(id)arg1;
- (BOOL)resetAllContents;
- (BOOL)removeLocationsForItemsMissingAssets;
- (BOOL)buildDatabaseTables;
- (BOOL)deleteAndRecreateDatabaseUsingConnection:(id)arg1;
- (BOOL)populateArtworkCacheWithArtworkData:(id)arg1 trackValues:(id)arg2;
- (BOOL)updateActivePlaylistNamesForCurrentLanguage;
- (BOOL)coerceValidDatabase;
- (BOOL)handleSchemaUpgrade;
- (BOOL)handlePreprocessDatabase;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (id)composerForComposerName:(id)arg1;
- (id)genreForGenre:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(BOOL*)arg2;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(BOOL)arg5;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)libraryContainerFilterPredicates;
- (id)libraryEntityFilterPredicates;
- (void)setDatabasePath:(id)arg1;
- (void)setArtworkUtility:(id)arg1;
- (void)setConnectionPool:(id)arg1;
- (void)setKeepPresignedValidyAfterVerification:(BOOL)arg1;
- (BOOL)hasEverConnectedToDatabase;
- (BOOL)hasPresignedValidity;
- (void)migratePresignedValidity;
- (BOOL)deleteDatabaseProperty:(id)arg1;
- (void)removeOrphanedTracks;
- (void)beginConvertingArtworkFormatsWithCompletionHandler:(id)arg1;
- (void)beginAutoConvertingArtworkFormats;
- (BOOL)deleteArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2;
- (BOOL)insertArtworkWithImageData:(id)arg1 forCacheID:(id)arg2 forFormatID:(unsigned int)arg3;
- (BOOL)deleteAllArtwork;
- (BOOL)insertArtworkWithImageData:(id)arg1 forCacheID:(id)arg2;
- (BOOL)hasArtworkForCacheID:(id)arg1;
- (void)loadArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2 completionHandler:(id)arg3;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)autoFilledTracksTotalSize;
- (BOOL)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(int)arg3;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(int)arg2 usingBlock:(id)arg3;
- (BOOL)updateSortMap;
- (long long)addStringToSortMap:(id)arg1;
- (BOOL)requiresNonSchemaUpdatesOnConnection:(id)arg1;
- (BOOL)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;
- (void)savePlaylists;
- (void)saveTrackMetadata;
- (id)groupingKeysForStrings:(id)arg1;
- (id)groupingKeyForString:(id)arg1;
- (BOOL)populateStaticItemsOfDynamicContainers;
- (id)accountCacheDatabase;
- (BOOL)emptyAllTables;
- (void)performReadOnlyDatabaseTransactionWithBlock:(id)arg1;
- (void)reconnectToDatabase;
- (BOOL)mediaRestrictionEnabled;
- (id)currentDevicePurchasesPlaylist;
- (void)setLibraryUID:(id)arg1;
- (void)setSyncGenerationID:(long long)arg1;
- (long long)currentContentRevision;
- (long long)currentRevision;
- (BOOL)isHomeSharingLibrary;
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;
- (void)connectionWillCloseDatabase:(id)arg1;
- (void)connectionDidOpenDatabase:(id)arg1;
- (void)connectionWillOpenDatabase:(id)arg1;
- (void)_noteUnnecessaryConversionForDeviceTypeFromArtworkFormat:(unsigned int)arg1 toArtworkFormat:(unsigned int)arg2;
- (unsigned int)_convertArtworkInManifsetFromArtworkFormat:(unsigned int)arg1 toArtworkFormat:(unsigned int)arg2 deleteOldFormat:(BOOL)arg3 notificationInterval:(double)arg4;
- (void)_atomicClearIsConvertingArtwork;
- (unsigned int)_convertOriginalJPEGToCoverFlowJPEGWithNotificationInterval:(double)arg1;
- (unsigned int)_convertAlbumListJPEGToBGRAWithNotificationInterval:(double)arg1;
- (unsigned int)_convertAlbumGridBGRA1xToJPEG1xWithNotificationInterval:(double)arg1;
- (unsigned int)_convertLegacyArtworkFromArtworkBlobFilePath:(id)arg1 success:(BOOL*)arg2;
- (BOOL)_atomicTestAndSetIsConvertingArtworkWithCompletionHandler:(id)arg1;
- (void)notifyDisplayValuesPropertyDidChange;
- (BOOL)_convertArtworkCacheID:(id)arg1 fromArtworkFormat:(unsigned int)arg2 toArtworkFormat:(unsigned int)arg3 sourceOptions:(id)arg4 colorSpace:(struct CGColorSpace { }*)arg5;
- (void)_enqueueNotifyPostName:(id)arg1;
- (void)_performOnGlobalArtworkConversionQueue:(id)arg1;
- (void)deletePresignedValidity;
- (BOOL)keepPresignedValidyAfterVerification;
- (void)updateTrackIntegrity;
- (BOOL)verifyPresignedValidity;
- (void)_convertArtworkFormatsInBackground:(BOOL)arg1 completionHandler:(id)arg2;
- (BOOL)deleteArtworkForCacheID:(id)arg1;
- (BOOL)deleteArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2 deleteAllFromConversionTable:(BOOL)arg3;
- (void)deleteFromArtworkConversionForCacheID:(id)arg1 fromFormatID:(unsigned int)arg2 toFormatID:(unsigned int)arg3;
- (BOOL)writeToDatabaseArtworkForCacheID:(id)arg1 length:(unsigned long)arg2 formatID:(unsigned int)arg3 imageSubRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4;
- (BOOL)hasArtworkForCacheID:(id)arg1 ensureArtworkFileExists:(BOOL)arg2;
- (id)artworkDataForCacheID:(id)arg1 formatID:(unsigned int)arg2;
- (BOOL)compactArtwork;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned int)arg2 respectSongMattress:(BOOL)arg3;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned int)arg2;
- (void)_enumeratePurgeableTracksForUrgency:(unsigned int)arg1 respectSongMattress:(BOOL)arg2 usingBlock:(id)arg3;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned int)arg1 respectSongMattress:(BOOL)arg2;
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned int)arg1;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (struct { long long x1; int x2; })nameOrderForString:(id)arg1;
- (id)ubiquitousDatabase;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)arg1;
- (void)_postInvisiblePropertyChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)accessSortKeyBuilder:(id)arg1;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (id)checkoutReaderConnection;
- (BOOL)validateDatabaseWithTimeout:(double)arg1;
- (id)databaseInfo;
- (void)_delayableNotifyPost:(id)arg1 localNotificationName:(id)arg2;
- (void)_enqueueLocalNotificationName:(id)arg1 isSourceExternal:(BOOL)arg2;
- (id)initWithPath:(id)arg1 readOnly:(BOOL)arg2 populateUnitTestTablesBlock:(id)arg3;
- (id)connectionPool;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned int)arg2 usingBlock:(id)arg3;
- (BOOL)createIndexes;
- (BOOL)dropItemIndexes;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyNonContentsPropertyDidChange;
- (void)checkInDatabaseConnection:(id)arg1;
- (id)checkoutWriterConnection;
- (void)notifyContentsDidChange;
- (void)databaseConnectionAllowingWrites:(BOOL)arg1 withBlock:(id)arg2;
- (BOOL)handleDatabaseValidation;
- (void)performDatabaseTransactionWithBlock:(id)arg1;
- (id)geniusDatabase;
- (id)artworkUtility;
- (void)setLibraryContainerFilterPredicates:(id)arg1;
- (void)setLibraryEntityFilterPredicates:(id)arg1;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(id)arg2;
- (id)preferredSubtitleTracks;
- (id)preferredAudioTracks;
- (id)libraryUID;
- (unsigned int)sectionIndexTitleIndexForSectionIndex:(unsigned int)arg1;
- (id)localizedSectionIndexTitles;
- (id)localizedSectionHeaderForSectionIndex:(unsigned int)arg1;
- (long long)syncGenerationID;
- (BOOL)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (id)valueForDatabaseProperty:(id)arg1;
- (long long)persistentID;
- (id)databasePath;
- (void)dealloc;
- (void).cxx_destruct;
- (id)initWithPath:(id)arg1;
- (void)removeJaliscoTrackData;
- (void)removeSagaTrackData;
- (BOOL)executeUpdateSQL:(id)arg1;
- (void)fillContainerForHomeSharingConnection:(id)arg1 containerID:(long long)arg2 completionHandler:(id)arg3;
- (void)checkForChangesOnConnection:(id)arg1 completionHandler:(id)arg2;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class ML3DatabaseConnectionPool, NSString, NSUUID, <ML3DatabaseConnectionDelegate>, ML3DatabaseStatementCache, NSMutableArray;

@interface ML3DatabaseConnection : NSObject  {
    struct sqlite3 { } *_sqlitedb;
    bool_isOpen;
    ML3DatabaseStatementCache *_statementCache;
    unsigned long long _statementsSinceLastCheckpoint;
    unsigned int _transactionLevel;
    bool_nestedTransactionWantsToRollback;
    NSMutableArray *_enqueuedTransactionCommitBlocks;
    ML3DatabaseConnectionPool *_owningPool;
    NSMutableArray *_registeredFunctions;
    NSMutableArray *_registeredModules;
    int _profilingLevel;
    NSString *_lastTracedStatement;
    int _willDeleteDatabaseNotifyToken;
    bool_isReadOnly;
    bool_automaticCheckpointingEnabled;
    <ML3DatabaseConnectionDelegate> *_connectionDelegate;
    NSString *_databasePath;
    unsigned long long _journalingMode;
    unsigned long long _protectionLevel;
    NSUUID *_currentTransactionID;
    NSUUID *_uniqueIdentifier;
    const void *_iTunesExtensions;
    unsigned long long _checkpointStatementThreshold;
}

@property <ML3DatabaseConnectionDelegate> * connectionDelegate;
@property(readonly) NSString * databasePath;
@property(readonly) bool isOpen;
@property(setter=setReadOnly:) bool isReadOnly;
@property unsigned long long journalingMode;
@property unsigned long long protectionLevel;
@property(readonly) bool isInTransaction;
@property(readonly) bool transactionMarkedForRollBack;
@property(readonly) NSUUID * currentTransactionID;
@property int profilingLevel;
@property(readonly) NSUUID * uniqueIdentifier;
@property const void* iTunesExtensions;
@property bool automaticCheckpointingEnabled;
@property unsigned long long checkpointStatementThreshold;


- (id)databasePath;
- (bool)performTransactionWithBlock:(id)arg1;
- (void)setCheckpointStatementThreshold:(unsigned long long)arg1;
- (unsigned long long)checkpointStatementThreshold;
- (void)setAutomaticCheckpointingEnabled:(bool)arg1;
- (bool)automaticCheckpointingEnabled;
- (void)setProtectionLevel:(unsigned long long)arg1;
- (unsigned long long)protectionLevel;
- (id)connectionDelegate;
- (void)_handleDatabaseProfileStatement:(const char *)arg1 executionTimeNS:(unsigned long long)arg2;
- (void)_handleDatabaseTraceStatement:(const char *)arg1;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2;
- (void)_createDatabaseFileIfNonexistent;
- (id)_shortDescription;
- (void)_setTransactionLevel:(unsigned long long)arg1;
- (unsigned long long)_transactionLevel;
- (id)_databaseFilePaths;
- (id)_owningPool;
- (long long)lastInsertionRowID;
- (bool)registerModuleName:(id)arg1 moduleMethods:(struct sqlite3_module { int x1; int (*x2)(); int (*x3)(); int (*x4)(); int (*x5)(); int (*x6)(); int (*x7)(); int (*x8)(); int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); int (*x13)(); int (*x14)(); int (*x15)(); int (*x16)(); int (*x17)(); int (*x18)(); int (*x19)(); int (*x20)(); int (*x21)(); int (*x22)(); int (*x23)(); }*)arg2;
- (bool)transactionMarkedForRollBack;
- (void)setCurrentTransactionID:(id)arg1;
- (int)profilingLevel;
- (bool)_databaseFileExists;
- (bool)_validatePreparedStatement:(id)arg1 error:(id*)arg2;
- (int)checkpointDatabase;
- (bool)_executeStatement:(id)arg1 withError:(id*)arg2;
- (id)_prepareStatement:(id)arg1 error:(id*)arg2;
- (id)_registeredModuleNamed:(id)arg1;
- (bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(int (*)())arg3 userData:(void*)arg4;
- (bool)performTransactionWithBlock:(id)arg1 usingBehaviorType:(unsigned long long)arg2;
- (void)_executeTransactionCommitBlocks:(bool)arg1;
- (bool)_internalEndTransactionAndCommit:(bool)arg1;
- (bool)_internalBeginTransactionWithBehaviorType:(unsigned long long)arg1;
- (bool)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3;
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (void)_resetUnfinalizedStatements;
- (bool)popToRootTransactionAndCommit:(bool)arg1;
- (void)_logCurrentError;
- (bool)_handleZombieSQLiteConnection:(struct sqlite3 { }*)arg1;
- (void)_finalizeAllStatements;
- (void)_createDatabaseDirectoryIfNonexistent;
- (bool)_openWithFlags:(int)arg1;
- (void)_updateProfilingLevel;
- (bool)_isSharedMediaLibraryDatabase;
- (void)setJournalingMode:(unsigned long long)arg1;
- (void)setProfilingLevel:(int)arg1;
- (void)_setOwningPool:(id)arg1;
- (bool)isInTransaction;
- (void)_handleDatabaseCorruption;
- (bool)_handleBusyLockWithNumberOfRetries:(int)arg1;
- (void)_ensureConnectionIsOpen;
- (bool)registerModule:(id)arg1;
- (unsigned long long)journalingMode;
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(bool)arg4;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (bool)deleteDatabase;
- (const void*)iTunesExtensions;
- (void)setITunesExtensions:(const void*)arg1;
- (bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(id)arg3;
- (bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(int (*)())arg3;
- (bool)tableExists:(id)arg1;
- (bool)databasePathExists;
- (id)initWithDatabasePath:(id)arg1;
- (bool)pushTransactionUsingBehaviorType:(unsigned long long)arg1;
- (void)setConnectionDelegate:(id)arg1;
- (bool)executeUpdate:(id)arg1;
- (bool)popTransactionAndCommit:(bool)arg1;
- (id)currentTransactionID;
- (bool)pushTransaction;
- (void)enqueueBlockForTransactionCommit:(id)arg1;
- (id)sqliteError;
- (struct sqlite3 { }*)_sqliteHandle;
- (bool)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2;
- (id)executeQuery:(id)arg1;
- (bool)isOpen;
- (void)setReadOnly:(bool)arg1;
- (bool)isReadOnly;
- (void)flush;
- (id)init;
- (bool)close;
- (bool)open;
- (bool)isEqual:(id)arg1;
- (id)uniqueIdentifier;
- (void)dealloc;
- (void).cxx_destruct;
- (id)description;

@end

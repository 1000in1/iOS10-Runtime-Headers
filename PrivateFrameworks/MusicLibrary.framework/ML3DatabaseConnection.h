/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class <ML3DatabaseConnectionDelegate>, NSHashTable, NSObject<OS_dispatch_queue>, ML3DatabaseConnectionPool, CPLRUDictionary, NSMutableArray, NSUUID, NSFileHandle, NSString;

@interface ML3DatabaseConnection : NSObject  {
    struct sqlite3 { } *_sqlitedb;
    BOOL _isOpen;
    CPLRUDictionary *_statementCache;
    NSHashTable *_statements;
    unsigned int _statementsSinceLastCheckpoint;
    NSObject<OS_dispatch_queue> *_serialQueue;
    unsigned int _transactionLevel;
    BOOL _nestedTransactionWantsToRollback;
    NSMutableArray *_enqueuedTransactionCommitBlocks;
    ML3DatabaseConnectionPool *_owningPool;
    NSMutableArray *_registeredFunctions;
    NSMutableArray *_registeredModules;
    int _profilingLevel;
    NSFileHandle *_profilingLogHandle;
    int _willDeleteDatabaseNotifyToken;
    BOOL _shouldCacheStatements;
    BOOL _isReadOnly;
    BOOL _automaticCheckpointingEnabled;
    NSString *_databasePath;
    NSUUID *_uniqueIdentifier;
    <ML3DatabaseConnectionDelegate> *_connectionDelegate;
    const void *_iTunesExtensions;
    unsigned int _checkpointStatementThreshold;
}

@property(readonly) NSString * databasePath;
@property BOOL shouldCacheStatements;
@property(readonly) BOOL isOpen;
@property(setter=setReadOnly:) BOOL isReadOnly;
@property(readonly) BOOL isInTransaction;
@property int profilingLevel;
@property(readonly) NSUUID * uniqueIdentifier;
@property <ML3DatabaseConnectionDelegate> * connectionDelegate;
@property const void* iTunesExtensions;
@property BOOL automaticCheckpointingEnabled;
@property unsigned int checkpointStatementThreshold;


- (void)setCheckpointStatementThreshold:(unsigned int)arg1;
- (unsigned int)checkpointStatementThreshold;
- (void)setAutomaticCheckpointingEnabled:(BOOL)arg1;
- (BOOL)automaticCheckpointingEnabled;
- (id)connectionDelegate;
- (void)setShouldCacheStatements:(BOOL)arg1;
- (BOOL)shouldCacheStatements;
- (void)_writeToProfilingLog:(id)arg1;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2;
- (void)_createDatabaseFileIfNonexistent;
- (id)_owningPool;
- (long long)lastInsertionRowID;
- (void*)moduleContextForModuleName:(id)arg1;
- (void)setModuleContext:(void*)arg1 forModuleName:(id)arg2 contextReleaseBlock:(id)arg3;
- (BOOL)registerModuleName:(id)arg1 moduleMethods:(const struct sqlite3_module { int x1; int (*x2)(); int (*x3)(); int (*x4)(); int (*x5)(); int (*x6)(); int (*x7)(); int (*x8)(); int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); int (*x13)(); int (*x14)(); int (*x15)(); int (*x16)(); int (*x17)(); int (*x18)(); int (*x19)(); int (*x20)(); int (*x21)(); int (*x22)(); int (*x23)(); }*)arg2;
- (int)profilingLevel;
- (void)_resetUnfinalizedStatements;
- (BOOL)_databaseFileExists;
- (BOOL)_validatePreparedStatement:(id)arg1 error:(id*)arg2;
- (BOOL)_handleBusyLockWithNumberOfRetries:(int)arg1;
- (int)checkpointDatabase;
- (BOOL)_executeStatement:(id)arg1;
- (void)_cacheStatement:(id)arg1 forSQL:(id)arg2;
- (id)_prepareStatement:(id)arg1 error:(id*)arg2;
- (id)_cachedStatementForSQL:(id)arg1;
- (int)_onQueueFinalizeStatement:(id)arg1;
- (id)_registeredModuleNamed:(id)arg1;
- (void)_executeTransactionCommitBlocks:(BOOL)arg1;
- (BOOL)_internalEndTransactionAndCommit:(BOOL)arg1;
- (BOOL)_internalBeginTransactionWithBehaviorType:(unsigned int)arg1;
- (BOOL)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3;
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (void)_finalizeAllStatements;
- (void)_logCurrentError;
- (void)_createDatabaseDirectoryIfNonexistent;
- (void)_updateProfilingLevel;
- (void)_handleDatabaseDeletion;
- (id)_shortDescription;
- (BOOL)_isSharedMediaLibraryDatabase;
- (void)setProfilingLevel:(int)arg1;
- (void)_setOwningPool:(id)arg1;
- (BOOL)_openWithFlags:(int)arg1 isRetry:(BOOL)arg2;
- (int)_finalizeStatement:(id)arg1;
- (BOOL)_handleDatabaseCorruption;
- (void)_ensureConnectionIsOpen;
- (BOOL)performTransactionWithBlock:(id)arg1 usingBehaviorType:(unsigned int)arg2;
- (BOOL)deleteDatabase;
- (BOOL)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(id)arg3;
- (id)initWithDatabasePath:(id)arg1;
- (BOOL)executeUpdate:(id)arg1;
- (BOOL)tableExists:(id)arg1;
- (BOOL)databasePathExists;
- (BOOL)pushTransactionUsingBehaviorType:(unsigned int)arg1;
- (void)setConnectionDelegate:(id)arg1;
- (const void*)iTunesExtensions;
- (void)setITunesExtensions:(const void*)arg1;
- (BOOL)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(int (*)())arg3 userData:(void*)arg4;
- (BOOL)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(int (*)())arg3;
- (BOOL)popToRootTransactionAndCommit:(BOOL)arg1;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (BOOL)popTransactionAndCommit:(BOOL)arg1;
- (void)enqueueBlockForTransactionCommit:(id)arg1;
- (BOOL)pushTransaction;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2;
- (BOOL)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id*)arg3;
- (id)sqliteError;
- (struct sqlite3 { }*)_sqliteHandle;
- (BOOL)isInTransaction;
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(BOOL)arg4;
- (id)executeQuery:(id)arg1;
- (id)databasePath;
- (BOOL)performTransactionWithBlock:(id)arg1;
- (BOOL)isOpen;
- (void)setReadOnly:(BOOL)arg1;
- (BOOL)isReadOnly;
- (void)flush;
- (id)init;
- (BOOL)close;
- (BOOL)open;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (void).cxx_destruct;
- (id)description;
- (id)uniqueIdentifier;

@end

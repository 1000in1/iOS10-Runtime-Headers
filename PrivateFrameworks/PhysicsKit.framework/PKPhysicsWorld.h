/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/PhysicsKit.framework/PhysicsKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSMutableArray, NSMutableDictionary, <PKPhysicsContactDelegate>;

@interface PKPhysicsWorld : NSObject <NSCoding> {
    struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct PKCAether { struct vector<PKCField *, std::__1::allocator<PKCField *> > { struct PKCField {} **x_1_2_1; struct PKCField {} **x_1_2_2; struct __compressed_pair<PKCField **, std::__1::allocator<PKCField *> > { struct PKCField {} **x_3_3_1; } x_1_2_3; } x_8_1_1; } x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; double x17; float x18; struct PKCMechanics { struct b2World {} *x_19_1_1; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_2_2_1; struct QuadTree {} **x_2_2_2; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_3_3_1; } x_2_2_3; } x_19_1_2; } x19; } *_world;
    struct b2Vec2 { 
        float x; 
        float y; 
    } _gravity;
    bool_doSleep;
    double _accumulatedDt;
    struct PKContactListener { 
        int (**_vptr$b2ContactListener)(); 
        NSMutableDictionary *_contacts; 
        <PKPhysicsContactDelegate> *_contactDelegate; 
    } _contactListener;
    float _speed;
    NSMutableArray *_bodies;
    NSMutableArray *_joints;
    NSMutableArray *_fields;
    NSMutableArray *_postStepBlocks;
    struct PKDebugDrawPacket { 
        struct vector<PKPoint, std::__1::allocator<PKPoint> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _linePoints; 
        struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _colors; 
    } drawPacket;
}

@property bool _doSleep;
@property(retain) NSMutableArray * _bodies;
@property(readonly) /* Warning: unhandled struct encoding: '{PKCAether={vector<PKCField *' */ struct * aether; /* unknown property attribute:  std::__1::allocator<PKCField *> >=^^{PKCField}}}} */
@property(readonly) struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct x8; void*x9; void*x10; void*x11; id x12; void*x13; unsigned char x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; unsigned char x29; void*x30; boolx31; void*x32; in double x33; long x34; void*x35; oneway void*x36; const short x37; int x38; out in void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; id x55; void*x56; unsigned char x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; id x103; void*x104; unsigned char x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; BOOL x120; out void*x121; void*x122; void*x123; void*x124; void*x125; long x126; void*x127; void*x128; BOOL x129; out void*x130; void*x131; int x132; long x133; void*x134; const short x135; void*x136; long x137; long x138; void x139; void*x140; void*x141; BOOL x142; long x143; void*x144; in void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; Class x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; unsigned char x183; void*x184; out void*x185; long x186; void*x187; out void*x188; const void*x189; void*x190; void*x191; struct x192; void*x193; void*x194; void*x195; short x196; void*x197; void*x198; void*x199; const void*x200; void*x201; void*x202; BOOL x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; struct x219; void*x220; void*x221; void*x222; int x223; void*x224; in void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; in void*x250; int x251; void*x252; out void*x253; in void*x254; void*x255; void*x256; oneway void*x257; void*x258; void*x259; long x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; struct x268; void*x269; void*x270; void*x271; short x272; void*x273; void*x274; void*x275; const void*x276; void*x277; void*x278; BOOL x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; boolx289; void*x290; void*x291; void*x292; struct x293; void*x294; void*x295; void*x296; void*x297; void*x298; in void*x299; short x300; void*x301; int x302; void*x303; void*x304; void*x305; in void*x306; void*x307; void*x308; double x309; void*x310; void*x311; void*x312; BOOL x313; void*x314; void*x315; void*x316; void*x317; void*x318; const void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; in void*x342; short x343; void*x344; int x345; void*x346; void*x347; void*x348; in void*x349; void*x350; void*x351; double x352; void*x353; void*x354; void*x355; BOOL x356; void*x357; void*x358; void*x359; void*x360; void*x361; const void*x362; void*x363; void*x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; in void*x385; short x386; void*x387; int x388; void*x389; void*x390; void*x391; in void*x392; void*x393; void*x394; double x395; void*x396; void*x397; void*x398; BOOL x399; void*x400; void*x401; void*x402; void*x403; void*x404; const void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; }* _world; /* unknown property attribute:  std::__1::allocator<QuadTree *> >=^^{QuadTree}}}}} */
@property struct b2Vec2 { float x1; float x2; } _gravity;
@property struct CGVector { double x1; double x2; } gravity;
@property double speed;
@property double velocityThreshold;
@property <PKPhysicsContactDelegate> * contactDelegate;

+ (id)world;

- (void)set_gravity:(struct b2Vec2 { float x1; float x2; })arg1;
- (void)set_doSleep:(bool)arg1;
- (void)set_bodies:(id)arg1;
- (const struct PKDebugDrawPacket { struct vector<PKPoint, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_1_1_1; struct { /* ? */ } *x_1_1_2; struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_3_2_1; } x_1_1_3; } x1; struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_2_1_1; struct { /* ? */ } *x_2_1_2; struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_3_2_1; } x_2_1_3; } x2; }*)debugDrawPacket;
- (void)debugDraw:(float)arg1 matrix:(union _GLKMatrix4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; float x_1_1_5; float x_1_1_6; float x_1_1_7; float x_1_1_8; float x_1_1_9; float x_1_1_10; float x_1_1_11; float x_1_1_12; float x_1_1_13; float x_1_1_14; float x_1_1_15; float x_1_1_16; } x1; float x2[16]; })arg2 showsPhysics:(bool)arg3 showsOutlineInterior:(bool)arg4 showsFields:(bool)arg5;
- (id)_bodies;
- (bool)_doSleep;
- (struct b2Vec2 { float x1; float x2; })_gravity;
- (id)fields;
- (struct CGVector { double x1; double x2; })evalForce:(unsigned int)arg1 point:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGVector { double x1; double x2; })sampleFields:(struct CGPoint { double x1; double x2; })arg1;
- (id)sampleFields:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 categories:(unsigned int)arg2 dataSize:(struct CGSize { double x1; double x2; })arg3;
- (void)removeField:(id)arg1;
- (void)addField:(id)arg1;
- (bool)hasFields;
- (bool)hasBodies;
- (double)velocityThreshold;
- (void)setVelocityThreshold:(double)arg1;
- (id)bodyAlongRayStart:(struct CGPoint { double x1; double x2; })arg1 end:(struct CGPoint { double x1; double x2; })arg2;
- (id)bodyInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)bodyAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct PKCAether { struct vector<PKCField *, std::__1::allocator<PKCField *> > { struct PKCField {} **x_1_1_1; struct PKCField {} **x_1_1_2; struct __compressed_pair<PKCField **, std::__1::allocator<PKCField *> > { struct PKCField {} **x_3_2_1; } x_1_1_3; } x1; }*)aether;
- (/* Warning: Unrecognized filer type: '3' using 'void*' */ void*)sampleFieldsAt:(/* Warning: Unrecognized filer type: '' using 'void*' */ void*)arg1;
     /* Encoded args for previous method: 32@0:816 */

- (void)removeJoint:(id)arg1;
- (void)removeAllFields;
- (void)removeAllBodies;
- (void)removeAllJoints;
- (void)setContactDelegate:(id)arg1;
- (void)setSpeed:(double)arg1;
- (void)setGravity:(struct CGVector { double x1; double x2; })arg1;
- (void)addJoint:(id)arg1;
- (void)addBody:(id)arg1;
- (void)__init__;
- (id)contactDelegate;
- (double)speed;
- (struct CGVector { double x1; double x2; })gravity;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint { double x1; double x2; })arg1 end:(struct CGPoint { double x1; double x2; })arg2 usingBlock:(id)arg3;
- (void)enumerateBodiesAtPoint:(struct CGPoint { double x1; double x2; })arg1 usingBlock:(id)arg2;
- (void)enumerateBodiesInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 usingBlock:(id)arg2;
- (void)_runBlockOutsideOfTimeStep:(id)arg1;
- (id)joints;
- (struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2BroadPhase { struct b2DynamicTree { int x_1_3_1; struct b2TreeNode {} *x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; unsigned int x_1_3_6; int x_1_3_7; } x_1_2_1; int x_1_2_2; int *x_1_2_3; int x_1_2_4; int x_1_2_5; struct b2Pair {} *x_1_2_6; int x_1_2_7; int x_1_2_8; int x_1_2_9; } x_3_1_1; struct b2Contact {} *x_3_1_2; int x_3_1_3; struct b2ContactFilter {} *x_3_1_4; struct b2ContactListener {} *x_3_1_5; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct PKCAether { struct vector<PKCField *, std::__1::allocator<PKCField *> > { struct PKCField {} **x_1_2_1; struct PKCField {} **x_1_2_2; struct __compressed_pair<PKCField **, std::__1::allocator<PKCField *> > { struct PKCField {} **x_3_3_1; } x_1_2_3; } x_8_1_1; } x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; double x17; float x18; struct PKCMechanics { struct b2World {} *x_19_1_1; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_2_2_1; struct QuadTree {} **x_2_2_2; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_3_3_1; } x_2_2_3; } x_19_1_2; } x19; }*)_world;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)bodies;
- (bool)stepWithTime:(double)arg1 velocityIterations:(unsigned long long)arg2 positionIterations:(unsigned long long)arg3;
- (id)collisionDelegate;
- (void)setCollisionDelegate:(id)arg1;
- (void)removeBody:(id)arg1;

@end

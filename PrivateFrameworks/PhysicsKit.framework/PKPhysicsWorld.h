/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PhysicsKit.framework/PhysicsKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSMutableArray, NSMutableDictionary, <PKPhysicsContactDelegate>;

@interface PKPhysicsWorld : NSObject <NSCoding> {
    struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2ContactListener {} *x_3_1_1; int x_3_1_2; struct b2DynamicTree { int x_3_2_1; struct b2TreeNode {} *x_3_2_2; int x_3_2_3; int x_3_2_4; int x_3_2_5; unsigned int x_3_2_6; int x_3_2_7; } x_3_1_3; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node<int, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > { struct __hash_node<int, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<int, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node<int, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::equal_to<int> > { float x_4_4_1; } x_1_3_4; } x_4_2_1; } x_3_1_4; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_4_1; } x_1_3_4; } x_5_2_1; } x_3_1_5; struct unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct __hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct unique_ptr<std::__1::__hash_node<b2Contact *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<b2Contact *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > > { struct __hash_node<b2Contact *, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> > > { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> { struct __hash_node<b2Contact *, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::hash<b2Contact *> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::equal_to<b2Contact *> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_3_1_6; int x_3_1_7; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct PKCAether {} *x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; double x17; float x18; struct PKCMechanics { struct b2World {} *x_19_1_1; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_2_2_1; struct QuadTree {} **x_2_2_2; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_3_3_1; } x_2_2_3; } x_19_1_2; } x19; } *_world;
    struct b2Vec2 { 
        float x; 
        float y; 
    } _gravity;
    bool_doSleep;
    double _accumulatedDt;
    struct PKContactListener { 
        int (**_vptr$b2ContactListener)(); 
        NSMutableDictionary *_contacts; 
        <PKPhysicsContactDelegate> *_contactDelegate; 
    } _contactListener;
    float _speed;
    NSMutableArray *_bodies;
    NSMutableArray *_joints;
    NSMutableArray *_postStepBlocks;
    struct PKDebugDrawPacket { 
        struct vector<PKPoint, std::__1::allocator<PKPoint> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _linePoints; 
        struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { 
            struct { /* ? */ } *__begin_; 
            struct { /* ? */ } *__end_; 
            struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { 
                struct { /* ? */ } *__first_; 
            } __end_cap_; 
        } _colors; 
    } drawPacket;
}

@property bool _doSleep;
@property(retain) NSMutableArray * _bodies;
@property(readonly) /* Warning: unhandled struct encoding: '{PKCAether={vector<std::__1::weak_ptr<PKCField>' */ struct * aether; /* unknown property attribute:  std::__1::allocator<std::__1::weak_ptr<PKCField> > >=^{weak_ptr<PKCField>}}}} */
@property(readonly) struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2ContactListener {} *x_3_1_1; int x_3_1_2; struct b2DynamicTree { int x_3_2_1; struct b2TreeNode {} *x_3_2_2; int x_3_2_3; int x_3_2_4; int x_3_2_5; unsigned int x_3_2_6; int x_3_2_7; } x_3_1_3; struct x_3_1_4; void*x_3_1_5; void*x_3_1_6; void*x_3_1_7; void*x_3_1_8; void*x_3_1_9; void*x_3_1_10; void*x_3_1_11; void*x_3_1_12; void*x_3_1_13; void*x_3_1_14; void*x_3_1_15; void*x_3_1_16; void*x_3_1_17; void*x_3_1_18; void*x_3_1_19; void*x_3_1_20; void*x_3_1_21; void*x_3_1_22; void*x_3_1_23; unsigned int x_3_1_24 : 2; void*x_3_1_25; out const long x_3_1_26; double x_3_1_27; void*x_3_1_28; struct b2StackAllocator { BOOL x_29_2_1[102400]; int x_29_2_2; int x_29_2_3; int x_29_2_4; struct b2StackEntry { char *x_5_3_1; int x_5_3_2; boolx_5_3_3; } x_29_2_5[32]; int x_29_2_6; } x_3_1_29; int x_3_1_30; struct b2ContactManager { struct b2ContactListener {} *x_31_2_1; int x_31_2_2; struct b2DynamicTree { int x_3_3_1; struct b2TreeNode {} *x_3_3_2; int x_3_3_3; int x_3_3_4; int x_3_3_5; unsigned int x_3_3_6; int x_3_3_7; } x_31_2_3; struct x_31_2_4; void*x_31_2_5; void*x_31_2_6; void*x_31_2_7; void*x_31_2_8; void*x_31_2_9; void*x_31_2_10; void*x_31_2_11; void*x_31_2_12; void*x_31_2_13; void*x_31_2_14; void*x_31_2_15; void*x_31_2_16; void*x_31_2_17; void*x_31_2_18; void*x_31_2_19; void*x_31_2_20; void*x_31_2_21; void*x_31_2_22; void*x_31_2_23; void*x_31_2_24; void*x_31_2_25; unsigned int x_31_2_26 : 2; unsigned short x_31_2_27; void*x_31_2_28; void*x_31_2_29; BOOL x_31_2_30; void*x_31_2_31; void*x_31_2_32; long x_31_2_33; long x_31_2_34; out BOOL x_31_2_35; void*x_31_2_36; void*x_31_2_37; out const void*x_31_2_38; BOOL x_31_2_39[102400]; int x_31_2_40; int x_31_2_41; int x_31_2_42; struct b2StackEntry { char *x_43_3_1; int x_43_3_2; boolx_43_3_3; } x_31_2_43[32]; int x_31_2_44; } x_3_1_31; int x_3_1_32; struct b2ContactManager { struct b2ContactListener {} *x_33_2_1; int x_33_2_2; struct b2DynamicTree { int x_3_3_1; struct b2TreeNode {} *x_3_3_2; int x_3_3_3; int x_3_3_4; int x_3_3_5; unsigned int x_3_3_6; int x_3_3_7; } x_33_2_3; struct x_33_2_4; void*x_33_2_5; void*x_33_2_6; void*x_33_2_7; void*x_33_2_8; void*x_33_2_9; void*x_33_2_10; void*x_33_2_11; void*x_33_2_12; void*x_33_2_13; void*x_33_2_14; void*x_33_2_15; void*x_33_2_16; void*x_33_2_17; void*x_33_2_18; void*x_33_2_19; void*x_33_2_20; void*x_33_2_21; void*x_33_2_22; void*x_33_2_23; void*x_33_2_24; void*x_33_2_25; void*x_33_2_26; void*x_33_2_27; void*x_33_2_28; void*x_33_2_29; void*x_33_2_30; void*x_33_2_31; void*x_33_2_32; void*x_33_2_33; void*x_33_2_34; unsigned int x_33_2_35 : 2; unsigned short x_33_2_36; void*x_33_2_37; void*x_33_2_38; BOOL x_33_2_39; void*x_33_2_40; void*x_33_2_41; long x_33_2_42; long x_33_2_43; out BOOL x_33_2_44; void*x_33_2_45; void*x_33_2_46; out const void*x_33_2_47; void*x_33_2_48; void*x_33_2_49; void*x_33_2_50; void*x_33_2_51; void*x_33_2_52; void*x_33_2_53; void*x_33_2_54; void*x_33_2_55; void*x_33_2_56; void*x_33_2_57; void*x_33_2_58; void*x_33_2_59; void*x_33_2_60; void*x_33_2_61; void*x_33_2_62; void*x_33_2_63; void*x_33_2_64; void*x_33_2_65; void*x_33_2_66; void*x_33_2_67; void*x_33_2_68; void*x_33_2_69; void*x_33_2_70; void*x_33_2_71; void*x_33_2_72; void*x_33_2_73; void*x_33_2_74; void*x_33_2_75; void*x_33_2_76; void*x_33_2_77; void*x_33_2_78; void*x_33_2_79; void*x_33_2_80; void*x_33_2_81; void*x_33_2_82; void*x_33_2_83; void*x_33_2_84; void*x_33_2_85; void*x_33_2_86; void*x_33_2_87; void*x_33_2_88; void*x_33_2_89; void*x_33_2_90; void*x_33_2_91; void*x_33_2_92; void*x_33_2_93; void*x_33_2_94; void*x_33_2_95; void*x_33_2_96; void*x_33_2_97; void*x_33_2_98; void*x_33_2_99; void*x_33_2_100; void*x_33_2_101; void*x_33_2_102; void*x_33_2_103; void*x_33_2_104; void*x_33_2_105; void*x_33_2_106; void*x_33_2_107; void*x_33_2_108; void*x_33_2_109; void*x_33_2_110; void*x_33_2_111; void*x_33_2_112; void*x_33_2_113; void*x_33_2_114; void*x_33_2_115; void*x_33_2_116; void*x_33_2_117; void*x_33_2_118; void*x_33_2_119; void*x_33_2_120; void*x_33_2_121; void*x_33_2_122; void*x_33_2_123; void*x_33_2_124; void*x_33_2_125; void*x_33_2_126; void*x_33_2_127; void*x_33_2_128; void*x_33_2_129; void*x_33_2_130; void*x_33_2_131; void*x_33_2_132; void*x_33_2_133; void*x_33_2_134; void*x_33_2_135; void*x_33_2_136; void*x_33_2_137; void*x_33_2_138; void*x_33_2_139; void*x_33_2_140; void*x_33_2_141; void*x_33_2_142; unsigned long long x_33_2_143; void*x_33_2_144; void*x_33_2_145; void*x_33_2_146; void*x_33_2_147; void*x_33_2_148; void*x_33_2_149; void*x_33_2_150; void*x_33_2_151; void*x_33_2_152; void*x_33_2_153; void*x_33_2_154; void*x_33_2_155; void*x_33_2_156; void*x_33_2_157; void*x_33_2_158; void* x_33_2_159[ /* ? */ ]; void*x_33_2_160; void*x_33_2_161; void*x_33_2_162; void*x_33_2_163; void*x_33_2_164; void*x_33_2_165; void*x_33_2_166; void*x_33_2_167; void*x_33_2_168; void*x_33_2_169; void*x_33_2_170; void*x_33_2_171; void*x_33_2_172; void*x_33_2_173; void*x_33_2_174; void*x_33_2_175; void*x_33_2_176; void*x_33_2_177; void*x_33_2_178; void*x_33_2_179; void*x_33_2_180; void*x_33_2_181; void*x_33_2_182; void*x_33_2_183; void*x_33_2_184; void*x_33_2_185; void*x_33_2_186; void*x_33_2_187; void*x_33_2_188; void*x_33_2_189; void*x_33_2_190; void*x_33_2_191; void*x_33_2_192; void*x_33_2_193; void*x_33_2_194; void**x_33_2_195; void*x_33_2_196; void*x_33_2_197; void*x_33_2_198; void*x_33_2_199; void*x_33_2_200; void*x_33_2_201; void*x_33_2_202; void*x_33_2_203; void*x_33_2_204; void*x_33_2_205; void*x_33_2_206; void*x_33_2_207; void*x_33_2_208; void*x_33_2_209; void*x_33_2_210; void*x_33_2_211; void*x_33_2_212; void*x_33_2_213; void*x_33_2_214; void*x_33_2_215; void*x_33_2_216; void*x_33_2_217; void*x_33_2_218; void*x_33_2_219; void*x_33_2_220; void*x_33_2_221; void*x_33_2_222; void*x_33_2_223; void*x_33_2_224; void*x_33_2_225; void*x_33_2_226; void*x_33_2_227; void*x_33_2_228; void*x_33_2_229; void*x_33_2_230; void*x_33_2_231; void*x_33_2_232; void*x_33_2_233; void*x_33_2_234; void*x_33_2_235; void*x_33_2_236; void*x_33_2_237; void*x_33_2_238; void*x_33_2_239; void*x_33_2_240; void*x_33_2_241; void*x_33_2_242; void*x_33_2_243; void*x_33_2_244; void*x_33_2_245; void*x_33_2_246; void*x_33_2_247; void*x_33_2_248; void*x_33_2_249; void*x_33_2_250; void*x_33_2_251; void*x_33_2_252; void*x_33_2_253; void*x_33_2_254; void*x_33_2_255; void*x_33_2_256; void*x_33_2_257; void**x_33_2_258; void*x_33_2_259; void*x_33_2_260; void*x_33_2_261; void*x_33_2_262; void*x_33_2_263; void*x_33_2_264; void*x_33_2_265; void*x_33_2_266; void*x_33_2_267; void*x_33_2_268; void*x_33_2_269; void*x_33_2_270; void*x_33_2_271; void*x_33_2_272; void*x_33_2_273; void*x_33_2_274; void*x_33_2_275; void*x_33_2_276; void*x_33_2_277; void*x_33_2_278; void*x_33_2_279; void*x_33_2_280; void*x_33_2_281; void*x_33_2_282; void*x_33_2_283; void*x_33_2_284; void*x_33_2_285; void*x_33_2_286; void*x_33_2_287; void*x_33_2_288; void*x_33_2_289; void*x_33_2_290; void*x_33_2_291; void*x_33_2_292; void*x_33_2_293; void*x_33_2_294; void*x_33_2_295; void*x_33_2_296; void*x_33_2_297; void*x_33_2_298; void*x_33_2_299; void*x_33_2_300; void*x_33_2_301; void*x_33_2_302; void*x_33_2_303; void*x_33_2_304; void*x_33_2_305; void*x_33_2_306; void*x_33_2_307; void*x_33_2_308; void*x_33_2_309; void*x_33_2_310; void*x_33_2_311; void*x_33_2_312; void*x_33_2_313; void*x_33_2_314; void*x_33_2_315; void*x_33_2_316; void*x_33_2_317; void*x_33_2_318; void*x_33_2_319; void*x_33_2_320; void*x_33_2_321; void*x_33_2_322; void*x_33_2_323; void*x_33_2_324; void*x_33_2_325; void*x_33_2_326; void*x_33_2_327; void*x_33_2_328; void*x_33_2_329; void*x_33_2_330; void*x_33_2_331; void*x_33_2_332; void*x_33_2_333; void*x_33_2_334; void*x_33_2_335; void*x_33_2_336; void*x_33_2_337; void*x_33_2_338; void*x_33_2_339; void*x_33_2_340; void*x_33_2_341; void*x_33_2_342; void*x_33_2_343; void*x_33_2_344; void*x_33_2_345; void*x_33_2_346; void*x_33_2_347; void*x_33_2_348; void*x_33_2_349; void*x_33_2_350; void*x_33_2_351; void*x_33_2_352; void*x_33_2_353; void*x_33_2_354; void*x_33_2_355; void*x_33_2_356; void*x_33_2_357; void*x_33_2_358; void*x_33_2_359; void*x_33_2_360; void*x_33_2_361; void*x_33_2_362; void*x_33_2_363; void*x_33_2_364; void*x_33_2_365; void*x_33_2_366; void*x_33_2_367; void*x_33_2_368; void*x_33_2_369; void*x_33_2_370; void*x_33_2_371; void*x_33_2_372; void*x_33_2_373; void*x_33_2_374; void*x_33_2_375; void*x_33_2_376; void*x_33_2_377; void*x_33_2_378; void*x_33_2_379; void*x_33_2_380; void*x_33_2_381; void*x_33_2_382; void*x_33_2_383; void*x_33_2_384; void*x_33_2_385; void*x_33_2_386; void*x_33_2_387; void*x_33_2_388; void*x_33_2_389; void*x_33_2_390; void*x_33_2_391; void*x_33_2_392; void* x_33_2_393[ /* ? */ ]; void*x_33_2_394; void*x_33_2_395; void*x_33_2_396; void*x_33_2_397; void*x_33_2_398; void*x_33_2_399; void*x_33_2_400; void*x_33_2_401; void*x_33_2_402; void*x_33_2_403; int x_33_2_404; void*x_33_2_405; in void*x_33_2_406; void*x_33_2_407; void*x_33_2_408; void*x_33_2_409; void*x_33_2_410; void*x_33_2_411; void*x_33_2_412; void*x_33_2_413; void*x_33_2_414; void*x_33_2_415; void*x_33_2_416; void*x_33_2_417; void*x_33_2_418; void*x_33_2_419; void*x_33_2_420; void*x_33_2_421; void*x_33_2_422; void*x_33_2_423; void*x_33_2_424; void*x_33_2_425; void*x_33_2_426; void*x_33_2_427; void*x_33_2_428; void*x_33_2_429; void*x_33_2_430; void*x_33_2_431; void*x_33_2_432; void*x_33_2_433; void*x_33_2_434; void*x_33_2_435; void*x_33_2_436; void*x_33_2_437; void*x_33_2_438; void*x_33_2_439; void*x_33_2_440; void*x_33_2_441; void*x_33_2_442; void*x_33_2_443; void*x_33_2_444; void*x_33_2_445; void*x_33_2_446; void*x_33_2_447; void*x_33_2_448; void*x_33_2_449; void*x_33_2_450; void*x_33_2_451; void*x_33_2_452; void*x_33_2_453; void*x_33_2_454; void*x_33_2_455; void*x_33_2_456; void*x_33_2_457; void*x_33_2_458; void*x_33_2_459; void*x_33_2_460; void*x_33_2_461; void*x_33_2_462; void*x_33_2_463; void*x_33_2_464; void*x_33_2_465; void*x_33_2_466; id x_33_2_467; void*x_33_2_468; void*x_33_2_469; void*x_33_2_470; void*x_33_2_471; void*x_33_2_472; void*x_33_2_473; void*x_33_2_474; void*x_33_2_475; void*x_33_2_476; void*x_33_2_477; void*x_33_2_478; void*x_33_2_479; void*x_33_2_480; void*x_33_2_481; void*x_33_2_482; void*x_33_2_483; void* x_33_2_484[ /* ? */ ]; void*x_33_2_485; void*x_33_2_486; void*x_33_2_487; void*x_33_2_488; void*x_33_2_489; void*x_33_2_490; void*x_33_2_491; void*x_33_2_492; void*x_33_2_493; void*x_33_2_494; void*x_33_2_495; void*x_33_2_496; void*x_33_2_497; void*x_33_2_498; void*x_33_2_499; void*x_33_2_500; void*x_33_2_501; void*x_33_2_502; void*x_33_2_503; void*x_33_2_504; void*x_33_2_505; void*x_33_2_506; void*x_33_2_507; void*x_33_2_508; void*x_33_2_509; void*x_33_2_510; void*x_33_2_511; void*x_33_2_512; void*x_33_2_513; void*x_33_2_514; void*x_33_2_515; void*x_33_2_516; void*x_33_2_517; void*x_33_2_518; void*x_33_2_519; void*x_33_2_520; void*x_33_2_521; void*x_33_2_522; void*x_33_2_523; void*x_33_2_524; void*x_33_2_525; void*x_33_2_526; void*x_33_2_527; void*x_33_2_528; void*x_33_2_529; void*x_33_2_530; void*x_33_2_531; void*x_33_2_532; void*x_33_2_533; void*x_33_2_534; void*x_33_2_535; void*x_33_2_536; void*x_33_2_537; void*x_33_2_538; void*x_33_2_539; void*x_33_2_540; void*x_33_2_541; void*x_33_2_542; void*x_33_2_543; void*x_33_2_544; void*x_33_2_545; void*x_33_2_546; void*x_33_2_547; void*x_33_2_548; void*x_33_2_549; void*x_33_2_550; void*x_33_2_551; void*x_33_2_552; void*x_33_2_553; void*x_33_2_554; void*x_33_2_555; void*x_33_2_556; void*x_33_2_557; void*x_33_2_558; void*x_33_2_559; void*x_33_2_560; void*x_33_2_561; void*x_33_2_562; void*x_33_2_563; void*x_33_2_564; void*x_33_2_565; void*x_33_2_566; void*x_33_2_567; void*x_33_2_568; void*x_33_2_569; void*x_33_2_570; void*x_33_2_571; void*x_33_2_572; void*x_33_2_573; void*x_33_2_574; void*x_33_2_575; void*x_33_2_576; void*x_33_2_577; void*x_33_2_578; void*x_33_2_579; void*x_33_2_580; void*x_33_2_581; void*x_33_2_582; void*x_33_2_583; void*x_33_2_584; void*x_33_2_585; void*x_33_2_586; void*x_33_2_587; void*x_33_2_588; void*x_33_2_589; void*x_33_2_590; void*x_33_2_591; void*x_33_2_592; void*x_33_2_593; void*x_33_2_594; void*x_33_2_595; void*x_33_2_596; void*x_33_2_597; void*x_33_2_598; void*x_33_2_599; void*x_33_2_600; void*x_33_2_601; void*x_33_2_602; void*x_33_2_603; void*x_33_2_604; void*x_33_2_605; void*x_33_2_606; void*x_33_2_607; void*x_33_2_608; void*x_33_2_609; void*x_33_2_610; void*x_33_2_611; void*x_33_2_612; void*x_33_2_613; void*x_33_2_614; void*x_33_2_615; void*x_33_2_616; void*x_33_2_617; void*x_33_2_618; void*x_33_2_619; void*x_33_2_620; void*x_33_2_621; void*x_33_2_622; void*x_33_2_623; void* x_33_2_624[ /* ? */ ]; void*x_33_2_625; void*x_33_2_626; void*x_33_2_627; void*x_33_2_628; void*x_33_2_629; void*x_33_2_630; void*x_33_2_631; void*x_33_2_632; void*x_33_2_633; void*x_33_2_634; void*x_33_2_635; void*x_33_2_636; void*x_33_2_637; void*x_33_2_638; void*x_33_2_639; void*x_33_2_640; void*x_33_2_641; void*x_33_2_642; void*x_33_2_643; void*x_33_2_644; void*x_33_2_645; void*x_33_2_646; void*x_33_2_647; void*x_33_2_648; void*x_33_2_649; void*x_33_2_650; void*x_33_2_651; unsigned int x_33_2_652 : 2; unsigned short x_33_2_653; void*x_33_2_654; void*x_33_2_655; BOOL x_33_2_656; void*x_33_2_657; void*x_33_2_658; in void*x_33_2_659; const void*x_33_2_660; void*x_33_2_661; void*x_33_2_662; void*x_33_2_663; void*x_33_2_664; void*x_33_2_665; void*x_33_2_666; void*x_33_2_667; void*x_33_2_668; void*x_33_2_669; void*x_33_2_670; void*x_33_2_671; void*x_33_2_672; void*x_33_2_673; void*x_33_2_674; void*x_33_2_675; void*x_33_2_676; void*x_33_2_677; void*x_33_2_678; void*x_33_2_679; void*x_33_2_680; void*x_33_2_681; void*x_33_2_682; void*x_33_2_683; void*x_33_2_684; void*x_33_2_685; void*x_33_2_686; void*x_33_2_687; void*x_33_2_688; void*x_33_2_689; void*x_33_2_690; void*x_33_2_691; void*x_33_2_692; void*x_33_2_693; void*x_33_2_694; void*x_33_2_695; void*x_33_2_696; void*x_33_2_697; void*x_33_2_698; void*x_33_2_699; void*x_33_2_700; void*x_33_2_701; void*x_33_2_702; void*x_33_2_703; void*x_33_2_704; void*x_33_2_705; void*x_33_2_706; void*x_33_2_707; void*x_33_2_708; void*x_33_2_709; void*x_33_2_710; void*x_33_2_711; void*x_33_2_712; void*x_33_2_713; struct  BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3;  {} x_33_2_714; void*x_33_2_715; void*x_33_2_716; void*x_33_2_717; void*x_33_2_718; void*x_33_2_719; void*x_33_2_720; void*x_33_2_721; void*x_33_2_722; void*x_33_2_723[32]; void*x_33_2_724; void*x_33_2_725; void*x_33_2_726; int x_33_2_727; void*x_33_2_728; in void*x_33_2_729; void*x_33_2_730; void*x_33_2_731; void*x_33_2_732; void*x_33_2_733; void*x_33_2_734; void*x_33_2_735; void*x_33_2_736; void*x_33_2_737; void*x_33_2_738; void*x_33_2_739; void*x_33_2_740; void*x_33_2_741; int x_33_2_742; void*x_33_2_743; in void*x_33_2_744; void*x_33_2_745; void*x_33_2_746; void*x_33_2_747; void*x_33_2_748; void*x_33_2_749; void*x_33_2_750; void*x_33_2_751; void*x_33_2_752; void*x_33_2_753; void*x_33_2_754; void*x_33_2_755; void*x_33_2_756; void*x_33_2_757; void*x_33_2_758; void*x_33_2_759; void*x_33_2_760; void*x_33_2_761; void*x_33_2_762; void*x_33_2_763; void*x_33_2_764; void*x_33_2_765; void*x_33_2_766; void*x_33_2_767; void*x_33_2_768; void*x_33_2_769; void*x_33_2_770; void*x_33_2_771; void*x_33_2_772; void*x_33_2_773; void*x_33_2_774; void*x_33_2_775; void*x_33_2_776; void*x_33_2_777; void*x_33_2_778; void*x_33_2_779; void*x_33_2_780; void*x_33_2_781; void*x_33_2_782; void*x_33_2_783; void*x_33_2_784; void*x_33_2_785; void*x_33_2_786; void*x_33_2_787; void*x_33_2_788; void*x_33_2_789; void*x_33_2_790; void*x_33_2_791; void*x_33_2_792; void*x_33_2_793; void*x_33_2_794; void*x_33_2_795; void*x_33_2_796; void*x_33_2_797; void*x_33_2_798; void*x_33_2_799; void*x_33_2_800; void*x_33_2_801; void*x_33_2_802; void*x_33_2_803; void*x_33_2_804; void*x_33_2_805; BOOL x_33_2_806; void*x_33_2_807; void*x_33_2_808; void*x_33_2_809; void*x_33_2_810; void*x_33_2_811; void*x_33_2_812; void*x_33_2_813; void*x_33_2_814; void*x_33_2_815; void*x_33_2_816; void*x_33_2_817; void*x_33_2_818; void*x_33_2_819; void*x_33_2_820; void*x_33_2_821; void*x_33_2_822; void*x_33_2_823; void*x_33_2_824; void*x_33_2_825; void*x_33_2_826; void*x_33_2_827; void*x_33_2_828; void*x_33_2_829; void*x_33_2_830; void*x_33_2_831; void*x_33_2_832; void*x_33_2_833; void*x_33_2_834; void*x_33_2_835; void*x_33_2_836; void*x_33_2_837; void*x_33_2_838; void*x_33_2_839; void*x_33_2_840; void*x_33_2_841; void*x_33_2_842; void*x_33_2_843; void*x_33_2_844; void*x_33_2_845; void*x_33_2_846; void*x_33_2_847; void*x_33_2_848; void*x_33_2_849; void*x_33_2_850; void*x_33_2_851; void*x_33_2_852; void*x_33_2_853; void*x_33_2_854; void*x_33_2_855; void*x_33_2_856; void*x_33_2_857; void*x_33_2_858; void*x_33_2_859; void*x_33_2_860; void*x_33_2_861; void*x_33_2_862; void*x_33_2_863; void*x_33_2_864; void*x_33_2_865; void*x_33_2_866; void*x_33_2_867; void*x_33_2_868; void*x_33_2_869; void*x_33_2_870; void*x_33_2_871; void*x_33_2_872; void*x_33_2_873; void*x_33_2_874; void*x_33_2_875; void*x_33_2_876; void*x_33_2_877; void*x_33_2_878; void*x_33_2_879; void*x_33_2_880; void*x_33_2_881; void*x_33_2_882; void*x_33_2_883; void*x_33_2_884; void*x_33_2_885; void*x_33_2_886; void*x_33_2_887; void*x_33_2_888; void*x_33_2_889; void*x_33_2_890; void*x_33_2_891; void*x_33_2_892; void*x_33_2_893; void*x_33_2_894; void*x_33_2_895; void*x_33_2_896; void*x_33_2_897; void*x_33_2_898; void*x_33_2_899; void*x_33_2_900; void*x_33_2_901; void*x_33_2_902; void*x_33_2_903; void*x_33_2_904; void*x_33_2_905; void*x_33_2_906; void*x_33_2_907; void*x_33_2_908; void*x_33_2_909; void*x_33_2_910; void*x_33_2_911; void*x_33_2_912; void*x_33_2_913; void*x_33_2_914; void*x_33_2_915; void*x_33_2_916; void*x_33_2_917; void*x_33_2_918; void*x_33_2_919; void*x_33_2_920; void*x_33_2_921; void*x_33_2_922; void*x_33_2_923; void*x_33_2_924; void*x_33_2_925; void*x_33_2_926; void*x_33_2_927; void*x_33_2_928; void*x_33_2_929; void*x_33_2_930; void*x_33_2_931; void*x_33_2_932; void*x_33_2_933; void*x_33_2_934; void*x_33_2_935; void*x_33_2_936; void*x_33_2_937; void*x_33_2_938; void*x_33_2_939; void*x_33_2_940; void*x_33_2_941; void*x_33_2_942; void*x_33_2_943; void*x_33_2_944; void*x_33_2_945; void*x_33_2_946; void*x_33_2_947; void*x_33_2_948; void*x_33_2_949; void*x_33_2_950; void*x_33_2_951; void*x_33_2_952; void*x_33_2_953; void*x_33_2_954; void*x_33_2_955; void*x_33_2_956; void*x_33_2_957; void*x_33_2_958; void*x_33_2_959; void*x_33_2_960; void*x_33_2_961; void*x_33_2_962; void*x_33_2_963; void*x_33_2_964; long long x_33_2_965; unsigned int x_33_2_966 : 2; unsigned short x_33_2_967; void*x_33_2_968; void*x_33_2_969; BOOL x_33_2_970; void*x_33_2_971; void*x_33_2_972; in void*x_33_2_973; const void*x_33_2_974; void*x_33_2_975; char *x_33_2_976; int x_33_2_977; boolx_33_2_978; } x_3_1_33; void*x_3_1_34; int x_3_1_35; } x3; int x4; struct b2ContactManager { struct b2ContactListener {} *x_5_1_1; int x_5_1_2; struct b2DynamicTree { int x_3_2_1; struct b2TreeNode {} *x_3_2_2; int x_3_2_3; int x_3_2_4; int x_3_2_5; unsigned int x_3_2_6; int x_3_2_7; } x_5_1_3; struct x_5_1_4; void*x_5_1_5; void*x_5_1_6; void*x_5_1_7; void*x_5_1_8; void*x_5_1_9; void*x_5_1_10; void*x_5_1_11; void*x_5_1_12; void*x_5_1_13; void*x_5_1_14; void*x_5_1_15; void*x_5_1_16; void*x_5_1_17; void*x_5_1_18; void*x_5_1_19; void*x_5_1_20; void*x_5_1_21; void*x_5_1_22; void*x_5_1_23; void*x_5_1_24; void*x_5_1_25; void*x_5_1_26; void*x_5_1_27; void*x_5_1_28; void*x_5_1_29; void*x_5_1_30; void*x_5_1_31; void*x_5_1_32; void*x_5_1_33; void*x_5_1_34; void*x_5_1_35; void*x_5_1_36; void*x_5_1_37; void*x_5_1_38; void*x_5_1_39; void*x_5_1_40; void*x_5_1_41; void*x_5_1_42; void*x_5_1_43; void*x_5_1_44; void*x_5_1_45; void*x_5_1_46; void*x_5_1_47; void*x_5_1_48; void*x_5_1_49; void*x_5_1_50; void*x_5_1_51; void*x_5_1_52; void*x_5_1_53; void*x_5_1_54; void*x_5_1_55; void*x_5_1_56; void*x_5_1_57; void*x_5_1_58; void*x_5_1_59; void*x_5_1_60; void*x_5_1_61; void*x_5_1_62; void*x_5_1_63; void*x_5_1_64; void*x_5_1_65; void*x_5_1_66; void*x_5_1_67; void*x_5_1_68; void*x_5_1_69; void*x_5_1_70; void*x_5_1_71; void*x_5_1_72; void*x_5_1_73; void*x_5_1_74; void*x_5_1_75; void*x_5_1_76; void*x_5_1_77; void*x_5_1_78; void*x_5_1_79; void*x_5_1_80; void*x_5_1_81; void*x_5_1_82; void*x_5_1_83; void*x_5_1_84; void*x_5_1_85; void*x_5_1_86; void*x_5_1_87; void*x_5_1_88; void*x_5_1_89; void*x_5_1_90; void*x_5_1_91; void*x_5_1_92; void*x_5_1_93; void*x_5_1_94; void*x_5_1_95; void*x_5_1_96; void*x_5_1_97; void*x_5_1_98; void*x_5_1_99; void*x_5_1_100; void*x_5_1_101; void*x_5_1_102; void*x_5_1_103; void*x_5_1_104; void*x_5_1_105; void*x_5_1_106; void*x_5_1_107; void*x_5_1_108; void*x_5_1_109; void*x_5_1_110; void*x_5_1_111; void*x_5_1_112; void*x_5_1_113; void*x_5_1_114; void*x_5_1_115; void* x_5_1_116[ /* ? */ ]; void*x_5_1_117; void*x_5_1_118; void*x_5_1_119; void*x_5_1_120; void*x_5_1_121; void*x_5_1_122; void*x_5_1_123; void*x_5_1_124; void*x_5_1_125; void*x_5_1_126; int x_5_1_127; void*x_5_1_128; in void*x_5_1_129; void*x_5_1_130; void*x_5_1_131; void*x_5_1_132; void*x_5_1_133; void*x_5_1_134; void*x_5_1_135; void*x_5_1_136; void*x_5_1_137; void*x_5_1_138; void*x_5_1_139; void*x_5_1_140; void*x_5_1_141; void*x_5_1_142; void*x_5_1_143; void*x_5_1_144; void*x_5_1_145; void*x_5_1_146; void*x_5_1_147; void*x_5_1_148; void*x_5_1_149; void*x_5_1_150; void*x_5_1_151; void*x_5_1_152; void*x_5_1_153; void*x_5_1_154; void*x_5_1_155; void*x_5_1_156; void*x_5_1_157; void*x_5_1_158; void*x_5_1_159; void*x_5_1_160; void*x_5_1_161; void*x_5_1_162; void*x_5_1_163; void*x_5_1_164; void*x_5_1_165; id x_5_1_166; void*x_5_1_167; void*x_5_1_168; void*x_5_1_169; void*x_5_1_170; void*x_5_1_171; void*x_5_1_172; void*x_5_1_173; void*x_5_1_174; void*x_5_1_175; void*x_5_1_176; void*x_5_1_177; void*x_5_1_178; void*x_5_1_179; void*x_5_1_180; void*x_5_1_181; void*x_5_1_182; void*x_5_1_183; void*x_5_1_184; void*x_5_1_185; void*x_5_1_186; void*x_5_1_187; void*x_5_1_188; void*x_5_1_189; void*x_5_1_190; void*x_5_1_191; void*x_5_1_192; void*x_5_1_193; void*x_5_1_194; void*x_5_1_195; void*x_5_1_196; void*x_5_1_197; void*x_5_1_198; void*x_5_1_199; void*x_5_1_200; void*x_5_1_201; void*x_5_1_202; void*x_5_1_203; void*x_5_1_204; void*x_5_1_205; void*x_5_1_206; void*x_5_1_207; void*x_5_1_208; void*x_5_1_209; void*x_5_1_210; void*x_5_1_211; void*x_5_1_212; void*x_5_1_213; void*x_5_1_214; void*x_5_1_215; void*x_5_1_216; void*x_5_1_217; void*x_5_1_218; void*x_5_1_219; void*x_5_1_220; void*x_5_1_221; void*x_5_1_222; void*x_5_1_223; struct  char *x_5_2_1; int x_5_2_2; boolx_5_2_3;  {} x_5_1_224; void*x_5_1_225; void*x_5_1_226; BOOL x_5_1_227; void*x_5_1_228; void*x_5_1_229; void*x_5_1_230; void*x_5_1_231; void*x_5_1_232; const void*x_5_1_233; void*x_5_1_234; void*x_5_1_235; char *x_5_1_236; void*x_5_1_237; void*x_5_1_238; void*x_5_1_239; void*x_5_1_240; void*x_5_1_241; void*x_5_1_242; void*x_5_1_243; void*x_5_1_244; void*x_5_1_245; void*x_5_1_246; void*x_5_1_247; void*x_5_1_248; void*x_5_1_249; void*x_5_1_250; void*x_5_1_251; void*x_5_1_252; void*x_5_1_253; void*x_5_1_254; void*x_5_1_255; int x_5_1_256; void*x_5_1_257; in void*x_5_1_258; void*x_5_1_259; void*x_5_1_260; void*x_5_1_261; void*x_5_1_262; void*x_5_1_263; void*x_5_1_264; void*x_5_1_265; void*x_5_1_266; void*x_5_1_267; void*x_5_1_268; void*x_5_1_269; void*x_5_1_270; void*x_5_1_271; void*x_5_1_272; void*x_5_1_273; void*x_5_1_274; void*x_5_1_275; void*x_5_1_276; void*x_5_1_277; void*x_5_1_278; void*x_5_1_279; void*x_5_1_280; unsigned int x_5_1_281/* : ? */; void*x_5_1_282; out void*x_5_1_283; out void*x_5_1_284; long x_5_1_285; void*x_5_1_286; void*x_5_1_287; void*x_5_1_288; void*x_5_1_289; void*x_5_1_290; void*x_5_1_291; void*x_5_1_292; void*x_5_1_293; void*x_5_1_294; void*x_5_1_295; void*x_5_1_296; void*x_5_1_297; void*x_5_1_298; void*x_5_1_299; void*x_5_1_300; void*x_5_1_301; void*x_5_1_302; void*x_5_1_303; void*x_5_1_304; void*x_5_1_305; void*x_5_1_306; void*x_5_1_307; void*x_5_1_308; void*x_5_1_309; void*x_5_1_310; void*x_5_1_311; void*x_5_1_312; void*x_5_1_313; void*x_5_1_314; void*x_5_1_315; void*x_5_1_316; void*x_5_1_317; void*x_5_1_318; void*x_5_1_319; void*x_5_1_320; void*x_5_1_321; void*x_5_1_322; void*x_5_1_323; void*x_5_1_324; void*x_5_1_325; void*x_5_1_326; void*x_5_1_327; void*x_5_1_328; void*x_5_1_329; void*x_5_1_330; void*x_5_1_331; void*x_5_1_332; void*x_5_1_333; void*x_5_1_334; void*x_5_1_335; void*x_5_1_336; void*x_5_1_337; void*x_5_1_338; void*x_5_1_339; void*x_5_1_340; void*x_5_1_341; void*x_5_1_342; void*x_5_1_343; void*x_5_1_344; void*x_5_1_345; void*x_5_1_346; void*x_5_1_347; void*x_5_1_348; void*x_5_1_349; void*x_5_1_350; unsigned int x_5_1_351/* : ? */; void*x_5_1_352; void*x_5_1_353; void*x_5_1_354; unsigned short x_5_1_355; void*x_5_1_356; void*x_5_1_357; void*x_5_1_358; void*x_5_1_359; void*x_5_1_360; BOOL x_5_1_361; void*x_5_1_362; void*x_5_1_363; void*x_5_1_364; void*x_5_1_365; void*x_5_1_366; in void*x_5_1_367; void*x_5_1_368; void*x_5_1_369; const void*x_5_1_370; void*x_5_1_371; void*x_5_1_372; void*x_5_1_373; void*x_5_1_374; struct x_5_1_375; void*x_5_1_376; void*x_5_1_377; void*x_5_1_378; BOOL x_5_1_379; void*x_5_1_380; void*x_5_1_381; void*x_5_1_382; void*x_5_1_383; void*x_5_1_384; const void*x_5_1_385; void*x_5_1_386; void*x_5_1_387; char *x_5_1_388; void*x_5_1_389; void*x_5_1_390; void*x_5_1_391; void*x_5_1_392; void*x_5_1_393; void*x_5_1_394; void*x_5_1_395; void*x_5_1_396; void*x_5_1_397; void*x_5_1_398; void*x_5_1_399; void*x_5_1_400; void*x_5_1_401; void*x_5_1_402; void*x_5_1_403; void*x_5_1_404; void*x_5_1_405; void*x_5_1_406; void*x_5_1_407; int x_5_1_408; void*x_5_1_409; in void*x_5_1_410; void*x_5_1_411; void*x_5_1_412; void*x_5_1_413; void*x_5_1_414; void*x_5_1_415; void*x_5_1_416; void*x_5_1_417; void*x_5_1_418; void*x_5_1_419; void*x_5_1_420; void*x_5_1_421; void*x_5_1_422; void*x_5_1_423; void*x_5_1_424; void*x_5_1_425; void*x_5_1_426; void*x_5_1_427; void*x_5_1_428; void*x_5_1_429; void*x_5_1_430; void*x_5_1_431; void*x_5_1_432; unsigned int x_5_1_433/* : ? */; void*x_5_1_434; out void*x_5_1_435; out void*x_5_1_436; long x_5_1_437; void*x_5_1_438; void*x_5_1_439; void*x_5_1_440; void*x_5_1_441; void*x_5_1_442; void*x_5_1_443; void*x_5_1_444; void*x_5_1_445; void*x_5_1_446; void*x_5_1_447; void*x_5_1_448; void*x_5_1_449; void*x_5_1_450; void*x_5_1_451; void*x_5_1_452; void*x_5_1_453; void*x_5_1_454; void*x_5_1_455; void*x_5_1_456; } x5; void*x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; unsigned int x46/* : ? */; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; double x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; SEL x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void* x118[ /* ? */ ]; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; short x129; void*x130; void*x131; void*x132; const void*x133; void*x134; void*x135; BOOL x136; void*x137; void*x138; void*x139; void*x140; void*x141; unsigned int x142/* : ? */; void*x143; void*x144; void*x145; unsigned short x146; void*x147; void*x148; void*x149; void*x150; void*x151; BOOL x152; void*x153; void*x154; void*x155; void*x156; void*x157; in void*x158; void*x159; void*x160; const void*x161; void*x162; void*x163; void*x164; void*x165; struct x166; void*x167; void*x168; void*x169; BOOL x170; void*x171; void*x172; void*x173; void*x174; void*x175; const void*x176; void*x177; void*x178; char *x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; int x199; void*x200; in void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; unsigned int x224/* : ? */; void*x225; out void*x226; out void*x227; long x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; }* _world; /* unknown property attribute:  std::__1::allocator<QuadTree *> >=^^{QuadTree}}}}} */
@property struct b2Vec2 { float x1; float x2; } _gravity;
@property struct CGVector { double x1; double x2; } gravity;
@property double speed;
@property double velocityThreshold;
@property <PKPhysicsContactDelegate> * contactDelegate;

+ (id)world;

- (void)set_gravity:(struct b2Vec2 { float x1; float x2; })arg1;
- (void)set_doSleep:(bool)arg1;
- (void)set_bodies:(id)arg1;
- (const struct PKDebugDrawPacket { struct vector<PKPoint, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_1_1_1; struct { /* ? */ } *x_1_1_2; struct __compressed_pair<PKPoint *, std::__1::allocator<PKPoint> > { struct { /* ? */ } *x_3_2_1; } x_1_1_3; } x1; struct vector<PKDebugDrawPacket::color4, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_2_1_1; struct { /* ? */ } *x_2_1_2; struct __compressed_pair<PKDebugDrawPacket::color4 *, std::__1::allocator<PKDebugDrawPacket::color4> > { struct { /* ? */ } *x_3_2_1; } x_2_1_3; } x2; }*)debugDrawPacket;
- (void)debugDraw:(float)arg1 matrix:(union _GLKMatrix4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; float x_1_1_5; float x_1_1_6; float x_1_1_7; float x_1_1_8; float x_1_1_9; float x_1_1_10; float x_1_1_11; float x_1_1_12; float x_1_1_13; float x_1_1_14; float x_1_1_15; float x_1_1_16; } x1; float x2[16]; })arg2 showsPhysics:(bool)arg3 showsOutlineInterior:(bool)arg4 showsFields:(bool)arg5;
- (id)_bodies;
- (bool)_doSleep;
- (struct b2Vec2 { float x1; float x2; })_gravity;
- (struct CGVector { double x1; double x2; })evalForce:(unsigned int)arg1 point:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGVector { double x1; double x2; })sampleFields:(struct CGPoint { double x1; double x2; })arg1;
- (id)sampleFields:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 categories:(unsigned int)arg2 dataSize:(struct CGSize { double x1; double x2; })arg3;
- (void)removeField:(id)arg1;
- (void)addField:(id)arg1;
- (bool)hasFields;
- (bool)hasBodies;
- (double)velocityThreshold;
- (void)setVelocityThreshold:(double)arg1;
- (id)bodyAlongRayStart:(struct CGPoint { double x1; double x2; })arg1 end:(struct CGPoint { double x1; double x2; })arg2;
- (id)bodyInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)bodyAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct PKCAether { struct vector<std::__1::weak_ptr<PKCField>, std::__1::allocator<std::__1::weak_ptr<PKCField> > > { struct weak_ptr<PKCField> {} *x_1_1_1; struct weak_ptr<PKCField> {} *x_1_1_2; struct __compressed_pair<std::__1::weak_ptr<PKCField> *, std::__1::allocator<std::__1::weak_ptr<PKCField> > > { struct weak_ptr<PKCField> {} *x_3_2_1; } x_1_1_3; } x1; }*)aether;
- (/* Warning: Unrecognized filer type: '3' using 'void*' */ void*)sampleFieldsAt:(/* Warning: Unrecognized filer type: '' using 'void*' */ void*)arg1;
     /* Encoded args for previous method: 32@0:816 */

- (void)removeJoint:(id)arg1;
- (void)removeAllFields;
- (void)removeAllBodies;
- (void)removeAllJoints;
- (void)setContactDelegate:(id)arg1;
- (void)setSpeed:(double)arg1;
- (void)setGravity:(struct CGVector { double x1; double x2; })arg1;
- (void)addJoint:(id)arg1;
- (void)addBody:(id)arg1;
- (void)__init__;
- (id)contactDelegate;
- (double)speed;
- (struct CGVector { double x1; double x2; })gravity;
- (void)enumerateBodiesAlongRayStart:(struct CGPoint { double x1; double x2; })arg1 end:(struct CGPoint { double x1; double x2; })arg2 usingBlock:(id)arg3;
- (void)enumerateBodiesAtPoint:(struct CGPoint { double x1; double x2; })arg1 usingBlock:(id)arg2;
- (void)enumerateBodiesInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 usingBlock:(id)arg2;
- (void)_runBlockOutsideOfTimeStep:(id)arg1;
- (id)joints;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copy;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)bodies;
- (bool)stepWithTime:(double)arg1 velocityIterations:(unsigned long long)arg2 positionIterations:(unsigned long long)arg3;
- (id)collisionDelegate;
- (void)setCollisionDelegate:(id)arg1;
- (void)removeBody:(id)arg1;
- (struct b2World { struct b2StackAllocator { BOOL x_1_1_1[102400]; int x_1_1_2; int x_1_1_3; int x_1_1_4; struct b2StackEntry { char *x_5_2_1; int x_5_2_2; boolx_5_2_3; } x_1_1_5[32]; int x_1_1_6; } x1; int x2; struct b2ContactManager { struct b2ContactListener {} *x_3_1_1; int x_3_1_2; struct b2DynamicTree { int x_3_2_1; struct b2TreeNode {} *x_3_2_2; int x_3_2_3; int x_3_2_4; int x_3_2_5; unsigned int x_3_2_6; int x_3_2_7; } x_3_1_3; struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct __hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> > { struct unique_ptr<std::__1::__hash_node<int, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > > { struct __hash_node<int, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<int, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<int, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, std::__1::allocator<std::__1::__hash_node<int, void *> > > { struct __hash_node_base<std::__1::__hash_node<int, void *> *> { struct __hash_node<int, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::hash<int> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::equal_to<int> > { float x_4_4_1; } x_1_3_4; } x_4_2_1; } x_3_1_4; struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > { struct unique_ptr<std::__1::__hash_node<unsigned long long, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<unsigned long long, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > > { struct __hash_node<unsigned long long, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > { struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> { struct __hash_node<unsigned long long, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::equal_to<unsigned long long> > { float x_4_4_1; } x_1_3_4; } x_5_2_1; } x_3_1_5; struct unordered_set<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct __hash_table<b2Contact *, std::__1::hash<b2Contact *>, std::__1::equal_to<b2Contact *>, std::__1::allocator<b2Contact *> > { struct unique_ptr<std::__1::__hash_node<b2Contact *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<b2Contact *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > > { struct __hash_node<b2Contact *, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<b2Contact *, void *> *>, std::__1::allocator<std::__1::__hash_node<b2Contact *, void *> > > { struct __hash_node_base<std::__1::__hash_node<b2Contact *, void *> *> { struct __hash_node<b2Contact *, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::hash<b2Contact *> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::equal_to<b2Contact *> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_3_1_6; int x_3_1_7; } x3; struct b2Body {} *x4; struct b2Joint {} *x5; int x6; int x7; struct PKCAether {} *x8; boolx9; struct b2DestructionListener {} *x10; struct b2Draw {} *x11; float x12; boolx13; boolx14; boolx15; boolx16; double x17; float x18; struct PKCMechanics { struct b2World {} *x_19_1_1; struct vector<QuadTree *, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_2_2_1; struct QuadTree {} **x_2_2_2; struct __compressed_pair<QuadTree **, std::__1::allocator<QuadTree *> > { struct QuadTree {} **x_3_3_1; } x_2_2_3; } x_19_1_2; } x19; }*)_world;

@end

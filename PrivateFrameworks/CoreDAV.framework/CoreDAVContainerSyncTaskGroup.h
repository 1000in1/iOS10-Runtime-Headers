/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/CoreDAV.framework/CoreDAV
 */

@class <CoreDAVLocalDBInfoProvider>, NSString, NSURL, NSArray, NSMutableDictionary, NSDictionary, NSMutableSet, NSMutableArray;

@interface CoreDAVContainerSyncTaskGroup : CoreDAVTaskGroup <CoreDAVDeleteTaskDelegate, CoreDAVPutTaskDelegate, CoreDAVGetTaskDelegate> {
    int _phase;
    NSURL *_folderURL;
    NSString *_previousCTag;
    NSString *_nextCTag;
    bool_ensureUpdatedCTag;
    bool_useSyncCollection;
    NSString *_previousSyncToken;
    NSString *_nextSyncToken;
    NSMutableArray *_actions;
    unsigned long long _multiGetBatchSize;
    NSMutableArray *_unsubmittedTasks;
    unsigned long long _maxIndependentTasks;
    NSURL *_addMemberURL;
    bool_useMultiGet;
    NSDictionary *_bulkRequests;
    NSString *_bulkChangeCheckCTag;
    NSMutableSet *_syncReportDeletedURLs;
    NSMutableDictionary *_urlToETag;
    Class _appSpecificDataItemClass;
    bool_syncItemOrder;
    NSMutableArray *_localItemURLOrder;
    NSMutableDictionary *_remainingUUIDsToAddActions;
    NSMutableDictionary *_remainingHREFsToModDeleteActions;
    bool_actionsOnly;
}

@property(readonly) NSURL * folderURL;
@property(retain) NSString * previousCTag;
@property(retain) NSString * previousSyncToken;
@property bool useSyncCollection;
@property unsigned long long multiGetBatchSize;
@property bool useMultiGet;
@property <CoreDAVLocalDBInfoProvider> * delegate;
@property unsigned long long maxIndependentTasks;
@property(retain) NSURL * addMemberURL;
@property(retain) NSDictionary * bulkRequests;
@property(retain) NSString * bulkChangeCheckCTag;
@property bool actionsOnly;
@property(readonly) NSArray * localItemURLOrder;
@property bool ensureUpdatedCTag;
@property(retain) NSString * nextCTag;


- (void)setUseMultiGet:(bool)arg1;
- (id)folderURL;
- (void)setActionsOnly:(bool)arg1;
- (bool)actionsOnly;
- (id)bulkChangeCheckCTag;
- (id)localItemURLOrder;
- (bool)useSyncCollection;
- (id)previousSyncToken;
- (void)setEnsureUpdatedCTag:(bool)arg1;
- (bool)ensureUpdatedCTag;
- (void)setPreviousCTag:(id)arg1;
- (id)previousCTag;
- (bool)useMultiGet;
- (void)setMaxIndependentTasks:(unsigned long long)arg1;
- (unsigned long long)maxIndependentTasks;
- (void)setMultiGetBatchSize:(unsigned long long)arg1;
- (unsigned long long)multiGetBatchSize;
- (void)syncAway;
- (id)initWithFolderURL:(id)arg1 previousCTag:(id)arg2 previousSyncToken:(id)arg3 actions:(id)arg4 syncItemOrder:(bool)arg5 context:(id)arg6 accountInfoProvider:(id)arg7 taskManager:(id)arg8;
- (void)getTask:(id)arg1 data:(id)arg2 error:(id)arg3;
- (void)putTask:(id)arg1 completedWithNewETag:(id)arg2 error:(id)arg3;
- (void)deleteTask:(id)arg1 completedWithError:(id)arg2;
- (bool)shouldFetchMoreETags;
- (void)setNextCTag:(id)arg1;
- (void)_bulkChangeTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_syncReportTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_postTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)setBulkChangeCheckCTag:(id)arg1;
- (id)nextCTag;
- (void)_getOrder;
- (void)receivedPropertiesToValues:(id)arg1 forURL:(id)arg2;
- (bool)shouldFetchResourceWithEtag:(id)arg1 propertiesToValues:(id)arg2;
- (void)setUseSyncCollection:(bool)arg1;
- (void)setPreviousSyncToken:(id)arg1;
- (void)applyAdditionalPropertiesFromPostTask:(id)arg1;
- (void)applyAdditionalPropertiesFromPutTask:(id)arg1;
- (bool)isWhitelistedError:(id)arg1;
- (void)_bulkChange;
- (id)copyGetTaskWithURL:(id)arg1;
- (void)deleteResourceURLs:(id)arg1;
- (bool)shouldDownloadResource:(id)arg1 localETag:(id)arg2 serverETag:(id)arg3;
- (void)_getTask:(id)arg1 finishedWithParsedContents:(id)arg2 deletedItems:(id)arg3 error:(id)arg4;
- (void)_configureMultiGet:(id)arg1;
- (id)copyMultiGetTaskWithURLs:(id)arg1;
- (void)_getDataPayloads;
- (id)copyGetEtagTaskWithPropertiesToFind:(id)arg1;
- (id)copyAdditionalResourcePropertiesToFetch;
- (void)_sendNextBatch;
- (void)_pushActions;
- (Class)bulkChangeTaskClass;
- (void)_getCTag;
- (id)copyPutTaskWithPayloadItem:(id)arg1 forAction:(id)arg2;
- (id)copyPostTaskWithPayloadItem:(id)arg1 forAction:(id)arg2;
- (id)dataContentType;
- (void)_getETags;
- (unsigned long long)_submitTasks;
- (void)cancelTaskGroup;
- (void)_tearDownAllUnsubmittedTasks;
- (void)startTaskGroup;
- (void)task:(id)arg1 didFinishWithError:(id)arg2;
- (void)propFindTask:(id)arg1 parsedResponses:(id)arg2 error:(id)arg3;
- (void)bailWithError:(id)arg1;
- (void)taskGroupWillCancelWithError:(id)arg1;
- (id)addMemberURL;
- (void)setBulkRequests:(id)arg1;
- (void)setAddMemberURL:(id)arg1;
- (id)bulkRequests;
- (void)dealloc;
- (id)description;

@end

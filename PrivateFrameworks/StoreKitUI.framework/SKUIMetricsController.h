/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/StoreKitUI.framework/StoreKitUI
 */

@class NSString, SKUIMetricsImpressionSession, NSObject<OS_dispatch_source>, SSMetricsController, NSNumber, SSMetricsConfiguration;

@interface SKUIMetricsController : NSObject  {
    NSNumber *_accountID;
    SKUIMetricsImpressionSession *_activeImpressionsSession;
    NSString *_applicationIdentifier;
    SSMetricsController *_controller;
    bool_flushesImmediately;
    SSMetricsConfiguration *_globalConfiguration;
    NSString *_hostApplicationIdentifier;
    bool_impressionsEnabled;
    NSObject<OS_dispatch_source> *_impressionsTimer;
    bool_loggingEnabled;
    SSMetricsConfiguration *_pageConfiguration;
    NSString *_pageContext;
    NSString *_pageURL;
    NSString *_topic;
    NSString *_userAgent;
    NSString *_windowOrientation;
}

@property(readonly) SKUIMetricsImpressionSession * activeImpressionsSession;
@property(readonly) double flushInterval;
@property(readonly) SSMetricsConfiguration * globalConfiguration;
@property(retain) SSMetricsConfiguration * pageConfiguration;
@property(copy) NSNumber * accountIdentifier;
@property(copy) NSString * applicationIdentifier;
@property(copy) NSString * hostApplicationIdentifier;
@property(copy) NSString * pageContext;
@property(copy) NSString * pageURL;
@property(copy) NSString * topic;
@property(copy) NSString * userAgent;
@property(copy) NSString * windowOrientation;

+ (void)flushImmediately;

- (id)pageConfiguration;
- (id)globalConfiguration;
- (void)_waitUntilRecordingComplete;
- (void)recordBuyConfirmedEventsForItems:(id)arg1 purchaseResponses:(id)arg2;
- (void)pingURLs:(id)arg1;
- (id)performActionForItem:(id)arg1 offer:(id)arg2 clientContext:(id)arg3;
- (double)flushInterval;
- (void)setHostApplicationIdentifier:(id)arg1;
- (void)_insertEvent:(id)arg1;
- (void)_recordActiveImpressions;
- (void)closeImpressionsSession;
- (id)performActionForItem:(id)arg1;
- (void)flushImmediately;
- (id)clickEventWithItem:(id)arg1 locationPosition:(long long)arg2;
- (bool)canRecordEventWithType:(id)arg1;
- (id)performActionForItem:(id)arg1 clientContext:(id)arg2;
- (id)locationWithPageComponent:(id)arg1;
- (id)locationWithPosition:(long long)arg1 type:(id)arg2 fieldData:(id)arg3;
- (id)itemOfferClickEventWithItem:(id)arg1 locationPosition:(long long)arg2;
- (void)pingURLs:(id)arg1 withClientContext:(id)arg2;
- (void)setWindowOrientation:(id)arg1;
- (void)recordEvent:(id)arg1;
- (id)activeImpressionsSession;
- (id)performActionForItem:(id)arg1 offer:(id)arg2 clientContext:(id)arg3 completionBlock:(id)arg4;
- (id)pageContext;
- (void)setPageContext:(id)arg1;
- (void)setPageConfiguration:(id)arg1;
- (id)windowOrientation;
- (id)hostApplicationIdentifier;
- (void)setApplicationIdentifier:(id)arg1;
- (id)initWithGlobalConfiguration:(id)arg1;
- (id)tokenStringWithElements:(id)arg1;
- (id)compoundStringWithElements:(id)arg1;
- (id)userAgent;
- (id)topic;
- (void)setTopic:(id)arg1;
- (void)setUserAgent:(id)arg1;
- (void)setAccountIdentifier:(id)arg1;
- (id)accountIdentifier;
- (id)applicationIdentifier;
- (void)dealloc;
- (void).cxx_destruct;
- (id)pageURL;
- (void)setPageURL:(id)arg1;

@end

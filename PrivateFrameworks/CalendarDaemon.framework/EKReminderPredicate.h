/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CalendarDaemon.framework/CalendarDaemon
 */

@interface EKReminderPredicate : EKPredicate <EKDefaultPropertiesLoading> {
    bool  _completed;
    NSSet * _defaultPropertiesToLoad;
    NSDate * _dueAfter;
    NSDate * _dueBefore;
    bool  _limitToCompletedOrIncomplete;
    NSString * _listTitle;
    unsigned long long  _maxResults;
    NSString * _searchTerm;
    bool  _shouldLoadDefaultProperties;
    int  _sortOrder;
    bool  _useCompletionDateAsAlternate;
    bool  _useDueDateAsCompletionDate;
}

@property (nonatomic) bool completed;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSSet *defaultPropertiesToLoad;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSDate *dueAfter;
@property (nonatomic, retain) NSDate *dueBefore;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool limitToCompletedOrIncomplete;
@property (nonatomic, retain) NSString *listTitle;
@property (nonatomic) unsigned long long maxResults;
@property (nonatomic, retain) NSString *searchTerm;
@property (nonatomic) bool shouldLoadDefaultProperties;
@property (nonatomic) int sortOrder;
@property (readonly) Class superclass;
@property (nonatomic) bool useCompletionDateAsAlternate;
@property (nonatomic) bool useDueDateAsCompletionDate;

+ (id)predicateWithCalendars:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (bool)completed;
- (id)copyMatchingItemsWithDatabase:(struct CalDatabase { struct __CFRuntimeBase { unsigned long long x_1_1_1; unsigned char x_1_1_2[4]; unsigned int x_1_1_3; } x1; int x2; struct CPRecordStore {} *x3; struct CalEventOccurrenceCache {} *x4; struct CalScheduledTaskCache {} *x5; struct __CFDictionary {} *x6; struct __CFDictionary {} *x7; struct _opaque_pthread_mutex_t { long long x_8_1_1; BOOL x_8_1_2[56]; } x8; unsigned int x9; unsigned int x10; struct __CFArray {} *x11; struct __CFString {} *x12; struct __CFArray {} *x13; int x14; int x15; struct __CFString {} *x16; struct __CFString {} *x17; int x18; id /* block */ x19; struct _opaque_pthread_mutex_t { long long x_20_1_1; BOOL x_20_1_2[56]; } x20; bool x21; struct __CFArray {} *x22; struct __CFArray {} *x23; bool x24; id x25; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; out void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; int x56; double x57; void*x58; unsigned char x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; }*)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)defaultPropertiesToLoad;
- (id)dueAfter;
- (id)dueBefore;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCalendars:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)limitToCompletedOrIncomplete;
- (id)listTitle;
- (unsigned long long)maxResults;
- (id)searchTerm;
- (void)setCompleted:(bool)arg1;
- (void)setDefaultPropertiesToLoad:(id)arg1;
- (void)setDueAfter:(id)arg1;
- (void)setDueBefore:(id)arg1;
- (void)setLimitToCompletedOrIncomplete:(bool)arg1;
- (void)setListTitle:(id)arg1;
- (void)setMaxResults:(unsigned long long)arg1;
- (void)setSearchTerm:(id)arg1;
- (void)setShouldLoadDefaultProperties:(bool)arg1;
- (void)setSortOrder:(int)arg1;
- (void)setUseCompletionDateAsAlternate:(bool)arg1;
- (void)setUseDueDateAsCompletionDate:(bool)arg1;
- (bool)shouldLoadDefaultProperties;
- (int)sortOrder;
- (bool)useCompletionDateAsAlternate;
- (bool)useDueDateAsCompletionDate;

@end

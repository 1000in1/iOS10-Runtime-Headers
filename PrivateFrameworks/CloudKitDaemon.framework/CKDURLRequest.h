/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSDictionary, NSFileHandle, NSURLRequest, <CKDAccountInfoProvider>, NSMutableArray, NSString, NSError, NSArray, NSMutableDictionary, NSInputStream, CKDProtobufStreamWriter, NSData, NSOperationQueue, NSRunLoop, NSURLSessionDataTask, NSHTTPURLResponse, <CKDResponseBodyParser>, NSURLSessionConfiguration, NSDate, CKDProtocolTranslator, NSURL, CKDClientContext;

@interface CKDURLRequest : NSObject <CKDURLSessionTaskDelegate, CKDProtobufMessageSigningDelegate, CKDFlowControllable> {
    <CKDAccountInfoProvider> *_accountInfoProvider;
    double _timeoutInterval;
    long long _responseStatusCode;
    NSDate *_dateRequestWentOut;
    NSRunLoop *_runLoopToFireOn;
    NSString *_requestUUID;
    bool_didSendRequest;
    bool_didFinishLoading;
    bool_finished;
    bool_didRetryAuth;
    bool_didRetrySignature;
    <CKDResponseBodyParser> *_responseBodyParser;
    bool_allowAutomaticRedirects;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _requestProgressBlock;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _responseProgressBlock;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _completionBlock;

    unsigned long long _numDownloadedElements;
    NSMutableDictionary *_overriddenHeaders;
    NSMutableArray *_redirectHistory;
    NSData *_fakeResponseData;
    bool_haveParsedFakeResponseData;
    CKDProtobufStreamWriter *_streamWriter;
    bool_usesBackgroundSession;
    bool_allowsCellularAccess;
    bool_haveCachedServerType;
    bool_haveCachedPartitionType;
    NSDictionary *_requestProperties;
    CKDClientContext *_context;
    long long _databaseScope;
    CKDProtocolTranslator *_translator;
    NSString *_sourceApplicationBundleIdentifier;
    NSString *_sourceApplicationSecondaryIdentifier;
    NSString *__testUnderscoreProperty;
    NSArray *_requestOperations;
    NSString *_flowControlKey;
    NSString *_hardwareIDOverride;
    NSError *_error;
    NSURLSessionConfiguration *_sessionConfiguration;
    NSURLSessionDataTask *_urlSessionTask;
    NSURLRequest *_request;
    NSHTTPURLResponse *_response;
    NSOperationQueue *_delegateQueue;
    NSFileHandle *_responseFileHandle;
    NSFileHandle *_requestFileHandle;
    NSString *_responseLogFilePath;
    NSString *_requestLogFilePath;
    NSString *_deviceID;
    long long _cachedServerType;
    long long _cachedPartitionType;
}

@property(retain) <CKDAccountInfoProvider> * accountInfoProvider;
@property double timeoutInterval;
@property(retain) CKDClientContext * context;
@property long long databaseScope;
@property(retain) CKDProtocolTranslator * translator;
@property bool allowAutomaticRedirects;
@property(retain) NSDictionary * requestProperties;
@property bool usesBackgroundSession;
@property bool allowsCellularAccess;
@property(retain) NSString * sourceApplicationBundleIdentifier;
@property(retain) NSString * sourceApplicationSecondaryIdentifier;
@property(readonly) CKDProtobufStreamWriter * streamWriter;
@property(copy) id requestProgressBlock;
@property(copy) id responseProgressBlock;
@property(copy) id completionBlock;
@property(retain) NSString * _testUnderscoreProperty;
@property(retain) <CKDResponseBodyParser> * responseBodyParser;
@property(readonly) NSString * httpMethod;
@property(readonly) NSDictionary * additionalHeaderValues;
@property(readonly) bool hasRequestBody;
@property(readonly) NSInputStream * requestBodyStream;
@property(readonly) NSArray * requestOperations;
@property(readonly) NSArray * requestOperationClasses;
@property(readonly) int isolationLevel;
@property(readonly) int operationType;
@property(readonly) NSString * path;
@property(readonly) long long serverType;
@property(readonly) long long partitionType;
@property(readonly) NSURL * url;
@property(readonly) bool shouldCompressBody;
@property(readonly) NSString * acceptContentType;
@property(readonly) NSString * requestContentType;
@property(readonly) NSString * protobufOperationName;
@property(retain) NSString * flowControlKey;
@property(readonly) NSString * sectionID;
@property(retain) NSString * hardwareIDOverride;
@property(readonly) bool isFinished;
@property(retain) NSError * error;
@property(readonly) NSDictionary * responseHeaders;
@property(readonly) long long responseStatusCode;
@property(readonly) NSURL * lastRedirectURL;
@property(readonly) NSString * requestUUID;
@property(retain) NSURLSessionConfiguration * sessionConfiguration;
@property(retain) NSURLSessionDataTask * urlSessionTask;
@property(retain) NSURLRequest * request;
@property(retain) NSHTTPURLResponse * response;
@property(retain) NSOperationQueue * delegateQueue;
@property unsigned long long numDownloadedElements;
@property(retain) NSFileHandle * responseFileHandle;
@property(retain) NSFileHandle * requestFileHandle;
@property(retain) NSString * responseLogFilePath;
@property(retain) NSString * requestLogFilePath;
@property(copy) NSString * deviceID;
@property bool haveCachedServerType;
@property long long cachedServerType;
@property bool haveCachedPartitionType;
@property long long cachedPartitionType;

+ (id)_sharedCookieStorage;
+ (id)_logQueue;

- (void)setCachedPartitionType:(long long)arg1;
- (long long)cachedPartitionType;
- (void)setHaveCachedPartitionType:(bool)arg1;
- (bool)haveCachedPartitionType;
- (void)setCachedServerType:(long long)arg1;
- (long long)cachedServerType;
- (void)setHaveCachedServerType:(bool)arg1;
- (bool)haveCachedServerType;
- (id)requestFileHandle;
- (id)responseFileHandle;
- (void)setNumDownloadedElements:(unsigned long long)arg1;
- (void)set_testUnderscoreProperty:(id)arg1;
- (id)_testUnderscoreProperty;
- (id)translator;
- (bool)expectsSingleObject;
- (id)signatureMessageForMessageData:(id)arg1 error:(id*)arg2;
- (void)URLSessionTask:(id)arg1 conditionalRequirementsChanged:(bool)arg2;
- (void)URLSessionTaskIsWaitingForConnection:(id)arg1;
- (id)URLSessionTask:(id)arg1 requestForEstablishedConnection:(id)arg2;
- (void)URLSessionDataTask:(id)arg1 didReceiveData:(id)arg2;
- (void)URLSessionDataTask:(id)arg1 didReceiveResponse:(id)arg2 completionHandler:(id)arg3;
- (void)URLSessionTask:(id)arg1 didCompleteWithError:(id)arg2;
- (void)URLSessionTask:(id)arg1 didSendBodyData:(long long)arg2 totalBytesSent:(long long)arg3 totalBytesExpectedToSend:(long long)arg4;
- (void)URLSessionTask:(id)arg1 needNewBodyStream:(id)arg2;
- (void)URLSessionTask:(id)arg1 willPerformHTTPRedirection:(id)arg2 newRequest:(id)arg3 completionHandler:(id)arg4;
- (id)operationRequestWithType:(int)arg1;
- (id)_errorFromHTTPResponse:(id)arg1;
- (id)defaultParserForContentType:(id)arg1;
- (void)_logHTTPResponse:(id)arg1;
- (void)_flushRequestResponseLogs;
- (void)setSessionConfiguration:(id)arg1;
- (void)setUrlSessionTask:(id)arg1;
- (void)_populateURLSessionConfiguration;
- (void)_loadRequest:(id)arg1;
- (id)_versionHeader;
- (id)acceptContentType;
- (id)requestContentType;
- (bool)hasRequestBody;
- (void)_performRequest;
- (bool)requiresTokenRegistration;
- (void)_registerPushTokens;
- (bool)requiresDeviceID;
- (void)_fetchDeviceID;
- (void)setTranslator:(id)arg1;
- (bool)allowsAuthedAccount;
- (void)_fetchContainerScopedUserID;
- (void)_setupMescal;
- (bool)requiresConfiguration;
- (void)_setupConfiguration;
- (bool)requiresAppPartitionURL;
- (void)_setupPublicDatabaseURL;
- (bool)allowsAnonymousAccount;
- (bool)requiresSignature;
- (bool)shouldCompressBody;
- (id)protobufOperationName;
- (long long)partitionType;
- (long long)serverType;
- (id)requestOperationClasses;
- (void)requestDidParsePlistObject:(id)arg1;
- (long long)_handlePlistResult:(id)arg1;
- (void)requestDidParseJSONObject:(id)arg1;
- (long long)_handleServerJSONResult:(id)arg1;
- (void)requestDidParseNodeFailure:(id)arg1;
- (id)requestDidParseProtobufObject:(id)arg1;
- (long long)_handleServerProtobufResult:(id)arg1;
- (void)_logParsedObject:(id)arg1;
- (Class)expectedResponseClass;
- (id)streamWriter;
- (int)isolationLevel;
- (id)hardwareIDOverride;
- (bool)includeContainerInfo;
- (id)requestOperations;
- (void)setResponseFileHandle:(id)arg1;
- (void)setRequestFileHandle:(id)arg1;
- (id)responseLogFilePath;
- (id)requestLogFilePath;
- (id)_responseFileHandle;
- (id)_requestFileHandle;
- (void)setRequestLogFilePath:(id)arg1;
- (void)setResponseLogFilePath:(id)arg1;
- (void)_makeTrafficFileHandleWithPrefix:(id)arg1 outPath:(id*)arg2 outHandle:(id*)arg3;
- (id)sessionConfiguration;
- (id)urlSessionTask;
- (id)requestUUID;
- (void)setFlowControlKey:(id)arg1;
- (void)setHardwareIDOverride:(id)arg1;
- (void)inheritParentSectionID:(id)arg1;
- (id)flowControlKey;
- (void)performRequest;
- (void)finishRequestWithError:(id)arg1;
- (bool)usesBackgroundSession;
- (void)setUsesBackgroundSession:(bool)arg1;
- (void)overrideRequestHeader:(id)arg1 withValue:(id)arg2;
- (unsigned long long)numDownloadedElements;
- (void)_handleBadPasswordResponse;
- (bool)allowAutomaticRedirects;
- (bool)shouldLogResponseBody;
- (id)responseProgressBlock;
- (id)requestProgressBlock;
- (void)setResponseProgressBlock:(id)arg1;
- (void)setRequestProgressBlock:(id)arg1;
- (void)reportStatusWithError:(id)arg1;
- (bool)validate:(id*)arg1;
- (void)setResponseBodyParser:(id)arg1;
- (void)tearDownResources;
- (id)requestBodyStream;
- (id)lastRedirectURL;
- (id)responseHeaders;
- (void)setAllowAutomaticRedirects:(bool)arg1;
- (long long)responseStatusCode;
- (id)additionalHeaderValues;
- (id)httpMethod;
- (id)responseBodyParser;
- (id)accountInfoProvider;
- (void)setAccountInfoProvider:(id)arg1;
- (long long)databaseScope;
- (void)setDatabaseScope:(long long)arg1;
- (id)sourceApplicationSecondaryIdentifier;
- (id)sectionID;
- (void)setSourceApplicationSecondaryIdentifier:(id)arg1;
- (id)ckShortDescription;
- (id)CKPropertiesDescription;
- (void)setRequestProperties:(id)arg1;
- (void)_logRequest:(id)arg1;
- (id)requestProperties;
- (void)setDeviceID:(id)arg1;
- (id)deviceID;
- (void)setRequest:(id)arg1;
- (bool)markAsFinished;
- (id)context;
- (void)setContext:(id)arg1;
- (id)url;
- (int)operationType;
- (id)init;
- (id)sourceApplicationBundleIdentifier;
- (void)setSourceApplicationBundleIdentifier:(id)arg1;
- (void)setAllowsCellularAccess:(bool)arg1;
- (void)setTimeoutInterval:(double)arg1;
- (bool)allowsCellularAccess;
- (double)timeoutInterval;
- (unsigned long long)cachePolicy;
- (void)setDelegateQueue:(id)arg1;
- (id)delegateQueue;
- (id)request;
- (id)path;
- (void)setResponse:(id)arg1;
- (void)setError:(id)arg1;
- (id)error;
- (id)response;
- (void)dealloc;
- (void).cxx_destruct;
- (id)description;
- (void)setCompletionBlock:(id)arg1;
- (id)completionBlock;
- (bool)isFinished;

@end

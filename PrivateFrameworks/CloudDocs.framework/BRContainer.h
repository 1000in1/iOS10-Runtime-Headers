/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs
 */

@class NSData, NSString, NSURL, NSDate, NSSet, NSMutableDictionary, NSMultiReadUniWriteLock;

@interface BRContainer : NSObject <NSSecureCoding> {
    NSString *_identifier;
    NSMutableDictionary *_propertiesByBundleID;
    NSMultiReadUniWriteLock *_readWriteLock;
    long long _lastServerUpdateOnceToken;
    NSDate *_lastServerUpdate;
    long long _currentStatusOnceToken;
    unsigned int _currentStatus;
    bool_isOverQuota;
    bool_isCloudSyncTCCDisabled;
}

@property(readonly) NSData * propertiesData;
@property unsigned int currentStatus;
@property(retain) NSDate * lastServerUpdate;
@property(getter=isOverQuota) bool overQuota;
@property(copy,readonly) NSSet * bundleIdentifiers;
@property(readonly) NSString * identifier;
@property(readonly) NSString * localizedName;
@property(readonly) bool isDocumentScopePublic;
@property(readonly) NSString * supportedFolderLevels;
@property(readonly) NSURL * documentsURL;
@property(readonly) NSSet * documentsTypes;
@property(readonly) NSSet * exportedTypes;
@property(readonly) NSSet * importedTypes;
@property(retain,readonly) NSDate * lastServerUpdate;
@property(readonly) unsigned int currentStatus;
@property(getter=isOverQuota,readonly) bool overQuota;
@property bool isCloudSyncTCCDisabled;

+ (id)containerForContainerID:(id)arg1;
+ (void)postContainerStatusChangeNotificationWithID:(id)arg1 key:(id)arg2 value:(id)arg3;
+ (bool)validateContainerID:(id)arg1;
+ (id)propertiesForContainerID:(id)arg1 usingBundle:(id)arg2 minimumBundleVersion:(id)arg3 bundleIcons:(id*)arg4;
+ (void)postContainerListUpdateNotification;
+ (void)_generateiOSIconsIntoDict:(id)arg1 usingBundle:(id)arg2;
+ (id)containerForItemAtURL:(id)arg1 error:(id*)arg2;
+ (id)containerInRepositoryURL:(id)arg1 error:(id*)arg2;
+ (id)containerInRepositoryURL:(id)arg1 createIfMissing:(bool)arg2 error:(id*)arg3;
+ (id)readMetadataForContainerID:(id)arg1 fromPlistAtPath:(id)arg2 createIfMissing:(bool)arg3 error:(id*)arg4;
+ (id)containersRepositoryURL;
+ (id)allContainers;
+ (id)unmangleContainerID:(id)arg1;
+ (id)classesForDecoding;
+ (bool)versionOfBundle:(id)arg1 changedFromVersion:(id)arg2;
+ (id)mangleContainerID:(id)arg1;
+ (bool)supportsSecureCoding;
+ (id)allContainersByContainerID;
+ (id)documentContainers;

- (void)setIsCloudSyncTCCDisabled:(bool)arg1;
- (id)versionNumberForBundleIdentifier:(id)arg1;
- (bool)setProperties:(id)arg1 stagedBundleIconPaths:(id)arg2 forBundleIdentifier:(id)arg3 salt:(id)arg4;
- (bool)hasMetadataForBundleID:(id)arg1;
- (id)iconURLs;
- (bool)hasIconWithName:(id)arg1;
- (bool)setPropertiesData:(id)arg1 stagedBundleIconPaths:(id)arg2 salt:(id)arg3 refresh:(bool)arg4;
- (id)propertiesData;
- (bool)isCloudSyncTCCDisabled;
- (bool)isOverQuota;
- (void)setCurrentStatus:(unsigned int)arg1;
- (unsigned int)currentStatus;
- (void)setLastServerUpdate:(id)arg1;
- (id)lastServerUpdate;
- (id)importedTypes;
- (id)exportedTypes;
- (id)supportedFolderLevels;
- (id)initWithContainerID:(id)arg1 propertiesByBundleID:(id)arg2;
- (id)enumeratorOfBundleProperty:(id)arg1 valuesOfClass:(Class)arg2;
- (bool)isDocumentScopePublic;
- (id)mangledID;
- (id)bundleIdentifiersEnumerator;
- (id)localizedNameForLanguageCode:(id)arg1;
- (id)identifier;
- (id)localizedName;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)bundleIdentifiers;
- (id)imageRepresentationsAvailable;
- (id)imageDataForSize:(struct CGSize { double x1; double x2; })arg1 scale:(long long)arg2;
- (id)documentsTypes;
- (id)documentsURL;

@end

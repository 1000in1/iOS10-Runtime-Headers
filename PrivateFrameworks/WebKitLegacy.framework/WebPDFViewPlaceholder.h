/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy
 */

@class NSObject<WebPDFViewPlaceholderDelegate>, NSString, NSArray, WebDataSource;

@interface WebPDFViewPlaceholder : WAKView <WebPDFDocumentView, WebPDFDocumentRepresentation> {
    NSString *_title;
    NSArray *_pageRects;
    NSArray *_pageYOrigins;
    struct CGPDFDocument { } *_document;
    WebDataSource *_dataSource;
    NSObject<WebPDFViewPlaceholderDelegate> *_delegate;
    bool_didFinishLoadAndMemoryMap;
    struct CGSize { 
        double width; 
        double height; 
    } _containerSize;
    bool_didCompleteLayout;
}

@property NSObject<WebPDFViewPlaceholderDelegate> * delegate;
@property(retain) NSArray * pageRects;
@property(retain) NSArray * pageYOrigins;
@property(readonly) struct CGPDFDocument { }* document;
@property(readonly) struct CGPDFDocument { }* doc;
@property(readonly) unsigned long long totalPages;
@property(retain) NSString * title;
@property struct CGSize { double x1; double x2; } containerSize;
@property(readonly) bool didCompleteLayout;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;

+ (id)supportedMIMETypes;
+ (Class)_representationClassForWebFrame:(id)arg1;
+ (void)setAsPDFDocRepAndView;

- (void)dataSourceMemoryMapFailed;
- (id)documentSource;
- (bool)canProvideDocumentSource;
- (void)finishedLoadingWithDataSource:(id)arg1;
- (void)receivedError:(id)arg1 withDataSource:(id)arg2;
- (void)receivedData:(id)arg1 withDataSource:(id)arg2;
- (void)viewDidMoveToHostWindow;
- (void)viewWillMoveToHostWindow:(id)arg1;
- (void)setDataSource:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_getPDFPageBounds:(struct CGPDFPage { }*)arg1;
- (void)_evaluateJSForDocument:(struct CGPDFDocument { }*)arg1;
- (void)_updateTitleForDocumentIfAvailable;
- (void)dataSourceMemoryMapped;
- (void)_doPostLoadOrUnlockTasks;
- (struct CGSize { double x1; double x2; })_computePageRects:(struct CGPDFDocument { }*)arg1;
- (id)pageRects;
- (void)_notifyDidCompleteLayout;
- (bool)didCompleteLayout;
- (void)_updateTitleForURL:(id)arg1;
- (void)dataSourceUpdated:(id)arg1;
- (void)setPageYOrigins:(id)arg1;
- (void)setPageRects:(id)arg1;
- (struct CGPDFDocument { }*)document;
- (void)setDocument:(struct CGPDFDocument { }*)arg1;
- (void)setTitle:(id)arg1;
- (id)title;
- (void)setContainerSize:(struct CGSize { double x1; double x2; })arg1;
- (void)layout;
- (struct CGSize { double x1; double x2; })containerSize;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (id).cxx_construct;
- (void)simulateClickOnLinkToURL:(id)arg1;
- (id)pageYOrigins;
- (void)clearDocument;
- (void)didUnlockDocument;
- (struct CGPDFDocument { }*)doc;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForPageNumber:(unsigned long long)arg1;
- (unsigned long long)totalPages;

@end

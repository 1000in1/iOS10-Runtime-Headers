/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/Preferences.framework/Preferences
 */

@class NSString, UITransitionView, UIKeyboard, UIView<PINEntryView>;

@interface DevicePINPane : PSEditingPane <UIKeyInput, UITextInputTraits, PSPINEntryViewDelegate> {
    UITransitionView *_transitionView;
    bool_transitioning;
    UIView<PINEntryView> *_pinView;
    UIKeyboard *_keypad;
    bool_keypadActive;
    long long _autocapitalizationType;
    long long _autocorrectionType;
    long long _keyboardType;
    long long _keyboardAppearance;
    bool_playSound;
    bool_isBlocked;
    bool_simplePIN;
}

@property(retain) UIView<PINEntryView> * pinView;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property long long autocapitalizationType;
@property long long autocorrectionType;
@property long long spellCheckingType;
@property long long keyboardType;
@property long long keyboardAppearance;
@property long long returnKeyType;
@property bool enablesReturnKeyAutomatically;
@property(getter=isSecureTextEntry) bool secureTextEntry;


- (void)clearPassword;
- (void)slideToNewPasscodeField:(bool)arg1 withKeyboard:(bool)arg2;
- (void)setSimplePIN:(bool)arg1 requiresKeyboard:(bool)arg2;
- (void)delayForTextEntryAnimationsWithCompletion:(id)arg1;
- (void)setKeyboardUserInteractionEnabled:(bool)arg1;
- (void)activateKeypadView;
- (void)_setKeypadState:(bool)arg1 animated:(bool)arg2;
- (void)setKeyboardIsNumeric:(bool)arg1;
- (void)setPinView:(id)arg1;
- (id)pinView;
- (void)_setPlaysKeyboardClicks:(bool)arg1;
- (void)pinView:(id)arg1 pinEntered:(id)arg2;
- (void)pinView:(id)arg1 pinValueChanged:(id)arg2;
- (void)setSimplePIN:(bool)arg1 requiresKeyboard:(bool)arg2 numericOnly:(bool)arg3;
- (void)slideToNewPasscodeField:(bool)arg1 requiresKeyboard:(bool)arg2 numericOnly:(bool)arg3;
- (void)okButtonPressed;
- (bool)simplePIN;
- (void)setPINPolicyString:(id)arg1 visible:(bool)arg2;
- (void)hideError;
- (void)hideFailedAttempts;
- (void)showError:(id)arg1 error:(id)arg2 isBlocked:(bool)arg3 animate:(bool)arg4;
- (void)showFailedAttempts:(long long)arg1;
- (void)dismissKeypad;
- (void)deactivateKeypadView;
- (id)specifierLabel;
- (bool)requiresKeyboard;
- (bool)resignFirstResponder;
- (bool)becomeFirstResponder;
- (id)text;
- (void)insertText:(id)arg1;
- (void)setTitle:(id)arg1;
- (long long)keyboardAppearance;
- (long long)autocorrectionType;
- (void)setKeyboardType:(long long)arg1;
- (void)setAutocapitalizationType:(long long)arg1;
- (long long)autocapitalizationType;
- (long long)keyboardType;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)password;
- (void)dealloc;
- (void)setKeyboardAppearance:(long long)arg1;
- (void)setAutocorrectionType:(long long)arg1;
- (bool)isSecureTextEntry;
- (void)deleteBackward;
- (bool)hasText;
- (void)transitionViewDidComplete:(id)arg1;
- (bool)canBecomeFirstResponder;
- (void)setText:(id)arg1;
- (void)layoutSubviews;

@end

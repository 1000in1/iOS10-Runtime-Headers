/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices
 */

@class VSSpeechConnection, <VSSpeechSynthesizerDelegate>, NSString, NSObject<OS_dispatch_queue>, VSKeepAlive;

@interface VSSpeechSynthesizer : NSObject <VSSpeechConnectionDelegate> {
    VSKeepAlive *_keepAlive;
    VSKeepAlive *_inactiveKeepAlive;
    long long _footprint;
    bool_useCustomVoice;
    long long _gender;
    bool_useSharedSession;
    bool_audioSessionIDIsValid;
    unsigned int _audioSessionID;
    unsigned int _audioQueueFlags;
    NSObject<OS_dispatch_queue> *_queue;
    VSSpeechConnection *_speechConnection;
    struct { 
        unsigned int delegateStart : 1; 
        unsigned int delegateFinish : 1; 
        unsigned int delegateFinishWithPhonemesSpoken : 1; 
        unsigned int delegatePause : 1; 
        unsigned int delegateContinue : 1; 
        unsigned int delegateWillSpeak : 1; 
        unsigned int delegateStartWithRequest : 1; 
        unsigned int delegateFinishWithRequest : 1; 
        unsigned int delegateFinishWithPhonemesSpokenWithRequest : 1; 
        unsigned int delegatePauseWithRequest : 1; 
        unsigned int delegateContinueWithRequest : 1; 
        unsigned int delegateWillSpeakWithRequest : 1; 
        unsigned int willUseInput : 1; 
    } _synthesizerFlags;
    float _rate;
    float _pitch;
    float _volume;
    <VSSpeechSynthesizerDelegate> *_delegate;
    NSString *_voice;
}

@property <VSSpeechSynthesizerDelegate> * delegate;
@property float rate;
@property float pitch;
@property float volume;
@property(retain) NSString * voice;

+ (void)getVoiceInfoForLanguageCode:(id)arg1 footprint:(long long)arg2 gender:(long long)arg3 custom:(bool)arg4 reply:(id)arg5;
+ (void)getAutoDownloadedVoiceAssets:(id)arg1;
+ (void)setAutoDownloadedVoiceAssets:(id)arg1;
+ (void)downloadVoiceAsset:(id)arg1 progress:(id)arg2 completion:(id)arg3;
+ (void)getLocalVoiceAssets:(id)arg1;
+ (void)getAllVoiceAssets:(id)arg1;
+ (id)availableLanguageCodes;
+ (void)getLogToFile:(id)arg1;
+ (void)setLogToFile:(bool)arg1;
+ (id)availableVoices;
+ (bool)isSystemSpeaking;
+ (id)availableFootprintsForVoice:(id)arg1 languageCode:(id)arg2;
+ (id)availableVoicesForLanguageCode:(id)arg1;
+ (void)initialize;

- (bool)continueSpeakingRequest:(id)arg1 withError:(id*)arg2;
- (bool)pauseSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (bool)pauseSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 error:(id*)arg3;
- (bool)stopSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (bool)stopSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 error:(id*)arg3;
- (bool)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 request:(id*)arg3 error:(id*)arg4;
- (bool)startSpeakingString:(id)arg1 toURL:(id)arg2 request:(id*)arg3 error:(id*)arg4;
- (bool)startSpeakingString:(id)arg1 request:(id*)arg2 error:(id*)arg3;
- (void)useAudioQueueFlags:(unsigned int)arg1;
- (void)useSpecificAudioSession:(unsigned int)arg1;
- (void)useSharedAudioSession:(bool)arg1;
- (float)maximumRate;
- (float)minimumRate;
- (bool)continueSpeakingWithError:(id*)arg1;
- (bool)pauseSpeakingAtNextBoundary:(long long)arg1 error:(id*)arg2;
- (bool)startSpeakingString:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (bool)startSpeakingString:(id)arg1 error:(id*)arg2;
- (void)connection:(id)arg1 speechRequest:(id)arg2 willSpeakMark:(long long)arg3 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (void)connection:(id)arg1 speechRequest:(id)arg2 didStopAtEnd:(bool)arg3 phonemesSpoken:(id)arg4 error:(id)arg5;
- (void)connection:(id)arg1 speechRequestDidContinue:(id)arg2;
- (void)connection:(id)arg1 speechRequestDidPause:(id)arg2;
- (void)connection:(id)arg1 speechRequestDidStart:(id)arg2;
- (bool)_continueSpeakingRequest:(id)arg1 withError:(id*)arg2;
- (bool)_pauseSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (bool)pauseSpeakingAtNextBoundary:(long long)arg1 synchronously:(bool)arg2 error:(id*)arg3;
- (bool)stopSpeakingAtNextBoundary:(long long)arg1 synchronously:(bool)arg2 error:(id*)arg3;
- (bool)startSpeakingString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 error:(id*)arg4;
- (void)setMaintainInactivePersistentConnection:(bool)arg1;
- (void)setMaintainPersistentConnection:(bool)arg1;
- (bool)_stopSpeakingRequest:(id)arg1 atNextBoundary:(long long)arg2 synchronously:(bool)arg3 error:(id*)arg4;
- (bool)_startSpeakingString:(id)arg1 orAttributedString:(id)arg2 toURL:(id)arg3 withLanguageCode:(id)arg4 request:(id*)arg5 error:(id*)arg6;
- (void)setGender:(long long)arg1;
- (void)setUseCustomVoice:(bool)arg1;
- (bool)useCustomVoice;
- (void)setFootprint:(long long)arg1;
- (bool)startSpeakingString:(id)arg1 withLanguageCode:(id)arg2 error:(id*)arg3;
- (bool)startSpeakingAttributedString:(id)arg1 toURL:(id)arg2 withLanguageCode:(id)arg3 error:(id*)arg4;
- (id)initForInputFeedback;
- (bool)stopSpeakingAtNextBoundary:(long long)arg1 error:(id*)arg2;
- (long long)gender;
- (long long)footprint;
- (bool)isSpeaking;
- (void)setVoice:(id)arg1;
- (id)speechString;
- (id)voice;
- (void)setPitch:(float)arg1;
- (void)setRate:(float)arg1;
- (float)rate;
- (void)setVolume:(float)arg1;
- (float)volume;
- (float)pitch;
- (id)init;
- (void)setDelegate:(id)arg1;
- (void)_setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (void).cxx_destruct;

@end

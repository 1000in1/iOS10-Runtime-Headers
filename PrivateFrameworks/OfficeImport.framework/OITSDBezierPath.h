/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

@interface OITSDBezierPath : NSObject <NSCopying, NSCoding> {
    long long sfr_elementCount;
    long long sfr_elementMax;
    struct PATHSEGMENT { unsigned int x1 : 4; unsigned int x2 : 60; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; } *sfr_head;
    double *sfr_elementLength;
    double sfr_totalLength;
    long long sfr_lastSubpathIndex;
    void *sfr_extraSegments;
    double sfr_lineWidth;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } sfr_controlPointBounds;
    double sfr_miterLimit;
    double sfr_flatness;
    double *sfr_dashedLinePattern;
    unsigned long long sfr_dashedLineCount;
    double sfr_dashedLinePhase;
    void *sfr_path;
    long long sfr_extraSegmentCount;
    long long sfr_extraSegmentMax;
    struct { 
        unsigned int sfr_flags : 8; 
        unsigned int sfr_pathState : 2; 
        unsigned int sfr_calculatedLengths : 1; 
        unsigned int sfr_unused : 21; 
    } sfr_bpFlags;
}

+ (double)defaultLineWidth;
+ (void)setDefaultLineWidth:(double)arg1;
+ (unsigned long long)defaultLineJoinStyle;
+ (void)setDefaultLineJoinStyle:(unsigned long long)arg1;
+ (unsigned long long)defaultLineCapStyle;
+ (void)setDefaultLineCapStyle:(unsigned long long)arg1;
+ (unsigned long long)defaultWindingRule;
+ (void)setDefaultWindingRule:(unsigned long long)arg1;
+ (double)defaultFlatness;
+ (void)setDefaultFlatness:(double)arg1;
+ (double)defaultMiterLimit;
+ (void)setDefaultMiterLimit:(double)arg1;
+ (void)strokeLineFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
+ (void)clipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (void)strokeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)bezierPathWithStart:(struct CGPoint { double x1; double x2; })arg1 end:(struct CGPoint { double x1; double x2; })arg2;
+ (void)setWindingRule:(unsigned long long)arg1;
+ (unsigned long long)windingRule;
+ (double)miterLimit;
+ (double)lineWidth;
+ (void)initialize;
+ (void)fillRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (void)setFlatness:(double)arg1;
+ (double)flatness;
+ (void)setMiterLimit:(double)arg1;
+ (void)setLineJoinStyle:(unsigned long long)arg1;
+ (unsigned long long)lineJoinStyle;
+ (void)setLineCapStyle:(unsigned long long)arg1;
+ (unsigned long long)lineCapStyle;
+ (void)setLineWidth:(double)arg1;
+ (id)bezierPathWithCGPath:(struct CGPath { }*)arg1;
+ (id)bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cornerRadius:(double)arg2;
+ (id)bezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)bezierPathWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)bezierPath;

- (void)attachBezierPath:(id)arg1;
- (void)_addPathSegment:(long long)arg1 point:(struct CGPoint { double x1; double x2; })arg2;
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 startAngle:(double)arg2 swingAngle:(double)arg3 angleType:(int)arg4 startNewPath:(bool)arg5;
- (void)appendBezierPathWithArcWithEllipseBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 startRadialVector:(struct CGPoint { double x1; double x2; })arg2 endRadialVector:(struct CGPoint { double x1; double x2; })arg3 angleSign:(int)arg4 startNewPath:(bool)arg5;
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 radius:(double)arg3;
- (void)appendBezierPathWithPoints:(struct CGPoint { double x1; double x2; }*)arg1 count:(long long)arg2;
- (void)setAssociatedPoints:(struct CGPoint { double x1; double x2; }*)arg1 atIndex:(long long)arg2;
- (double)lengthToElement:(long long)arg1;
- (double)lengthOfElement:(long long)arg1;
- (bool)isClockwise;
- (bool)isCircular;
- (struct CGPath { }*)cgPath;
- (id)_copyFlattenedPath;
- (id)bezierPathByFlatteningPath;
- (void)relativeCurveToPoint:(struct CGPoint { double x1; double x2; })arg1 controlPoint1:(struct CGPoint { double x1; double x2; })arg2 controlPoint2:(struct CGPoint { double x1; double x2; })arg3;
- (void)relativeLineToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)relativeMoveToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_appendArcSegmentWithCenter:(struct CGPoint { double x1; double x2; })arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4;
- (void)transformUsingAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { double x1; double x2; })arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4;
- (void)_appendToPath:(id)arg1;
- (void)calculateLengths;
- (double)calculateLengthOfElement:(long long)arg1;
- (unsigned long long)elementAtIndex:(long long)arg1 allPoints:(struct CGPoint { double x1; double x2; }*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })controlPointBounds;
- (unsigned long long)elementAtIndex:(long long)arg1 associatedPoints:(struct CGPoint { double x1; double x2; }*)arg2;
- (bool)isFlat;
- (void)_doPath;
- (void)curveToPoint:(struct CGPoint { double x1; double x2; })arg1 controlPoint1:(struct CGPoint { double x1; double x2; })arg2 controlPoint2:(struct CGPoint { double x1; double x2; })arg3;
- (void)flattenIntoPath:(id)arg1;
- (void)subdivideBezierWithFlatness:(double)arg1 startPoint:(struct CGPoint { double x1; double x2; })arg2 controlPoint1:(struct CGPoint { double x1; double x2; })arg3 controlPoint2:(struct CGPoint { double x1; double x2; })arg4 endPoint:(struct CGPoint { double x1; double x2; })arg5;
- (void)_deviceClosePath;
- (void)_deviceCurveToPoint:(struct CGPoint { double x1; double x2; })arg1 controlPoint1:(struct CGPoint { double x1; double x2; })arg2 controlPoint2:(struct CGPoint { double x1; double x2; })arg3;
- (void)_deviceLineToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_deviceMoveToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)elementCount;
- (bool)isRectangular;
- (void)setWindingRule:(unsigned long long)arg1;
- (unsigned long long)windingRule;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)miterLimit;
- (double)lineWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (unsigned long long)elementAtIndex:(long long)arg1;
- (id)init;
- (double)length;
- (const char *)cString;
- (bool)isEmpty;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id).cxx_construct;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)initWithCString:(const char *)arg1;
- (void)setFlatness:(double)arg1;
- (double)flatness;
- (void)setMiterLimit:(double)arg1;
- (void)setLineJoinStyle:(unsigned long long)arg1;
- (unsigned long long)lineJoinStyle;
- (void)setLineCapStyle:(unsigned long long)arg1;
- (unsigned long long)lineCapStyle;
- (void)setLineWidth:(double)arg1;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { double x1; double x2; })arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(bool)arg5;
- (void)appendBezierPathWithOvalInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)appendBezierPathWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)appendBezierPath:(id)arg1;
- (void)lineToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stroke;
- (void)fill;
- (void)getLineDash:(double*)arg1 count:(long long*)arg2 phase:(double*)arg3;
- (void)setLineDash:(const double*)arg1 count:(long long)arg2 phase:(double)arg3;
- (struct CGPoint { double x1; double x2; })currentPoint;
- (id)bezierPathByReversingPath;
- (void)removeAllPoints;
- (void)addClip;
- (void)closePath;
- (void)moveToPoint:(struct CGPoint { double x1; double x2; })arg1;

@end

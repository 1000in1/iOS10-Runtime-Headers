/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration
 */

@class NSString, NSArray, NSDictionary, NSObject<OS_dispatch_queue>, NSDate;

@interface MCProfile : NSObject  {
    int _trustQueueTrustLevel;
    bool_trustQueueTrustHasBeenEvaluated;
    NSObject<OS_dispatch_queue> *_trustEvaluationQueue;
    NSString *_signerQueueSignerSummary;
    NSArray *_signerQueueSignerCertificates;
    NSObject<OS_dispatch_queue> *_signerEvaluationQueue;
    bool_encrypted;
    bool_isLocked;
    bool_needsReboot;
    bool_isStub;
    bool_mustInstallNonInteractively;
    NSString *_profileDescription;
    NSString *_displayName;
    NSString *_identifier;
    NSString *_UUID;
    NSString *_organization;
    long long _version;
    NSDate *_installDate;
    NSDate *_expiryDate;
    NSString *_removalPasscode;
    NSString *_productVersion;
    NSString *_productBuildVersion;
    NSDate *_removalDate;
    NSDictionary *_installOptions;
    NSString *_localizedConsentText;
}

@property(retain,readonly) NSString * stubFileName;
@property(retain,readonly) NSString * profileIDHashFileName;
@property(retain,readonly) NSString * friendlyName;
@property(retain) NSString * displayName;
@property(retain,readonly) NSString * profileDescription;
@property(retain,readonly) NSString * identifier;
@property(retain,readonly) NSString * UUID;
@property(retain,readonly) NSString * organization;
@property(readonly) long long version;
@property(retain) NSDate * installDate;
@property(retain) NSDictionary * installOptions;
@property bool mustInstallNonInteractively;
@property(getter=isEncrypted) bool encrypted;
@property(readonly) bool isSigned;
@property(readonly) int trustLevel;
@property(readonly) NSString * signerSummary;
@property(readonly) struct __SecCertificate { }* signerCertificate;
@property(retain) NSArray * signerCertificates;
@property(readonly) bool isStub;
@property(retain,readonly) NSString * productBuildVersion;
@property(retain,readonly) NSString * productVersion;
@property(getter=isLocked) bool locked;
@property(retain) NSString * removalPasscode;
@property(readonly) bool needsReboot;
@property(retain,readonly) NSArray * payloads;
@property(retain,readonly) NSArray * managedPayloads;
@property(retain,readonly) NSArray * localizedPayloadSummaryByType;
@property(retain,readonly) NSArray * localizedManagedPayloadSummaryByType;
@property(retain,readonly) NSDate * earliestCertificateExpiryDate;
@property(retain,readonly) NSDate * expiryDate;
@property(readonly) bool isManagedByProfileService;
@property(retain,readonly) NSArray * installationWarnings;
@property(readonly) NSString * localizedConsentText;
@property(readonly) NSDate * removalDate;

+ (int)evaluateTrust:(struct __SecTrust { }*)arg1;
+ (id)dataFromCMSEncodedData:(id)arg1 outSignerCertificates:(id*)arg2;
+ (id)profileDictionaryFromProfileData:(id)arg1 outError:(id*)arg2;
+ (id)_malformedProfileError;
+ (id)profileWithData:(id)arg1 fileName:(id)arg2 outError:(id*)arg3;
+ (id)profileWithData:(id)arg1 fileName:(id)arg2 allowEmptyPayload:(bool)arg3 outError:(id*)arg4;
+ (id)signerSummaryOfCertificate:(struct __SecCertificate { }*)arg1;
+ (int)evaluateTrustOfCertificateChain:(id)arg1;
+ (id)missingFieldErrorWithField:(id)arg1;
+ (bool)checkString:(id)arg1 isOneOfStrings:(id)arg2 key:(id)arg3 errorDomain:(id)arg4 errorCode:(long long)arg5 errorString:(id)arg6 outError:(id*)arg7;
+ (int)evaluateTrustOfCertificateChain:(id)arg1 outIsAllowedToWriteDefaults:(bool*)arg2;
+ (id)profileWithDictionary:(id)arg1 fileName:(id)arg2 allowEmptyPayload:(bool)arg3 outError:(id*)arg4;
+ (id)removeOptionalNonZeroLengthStringInDictionary:(id)arg1 key:(id)arg2 errorDomain:(id)arg3 invalidDataCode:(long long)arg4 invalidDataErrorString:(id)arg5 outError:(id*)arg6;
+ (id)removeRequiredNonZeroLengthStringInDictionary:(id)arg1 key:(id)arg2 errorDomain:(id)arg3 missingDataCode:(long long)arg4 missingDataErrorString:(id)arg5 invalidDataCode:(long long)arg6 invalidDataErrorString:(id)arg7 outError:(id*)arg8;
+ (id)profileWithData:(id)arg1 outError:(id*)arg2;
+ (id)removeOptionalObjectInDictionary:(id)arg1 key:(id)arg2 type:(Class)arg3 errorDomain:(id)arg4 invalidDataCode:(long long)arg5 invalidDataErrorString:(id)arg6 outError:(id*)arg7;
+ (id)badFieldTypeErrorWithField:(id)arg1;
+ (id)removeRequiredObjectInDictionary:(id)arg1 key:(id)arg2 type:(Class)arg3 errorDomain:(id)arg4 missingDataCode:(long long)arg5 missingDataErrorString:(id)arg6 invalidDataCode:(long long)arg7 invalidDataErrorString:(id)arg8 outError:(id*)arg9;

- (id)installDate;
- (void)setInstallDate:(id)arg1;
- (unsigned long long)countOfPayloadsOfClass:(Class)arg1;
- (bool)containsPayloadOfClass:(Class)arg1;
- (bool)writeStubToDirectory:(id)arg1;
- (id)profileIDHashFileName;
- (bool)writeStubToPath:(id)arg1;
- (id)stubFileName;
- (id)localizedConsentText;
- (void)setMustInstallNonInteractively:(bool)arg1;
- (void)setInstallOptions:(id)arg1;
- (id)removalDate;
- (bool)needsReboot;
- (void)setEncrypted:(bool)arg1;
- (bool)mayInstallWithOptions:(id)arg1 hasInteractionClient:(bool)arg2 outError:(id*)arg3;
- (void)evaluateSignerTrustAsynchronouslyWithCompletion:(id)arg1;
- (struct __SecCertificate { }*)signerCertificate;
- (void)evaluateSignerTrust;
- (id)signerSummary;
- (bool)mustInstallNonInteractively;
- (bool)isEncrypted;
- (id)installOptions;
- (int)trustLevel;
- (void)setSignerCertificates:(id)arg1;
- (bool)isSigned;
- (id)signerCertificates;
- (id)earliestCertificateExpiryDate;
- (id)localizedManagedPayloadSummaryByType;
- (id)localizedPayloadSummaryByType;
- (bool)isManagedByProfileService;
- (id)subjectSummaryFromCertificateWithPersistentID:(id)arg1;
- (id)subjectSummaryFromCertificatePayloadWithUUID:(id)arg1;
- (id)managedPayloads;
- (id)installationWarningsIncludeUnsignedProfileWarning:(bool)arg1;
- (id)installationWarnings;
- (id)malformedProfileErrorWithError:(id)arg1;
- (id)initWithDictionary:(id)arg1 allowEmptyPayload:(bool)arg2 outError:(id*)arg3;
- (struct __SecCertificate { }*)copyCertificateFromPayloadWithUUID:(id)arg1;
- (id)payloadWithUUID:(id)arg1;
- (id)payloads;
- (void)setRemovalPasscode:(id)arg1;
- (id)removalPasscode;
- (id)stubDictionary;
- (bool)isStub;
- (id)organization;
- (id)profileDescription;
- (id)friendlyName;
- (struct __SecCertificate { }*)copyCertificateWithPersistentID:(id)arg1;
- (void)setDisplayName:(id)arg1;
- (id)expiryDate;
- (id)productBuildVersion;
- (id)productVersion;
- (long long)version;
- (id)identifier;
- (id)UUID;
- (void).cxx_destruct;
- (id)description;
- (id)displayName;
- (void)setLocked:(bool)arg1;
- (bool)isLocked;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/Message.framework/Message
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class NSMutableDictionary, NSString, NSURL, MFMimePart, <MFDataConsumer>, MFAttachmentManager;

@interface MFAttachment : NSObject <QLPreviewItem> {
    NSMutableDictionary *_metadata;
    MFAttachmentManager *_attachmentManager;
    bool_isDataAvailableLocally;
    bool_isUserFacing;
    NSURL *_url;
    MFMimePart *_part;
    NSString *_disposition;
    unsigned long long _encodedFileSize;
    unsigned long long _progressInterval;
    double _progressTimeInterval;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _fetchCompletionBlock;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _fetchProgressBlock;

    <MFDataConsumer> *_customConsumer;
    unsigned long long _lastProgressBytes;
    double _lastProgressTime;
}

@property(retain) NSString * eventID;
@property(retain) NSString * meetingStorePersistentID;
@property(retain) NSString * icsRepresentation;
@property struct CGSize { double x1; double x2; } imageDimensions;
@property(copy) NSURL * url;
@property(retain) MFMimePart * part;
@property(readonly) NSString * contentID;
@property(retain) NSString * fileName;
@property(copy) NSString * path;
@property(copy) NSString * mimeType;
@property(copy) NSString * disposition;
@property unsigned long long decodedFileSize;
@property unsigned long long encodedFileSize;
@property(readonly) unsigned long long maxSizeAllowedOverCurrentNetwork;
@property(readonly) bool isDataAvailableLocally;
@property(readonly) bool shouldAutoDownload;
@property unsigned long long setupComplete;
@property(readonly) NSString * inferredMimeType;
@property unsigned long long progressInterval;
@property double progressTimeInterval;
@property(copy) id fetchCompletionBlock;
@property(copy) id fetchProgressBlock;
@property(retain) <MFDataConsumer> * customConsumer;
@property bool isUserFacing;
@property MFAttachmentManager * attachmentManager;
@property(readonly) bool isContainedInRFC822;
@property(readonly) bool isContainedInCompose;
@property unsigned long long lastProgressBytes;
@property double lastProgressTime;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) NSURL * previewItemURL;
@property(readonly) NSString * previewItemTitle;


- (unsigned long long)setupComplete;
- (void)fetchData;
- (id)inferredMimeType;
- (id)textEncodingNameForData:(id)arg1 mimeType:(id)arg2;
- (void)setAttachmentManager:(id)arg1;
- (unsigned long long)decodedFileSize;
- (id)fetchDataSynchronously:(id*)arg1;
- (id)contentID;
- (void)setContentID:(id)arg1;
- (void)setMimeType:(id)arg1;
- (void)setFileName:(id)arg1;
- (void)setLastProgressTime:(double)arg1;
- (double)lastProgressTime;
- (void)setLastProgressBytes:(unsigned long long)arg1;
- (unsigned long long)lastProgressBytes;
- (void)setCustomConsumer:(id)arg1;
- (void)setFetchProgressBlock:(id)arg1;
- (id)fetchProgressBlock;
- (void)setProgressTimeInterval:(double)arg1;
- (double)progressTimeInterval;
- (void)setProgressInterval:(unsigned long long)arg1;
- (unsigned long long)progressInterval;
- (void)setEncodedFileSize:(unsigned long long)arg1;
- (void)setPart:(id)arg1;
- (id)storageLocationWithMessage:(id)arg1;
- (void)setSetupComplete:(unsigned long long)arg1;
- (bool)shouldAutoDownload;
- (id)textEncodingGuessWithData:(id)arg1;
- (unsigned long long)maxSizeAllowedOverCurrentNetwork;
- (bool)isContainedInCompose;
- (void)setFetchCompletionBlock:(id)arg1;
- (id)fetchCompletionBlock;
- (bool)isContainedInRFC822;
- (void)setIsUserFacing:(bool)arg1;
- (id)initWithURL:(id)arg1 attachmentManager:(id)arg2;
- (bool)isUserFacing;
- (void)writeToDiskWithData:(id)arg1;
- (bool)isDataAvailableLocally;
- (void)setDecodedFileSize:(unsigned long long)arg1;
- (unsigned long long)encodedFileSize;
- (id)decodeFilterWithDataConsumer:(id)arg1;
- (id)customConsumer;
- (id)part;
- (id)metadataValueForKey:(id)arg1;
- (void)setMetadataValue:(id)arg1 forKey:(id)arg2;
- (id)attachmentManager;
- (id)fetchDataSynchronously:(id*)arg1 stripPrivateMetadata:(bool)arg2;
- (bool)isImageFile;
- (id)path;
- (id)url;
- (void)setUrl:(id)arg1;
- (void)setDisposition:(id)arg1;
- (id)disposition;
- (void)setPath:(id)arg1;
- (void)cancel;
- (void)dealloc;
- (id)description;
- (id)fileAttributes;
- (id)previewItemTitle;
- (id)previewItemURL;
- (id)mimeType;
- (id)fileName;
- (id)markupStringForDisplayWithData:(id)arg1 displayStyle:(int)arg2 printableWidth:(double)arg3;
- (bool)conformsToType:(id)arg1;
- (id)icsRepresentation;
- (id)eventID;
- (bool)hasCalendarMetadata;
- (bool)isDisplayableInsidePluginWithData:(id)arg1;
- (bool)isDisplayableInlineWithData:(id)arg1;
- (bool)isRestrictedMIMEType;
- (bool)isPDFFile;
- (id)_imageScalingKeyForImageScale:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })imageDimensionsWithData:(id)arg1;
- (bool)isContentTypeDisplayableByMobileMail;
- (id)filenameStrippingZipIfNeededUseApplications:(bool)arg1;
- (id)markupStringForComposition:(bool)arg1 prependBlankLine:(bool)arg2 imageScale:(unsigned long long)arg3;
- (void)setImageDimensions:(struct CGSize { double x1; double x2; })arg1;
- (void)setMeetingStorePersistentID:(id)arg1;
- (void)setIcsRepresentation:(id)arg1;
- (bool)isCalendarFile;
- (struct CGSize { double x1; double x2; })imageDimensions;
- (double)constrainedWidth;
- (bool)isSupportedImageType;
- (unsigned long long)scaleImageToFit:(unsigned long long)arg1 saveScaledImage:(bool)arg2;
- (void)enqueueScaleAttachmentWithCompletionBlock:(id)arg1;
- (bool)isRFC822;
- (bool)isDisplayableInsidePlugin;
- (bool)isDisplayableByWebKit;
- (bool)isDisplayableImage;
- (bool)isContentOpenable;
- (bool)isMedia;
- (id)_contentTypeByStrippingZipIfNeeded:(bool)arg1;
- (unsigned long long)imageScalingFlags;
- (bool)isDisplayableInline;
- (struct CGSize { double x1; double x2; })markupSizeForImageScale:(unsigned long long)arg1;
- (id)meetingStorePersistentID;
- (void)setEventID:(id)arg1;
- (id)contentType;
- (id)pass;
- (bool)isPass;

@end

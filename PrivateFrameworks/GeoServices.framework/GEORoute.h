/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@class NSData, NSMutableArray, NSString;

@interface GEORoute : PBCodable <NSCopying> {
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    } _advisorys;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    } _incidentEndOffsetsInRoutes;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    } _incidentIndices;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    } _trafficColorOffsets;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    } _trafficColors;
    NSMutableArray *_advisoryNotices;
    NSData *_arrivalRouteID;
    unsigned int _arrivalStepID;
    NSData *_basicPoints;
    NSData *_departureRouteID;
    unsigned int _departureStepID;
    unsigned int _distance;
    int _drivingSide;
    unsigned int _expectedTime;
    unsigned int _historicTravelTime;
    NSString *_name;
    NSString *_phoneticName;
    NSData *_routeID;
    NSMutableArray *_routeNames;
    int _routeType;
    NSMutableArray *_steps;
    int _transportType;
    NSData *_unpackedLatLngVertices;
    NSData *_zilchPoints;
    struct { 
        unsigned int arrivalStepID : 1; 
        unsigned int departureStepID : 1; 
        unsigned int distance : 1; 
        unsigned int drivingSide : 1; 
        unsigned int expectedTime : 1; 
        unsigned int historicTravelTime : 1; 
        unsigned int routeType : 1; 
        unsigned int transportType : 1; 
    } _has;
}

@property(readonly) unsigned int pointCount;
@property bool hasTransportType;
@property int transportType;
@property(retain) NSMutableArray * steps;
@property(readonly) bool hasName;
@property(retain) NSString * name;
@property(readonly) bool hasPhoneticName;
@property(retain) NSString * phoneticName;
@property bool hasDistance;
@property unsigned int distance;
@property bool hasExpectedTime;
@property unsigned int expectedTime;
@property(readonly) bool hasRouteID;
@property(retain) NSData * routeID;
@property bool hasRouteType;
@property int routeType;
@property(readonly) bool hasZilchPoints;
@property(retain) NSData * zilchPoints;
@property bool hasDrivingSide;
@property int drivingSide;
@property(readonly) bool hasDepartureRouteID;
@property(retain) NSData * departureRouteID;
@property bool hasDepartureStepID;
@property unsigned int departureStepID;
@property(readonly) bool hasArrivalRouteID;
@property(retain) NSData * arrivalRouteID;
@property bool hasArrivalStepID;
@property unsigned int arrivalStepID;
@property(readonly) bool hasBasicPoints;
@property(retain) NSData * basicPoints;
@property(retain) NSMutableArray * advisoryNotices;
@property(readonly) unsigned long long trafficColorsCount;
@property(readonly) unsigned int* trafficColors;
@property(readonly) unsigned long long trafficColorOffsetsCount;
@property(readonly) unsigned int* trafficColorOffsets;
@property(retain) NSMutableArray * routeNames;
@property bool hasHistoricTravelTime;
@property unsigned int historicTravelTime;
@property(readonly) unsigned long long advisorysCount;
@property(readonly) int* advisorys;
@property(readonly) bool hasUnpackedLatLngVertices;
@property(retain) NSData * unpackedLatLngVertices;
@property(readonly) unsigned long long incidentIndicesCount;
@property(readonly) unsigned int* incidentIndices;
@property(readonly) unsigned long long incidentEndOffsetsInRoutesCount;
@property(readonly) unsigned int* incidentEndOffsetsInRoutes;


- (bool)hasBasicPoints;
- (id)convertToFullRoute:(id)arg1 includeDepartureRoutes:(bool)arg2 uniquePointRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (int)transportTypeForStep:(id)arg1;
- (bool)isContingentRouteFor:(id)arg1 afterPoint:(unsigned int)arg2 mainRoutes:(id)arg3;
- (id)newETARoute;
- (id)simplifiedDescription;
- (unsigned long long)distanceFromStepIndex:(unsigned long long)arg1 toStepIndex:(unsigned long long)arg2;
- (id)newETARouteFromStepIndex:(unsigned long long)arg1 stepPercentRemaining:(double)arg2;
- (unsigned long long)indexForStepID:(unsigned long long)arg1;
- (bool)unpackBasicPoints;
- (bool)unpackZilchPoints;
- (unsigned long long)stepIndexForPointIndex:(unsigned int)arg1;
- (struct { double x1; double x2; })pointAt:(unsigned int)arg1;
- (void*)controlPoints;
- (bool)unpackLatLngVertices;
- (id)unpackedLatLngVertices;
- (unsigned int)historicTravelTime;
- (id)routeNames;
- (id)advisoryNotices;
- (id)basicPoints;
- (unsigned int)arrivalStepID;
- (id)arrivalRouteID;
- (unsigned int)departureStepID;
- (id)departureRouteID;
- (id)steps;
- (void)setIncidentEndOffsetsInRoutes:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (unsigned int*)incidentEndOffsetsInRoutes;
- (void)setIncidentIndices:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (unsigned int*)incidentIndices;
- (bool)hasUnpackedLatLngVertices;
- (void)setAdvisorys:(int*)arg1 count:(unsigned long long)arg2;
- (int*)advisorys;
- (bool)hasHistoricTravelTime;
- (void)setHasHistoricTravelTime:(bool)arg1;
- (void)setHistoricTravelTime:(unsigned int)arg1;
- (void)setTrafficColorOffsets:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (unsigned int*)trafficColorOffsets;
- (void)setTrafficColors:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (unsigned int*)trafficColors;
- (bool)hasArrivalStepID;
- (void)setHasArrivalStepID:(bool)arg1;
- (void)setArrivalStepID:(unsigned int)arg1;
- (bool)hasArrivalRouteID;
- (bool)hasDepartureStepID;
- (void)setHasDepartureStepID:(bool)arg1;
- (void)setDepartureStepID:(unsigned int)arg1;
- (bool)hasDepartureRouteID;
- (bool)hasDrivingSide;
- (void)setHasDrivingSide:(bool)arg1;
- (void)setDrivingSide:(int)arg1;
- (bool)hasRouteType;
- (void)setHasRouteType:(bool)arg1;
- (void)setRouteType:(int)arg1;
- (bool)hasExpectedTime;
- (void)setHasExpectedTime:(bool)arg1;
- (void)setExpectedTime:(unsigned int)arg1;
- (bool)hasDistance;
- (void)setHasDistance:(bool)arg1;
- (void)setHasTransportType:(bool)arg1;
- (void)addIncidentEndOffsetsInRoute:(unsigned int)arg1;
- (unsigned int)incidentEndOffsetsInRouteAtIndex:(unsigned long long)arg1;
- (void)clearIncidentEndOffsetsInRoutes;
- (unsigned long long)incidentEndOffsetsInRoutesCount;
- (void)addIncidentIndices:(unsigned int)arg1;
- (unsigned int)incidentIndicesAtIndex:(unsigned long long)arg1;
- (void)clearIncidentIndices;
- (unsigned long long)incidentIndicesCount;
- (void)addAdvisory:(int)arg1;
- (int)advisoryAtIndex:(unsigned long long)arg1;
- (void)clearAdvisorys;
- (unsigned long long)advisorysCount;
- (id)routeNameAtIndex:(unsigned long long)arg1;
- (void)clearRouteNames;
- (unsigned long long)routeNamesCount;
- (void)addTrafficColorOffset:(unsigned int)arg1;
- (unsigned int)trafficColorOffsetAtIndex:(unsigned long long)arg1;
- (void)clearTrafficColorOffsets;
- (unsigned long long)trafficColorOffsetsCount;
- (void)addTrafficColor:(unsigned int)arg1;
- (unsigned int)trafficColorAtIndex:(unsigned long long)arg1;
- (void)clearTrafficColors;
- (unsigned long long)trafficColorsCount;
- (id)advisoryNoticeAtIndex:(unsigned long long)arg1;
- (void)clearAdvisoryNotices;
- (unsigned long long)advisoryNoticesCount;
- (void)clearSteps;
- (unsigned long long)stepsCount;
- (void)addRouteName:(id)arg1;
- (void)addAdvisoryNotice:(id)arg1;
- (void)addStep:(id)arg1;
- (void)setUnpackedLatLngVertices:(id)arg1;
- (void)setRouteNames:(id)arg1;
- (void)setAdvisoryNotices:(id)arg1;
- (void)setBasicPoints:(id)arg1;
- (void)setArrivalRouteID:(id)arg1;
- (void)setDepartureRouteID:(id)arg1;
- (void)setSteps:(id)arg1;
- (id)phoneticName;
- (bool)hasPhoneticName;
- (void)setPhoneticName:(id)arg1;
- (bool)hasTransportType;
- (void)setTransportType:(int)arg1;
- (int)drivingSide;
- (id)stepAtIndex:(unsigned long long)arg1;
- (int)transportType;
- (unsigned int)expectedTime;
- (bool)hasName;
- (id)zilchPoints;
- (id)routeID;
- (bool)hasZilchPoints;
- (bool)hasRouteID;
- (void)setZilchPoints:(id)arg1;
- (void)setRouteID:(id)arg1;
- (void)copyTo:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (void)writeTo:(id)arg1;
- (int)routeType;
- (unsigned int)pointCount;
- (void)setName:(id)arg1;
- (unsigned int)distance;
- (void)setDistance:(unsigned int)arg1;
- (id)debugDescription;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)name;
- (void)dealloc;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dictionaryRepresentation;
- (id)instructionsForStep:(id)arg1;
- (id)maneuverImageForStep:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3;
- (struct CGImage { }*)_mapKitImage;

@end

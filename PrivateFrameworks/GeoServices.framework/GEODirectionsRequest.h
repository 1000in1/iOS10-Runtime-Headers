/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@class GEOOriginalRoute, NSData, GEORouteAttributes, GEOClientCapabilities, NSMutableArray, GEOLocation, GEOMapRegion, GEODirectionsRequestFeedback;

@interface GEODirectionsRequest : PBRequest <NSCopying> {
    struct { 
        unsigned long long _high; 
        unsigned long long _low; 
    } _sessionID;
    unsigned long long _maxDecoderVersion;
    unsigned long long _maxGraphVersion;
    unsigned long long _sharedLibraryVersion;
    GEOClientCapabilities *_clientCapabilities;
    GEOMapRegion *_currentMapRegion;
    GEOLocation *_currentUserLocation;
    int _departureTime;
    GEODirectionsRequestFeedback *_feedback;
    unsigned int _mainTransportTypeMaxRouteCount;
    NSData *_originalDirectionsResponseID;
    GEOOriginalRoute *_originalRoute;
    NSData *_originalRouteID;
    NSData *_originalRouteZilchPoints;
    GEORouteAttributes *_routeAttributes;
    unsigned int _sequenceNumber;
    NSMutableArray *_serviceTags;
    unsigned int _timeSinceLastRerouteRequest;
    NSMutableArray *_waypointTypeds;
    bool_getRouteForZilchPoints;
    struct { 
        unsigned int sessionID : 1; 
        unsigned int maxDecoderVersion : 1; 
        unsigned int maxGraphVersion : 1; 
        unsigned int sharedLibraryVersion : 1; 
        unsigned int departureTime : 1; 
        unsigned int mainTransportTypeMaxRouteCount : 1; 
        unsigned int sequenceNumber : 1; 
        unsigned int timeSinceLastRerouteRequest : 1; 
        unsigned int getRouteForZilchPoints : 1; 
    } _has;
}

@property(readonly) bool hasRouteAttributes;
@property(retain) GEORouteAttributes * routeAttributes;
@property bool hasMainTransportTypeMaxRouteCount;
@property unsigned int mainTransportTypeMaxRouteCount;
@property(readonly) bool hasCurrentUserLocation;
@property(retain) GEOLocation * currentUserLocation;
@property(readonly) bool hasCurrentMapRegion;
@property(retain) GEOMapRegion * currentMapRegion;
@property(readonly) bool hasOriginalRouteID;
@property(retain) NSData * originalRouteID;
@property(readonly) bool hasOriginalRouteZilchPoints;
@property(retain) NSData * originalRouteZilchPoints;
@property bool hasTimeSinceLastRerouteRequest;
@property unsigned int timeSinceLastRerouteRequest;
@property(readonly) bool hasClientCapabilities;
@property(retain) GEOClientCapabilities * clientCapabilities;
@property(readonly) bool hasOriginalDirectionsResponseID;
@property(retain) NSData * originalDirectionsResponseID;
@property bool hasDepartureTime;
@property int departureTime;
@property bool hasGetRouteForZilchPoints;
@property bool getRouteForZilchPoints;
@property bool hasSessionID;
@property struct { unsigned long long x1; unsigned long long x2; } sessionID;
@property(readonly) bool hasFeedback;
@property(retain) GEODirectionsRequestFeedback * feedback;
@property(retain) NSMutableArray * waypointTypeds;
@property(readonly) bool hasOriginalRoute;
@property(retain) GEOOriginalRoute * originalRoute;
@property bool hasSequenceNumber;
@property unsigned int sequenceNumber;
@property(retain) NSMutableArray * serviceTags;
@property bool hasMaxDecoderVersion;
@property unsigned long long maxDecoderVersion;
@property bool hasMaxGraphVersion;
@property unsigned long long maxGraphVersion;
@property bool hasSharedLibraryVersion;
@property unsigned long long sharedLibraryVersion;


- (unsigned long long)sharedLibraryVersion;
- (unsigned long long)maxGraphVersion;
- (unsigned long long)maxDecoderVersion;
- (id)serviceTags;
- (id)originalRoute;
- (id)waypointTypeds;
- (int)departureTime;
- (id)clientCapabilities;
- (id)originalRouteZilchPoints;
- (id)originalRouteID;
- (id)currentMapRegion;
- (id)currentUserLocation;
- (id)routeAttributes;
- (bool)hasSharedLibraryVersion;
- (void)setHasSharedLibraryVersion:(bool)arg1;
- (void)setSharedLibraryVersion:(unsigned long long)arg1;
- (bool)hasMaxGraphVersion;
- (void)setHasMaxGraphVersion:(bool)arg1;
- (void)setMaxGraphVersion:(unsigned long long)arg1;
- (bool)hasMaxDecoderVersion;
- (void)setHasMaxDecoderVersion:(bool)arg1;
- (void)setMaxDecoderVersion:(unsigned long long)arg1;
- (bool)hasSequenceNumber;
- (void)setHasSequenceNumber:(bool)arg1;
- (void)setSequenceNumber:(unsigned int)arg1;
- (bool)hasOriginalRoute;
- (bool)hasFeedback;
- (bool)hasGetRouteForZilchPoints;
- (void)setHasGetRouteForZilchPoints:(bool)arg1;
- (void)setGetRouteForZilchPoints:(bool)arg1;
- (bool)getRouteForZilchPoints;
- (bool)hasDepartureTime;
- (void)setHasDepartureTime:(bool)arg1;
- (void)setDepartureTime:(int)arg1;
- (bool)hasClientCapabilities;
- (bool)hasTimeSinceLastRerouteRequest;
- (void)setHasTimeSinceLastRerouteRequest:(bool)arg1;
- (void)setTimeSinceLastRerouteRequest:(unsigned int)arg1;
- (unsigned int)timeSinceLastRerouteRequest;
- (bool)hasOriginalRouteZilchPoints;
- (bool)hasOriginalRouteID;
- (bool)hasCurrentMapRegion;
- (bool)hasCurrentUserLocation;
- (bool)hasMainTransportTypeMaxRouteCount;
- (void)setHasMainTransportTypeMaxRouteCount:(bool)arg1;
- (void)setMainTransportTypeMaxRouteCount:(unsigned int)arg1;
- (unsigned int)mainTransportTypeMaxRouteCount;
- (bool)hasRouteAttributes;
- (id)serviceTagAtIndex:(unsigned long long)arg1;
- (void)clearServiceTags;
- (unsigned long long)serviceTagsCount;
- (id)waypointTypedAtIndex:(unsigned long long)arg1;
- (void)clearWaypointTypeds;
- (unsigned long long)waypointTypedsCount;
- (void)addServiceTag:(id)arg1;
- (void)addWaypointTyped:(id)arg1;
- (void)setServiceTags:(id)arg1;
- (void)setOriginalRoute:(id)arg1;
- (void)setWaypointTypeds:(id)arg1;
- (void)setClientCapabilities:(id)arg1;
- (void)setOriginalRouteZilchPoints:(id)arg1;
- (void)setOriginalRouteID:(id)arg1;
- (void)setCurrentMapRegion:(id)arg1;
- (void)setCurrentUserLocation:(id)arg1;
- (void)setRouteAttributes:(id)arg1;
- (id)originalDirectionsResponseID;
- (bool)hasOriginalDirectionsResponseID;
- (void)setOriginalDirectionsResponseID:(id)arg1;
- (bool)hasSessionID;
- (void)setHasSessionID:(bool)arg1;
- (void)copyTo:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (Class)responseClass;
- (unsigned int)requestTypeCode;
- (void)writeTo:(id)arg1;
- (id)feedback;
- (void)setFeedback:(id)arg1;
- (unsigned int)sequenceNumber;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (struct { unsigned long long x1; unsigned long long x2; })sessionID;
- (void)setSessionID:(struct { unsigned long long x1; unsigned long long x2; })arg1;
- (void)dealloc;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dictionaryRepresentation;

@end

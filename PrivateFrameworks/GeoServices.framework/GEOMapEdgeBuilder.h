/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class GEOMapTileFinder, GEOMapAccess;

@interface GEOMapEdgeBuilder : GEOMapRequest  {
    struct deque<GEORoadEdge, std::__1::allocator<GEORoadEdge> > { 
        struct __split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *> > { 
            struct { /* ? */ } **__first_; 
            struct { /* ? */ } **__begin_; 
            struct { /* ? */ } **__end_; 
            struct __compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *> > { 
                struct { /* ? */ } **__first_; 
            } __end_cap_; 
        } __map_; 
        unsigned int __start_; 
        struct __compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge> > { 
            unsigned long __first_; 
        } __size_; 
    } _edges;
    unsigned int _zoomLevel;
    BOOL _buildAhead;
    BOOL _buildBehind;
    struct Vec2Imp<float> { 
        float x; 
        float y; 
    } _firstTilePoint;
    struct Vec2Imp<float> { 
        float x; 
        float y; 
    } _lastTilePoint;
    GEOMapTileFinder *_currentTileFinder;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _edgeHandler;

    struct unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > { 
        struct __hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey> > { 
            struct unique_ptr<std::__1::__hash_node<_GEOTileKey, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<_GEOTileKey, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > > { 
                    struct __hash_node<_GEOTileKey, void *> {} **__first_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> { 
                    struct __hash_node<_GEOTileKey, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::hash<GEOTileKey> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::equal_to<GEOTileKey> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    } _tileKeysSeen;
    BOOL _searchDirection;
}

@property(copy) id edgeHandler;
@property(readonly) GEOMapAccess * map;


- (id)edgeHandler;
- (id)map;
- (BOOL)_findNextEdge;
- (void)_buildCompleteEdge;
- (BOOL)_findEdgeBehind;
- (BOOL)_findEdgeAhead;
- (void)_findNeighborsOfKey:(const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg1 center:(struct { double x1; double x2; })arg2 radius:(double)arg3 findAhead:(BOOL)arg4;
- (void)setEdgeHandler:(id)arg1;
- (void)buildEdge:(id)arg1;
- (id)initWithMap:(id)arg1 firstEdge:(const struct { struct { /* ? */ } *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg2;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)cancel;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@class GEOMapServiceTraits, NSMapTable, GEOPlaceResult, GEOMapRegion, NSDictionary, GEOPDFlyover, NSURL, NSString, GEOPlace, GEOPDPlace, NSArray, NSData, GEOAddress, GEOMapItemClientAttributes;

@interface _GEOPlaceItem : NSObject <GEOMapItemPrivate> {
    GEOPlaceResult *_placeResult;
    GEOPlace *_place;
    GEOMapServiceTraits *_traits;
    NSMapTable *_attributionInfoMap;
}

@property(readonly) NSString * name;
@property(getter=isDisputed,readonly) bool disputed;
@property(getter=isValid,readonly) bool valid;
@property(readonly) struct { double x1; double x2; } coordinate;
@property(readonly) struct { double x1; double x2; } centerCoordinate;
@property(readonly) GEOMapRegion * displayMapRegion;
@property(readonly) GEOMapRegion * geoFenceMapRegion;
@property(readonly) GEOAddress * geoAddress;
@property(readonly) NSDictionary * addressDictionary;
@property(readonly) NSArray * areasOfInterest;
@property(readonly) NSString * timezone;
@property(readonly) int contactAddressType;
@property(readonly) NSString * contactName;
@property(readonly) NSString * contactSpokenName;
@property(readonly) bool contactIsMe;
@property(readonly) NSString * eventName;
@property(getter=_place,readonly) GEOPlace * place;
@property(getter=_placeData,readonly) GEOPDPlace * placeData;
@property(getter=_clientAttributes,readonly) GEOMapItemClientAttributes * clientAttributes;
@property(getter=_placeAsData,readonly) NSData * placeAsData;
@property(getter=_placeDataAsData,readonly) NSData * placeDataAsData;
@property(getter=_hasResolvablePartialInformation,readonly) bool hasResolvablePartialInformation;
@property(getter=_roadAccessPoints,readonly) NSArray * roadAccessPoints;
@property(getter=_sessionGUID,readonly) struct { unsigned long long x1; unsigned long long x2; } sessionGUID;
@property(getter=_sequenceNumber,readonly) unsigned int sequenceNumber;
@property(getter=_resultProviderID,readonly) int resultProviderID;
@property(getter=_hasFlyover,readonly) bool hasFlyover;
@property(getter=_flyover,readonly) GEOPDFlyover * flyover;
@property(getter=_hasMUID,readonly) bool hasMUID;
@property(getter=_muid,readonly) unsigned long long muid;
@property(getter=_businessURL,readonly) NSString * businessURL;
@property(getter=_hasUserRatingScore,readonly) bool hasUserRatingScore;
@property(getter=_sampleSizeForUserRatingScore,readonly) unsigned int sampleSizeForUserRatingScore;
@property(getter=_normalizedUserRatingScore,readonly) float normalizedUserRatingScore;
@property(getter=_hasPriceRange,readonly) bool hasPriceRange;
@property(getter=_priceRange,readonly) unsigned int priceRange;
@property(getter=_categoryKeys,readonly) NSArray * categoryKeys;
@property(getter=_hasAnyAmenities,readonly) bool hasAnyAmenities;
@property(getter=_hasDeliveryAmenity,readonly) bool hasDeliveryAmenity;
@property(getter=_hasDelivery,readonly) bool hasDelivery;
@property(getter=_hasGoodForKidsAmenity,readonly) bool hasGoodForKidsAmenity;
@property(getter=_goodForKids,readonly) bool goodForKids;
@property(getter=_hasTakesReservationsAmenity,readonly) bool hasTakesReservationsAmenity;
@property(getter=_takesReservations,readonly) bool takesReservations;
@property(getter=_hasOperatingHours,readonly) bool hasOperatingHours;
@property(getter=_operatingHours,readonly) NSArray * operatingHours;
@property(getter=_hasTelephone,readonly) bool hasTelephone;
@property(getter=_telephone,readonly) NSString * telephone;
@property(getter=_needsAttribution,readonly) bool needsAttribution;
@property(getter=_webURL,copy,readonly) NSURL * webURL;
@property(getter=_providerURL,copy,readonly) NSURL * providerURL;
@property(getter=_vendorID,copy,readonly) NSString * vendorID;
@property(getter=_showInfoAttribution,readonly) bool showInfoAttribution;
@property(getter=_hasMoreInfoAttribution,readonly) bool hasMoreInfoAttribution;
@property(getter=_infoDisplayName,readonly) NSString * infoDisplayName;
@property(getter=_showPhotoAttribution,readonly) bool showPhotoAttribution;
@property(getter=_hasMorePhotoAttribution,readonly) bool hasMorePhotoAttribution;
@property(getter=_showAddPhoto,readonly) bool showAddPhoto;
@property(getter=_photoDisplayName,readonly) NSString * photoDisplayName;
@property(getter=_showReviewAttribution,readonly) bool showReviewAttribution;
@property(getter=_hasMoreReviewAttribution,readonly) bool hasMoreReviewAttribution;
@property(getter=_showAddReview,readonly) bool showAddReview;
@property(getter=_reviewDisplayName,readonly) NSString * reviewDisplayName;
@property(getter=_calloutDisplayName,readonly) NSString * calloutDisplayName;
@property(getter=_poiSurveyURLString,readonly) NSString * poiSurveyURLString;
@property(getter=_isYelpForSiri,readonly) bool isYelpForSiri;


- (id)initWithPlace:(id)arg1 traits:(id)arg2;
- (id)initWithPlaceResult:(id)arg1 response:(id)arg2 traits:(id)arg3;
- (id)eventName;
- (bool)contactIsMe;
- (id)contactSpokenName;
- (id)contactName;
- (int)contactAddressType;
- (id)areasOfInterest;
- (id)geoAddress;
- (id)geoFenceMapRegion;
- (struct { double x1; double x2; })centerCoordinate;
- (id)spokenNameForLanguage:(id)arg1;
- (bool)_isYelpForSiri;
- (id)_poiSurveyURLString;
- (id)_calloutDisplayName;
- (id)_reviewDisplayName;
- (bool)_showAddReview;
- (bool)_hasMoreReviewAttribution;
- (bool)_showReviewAttribution;
- (id)_photoDisplayName;
- (bool)_showAddPhoto;
- (bool)_hasMorePhotoAttribution;
- (bool)_showPhotoAttribution;
- (id)_infoDisplayName;
- (bool)_hasMoreInfoAttribution;
- (bool)_showInfoAttribution;
- (id)_vendorID;
- (id)_providerURL;
- (bool)_needsAttribution;
- (bool)_hasTelephone;
- (id)_businessURL;
- (id)_flyover;
- (bool)_hasFlyover;
- (int)_resultProviderID;
- (bool)_hasResolvablePartialInformation;
- (id)_placeDataAsData;
- (id)_placeAsData;
- (id)_clientAttributes;
- (id)_placeData;
- (id)_checkInURLs:(id*)arg1;
- (id)_viewDealURLs:(id)arg1 attributionApps:(id*)arg2;
- (id)_reviewLogoPathForScale:(double)arg1;
- (id)_viewReviewURLs:(id)arg1 attributionApps:(id*)arg2;
- (id)_addReviewURLs:(id*)arg1;
- (id)_photoLogoPathForScale:(double)arg1;
- (id)_viewPhotoURLs:(id)arg1 attributionApps:(id*)arg2;
- (id)_addPhotoURLs:(id*)arg1;
- (id)_infoLogoPathForScale:(double)arg1;
- (id)_urlForWritingAReview;
- (id)_urlForReviewWithUID:(id)arg1;
- (id)_arrivalMapRegionForTransportType:(int)arg1;
- (unsigned int)_travelDistanceForTransportType:(int)arg1;
- (unsigned int)_travelTimeForTransportType:(int)arg1;
- (int)_recommendedTransportType;
- (id)_spokenAddressForLanguage:(id)arg1;
- (id)_reviewAttributionURLs:(id*)arg1;
- (id)_photoAttributionURLs:(id*)arg1;
- (id)_infoAttributionURLs:(id*)arg1;
- (id)_yelpID;
- (id)_urlsForAttributionRequirement:(int)arg1 attributionApps:(id*)arg2;
- (bool)_showAddForRequirement:(int)arg1;
- (id)_logoPathForRequirement:(int)arg1 scale:(double)arg2;
- (id)_displayNameForRequirement:(int)arg1;
- (bool)_hasMoreForRequirement:(int)arg1;
- (bool)_showAttributionForRequirement:(int)arg1;
- (id)_urlForType:(int)arg1 withUID:(id)arg2 writeAReview:(bool)arg3 isYelp:(bool)arg4;
- (id)_webURL;
- (id)_urlForPhotoWithUID:(id)arg1;
- (id)_attributionForInfo:(id)arg1;
- (id)_attributionInfoForDisplayRequirement:(int)arg1;
- (id)_operatingHours;
- (bool)_hasOperatingHours;
- (bool)_takesReservations;
- (bool)_hasTakesReservationsAmenity;
- (bool)_goodForKids;
- (bool)_hasGoodForKidsAmenity;
- (bool)_hasDelivery;
- (bool)_hasDeliveryAmenity;
- (bool)_hasAnyAmenities;
- (bool)_hasLocalizedCategoryNamesForType:(unsigned int)arg1;
- (id)_localizedCategoryNamesForType:(unsigned int)arg1;
- (id)_categoryKeys;
- (unsigned int)_priceRange;
- (bool)_hasPriceRange;
- (float)_normalizedUserRatingScore;
- (unsigned int)_sampleSizeForUserRatingScore;
- (bool)_hasUserRatingScore;
- (unsigned long long)_muid;
- (bool)_hasMUID;
- (struct { unsigned long long x1; unsigned long long x2; })_sessionGUID;
- (id)_place;
- (bool)isDisputed;
- (unsigned int)_sequenceNumber;
- (id)_telephone;
- (id)displayMapRegion;
- (id)timezone;
- (id)addressDictionary;
- (id)_roadAccessPoints;
- (struct { double x1; double x2; })coordinate;
- (id)name;
- (bool)isValid;
- (void)dealloc;
- (id)description;

@end

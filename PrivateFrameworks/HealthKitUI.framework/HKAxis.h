/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthKitUI.framework/HealthKitUI
 */

@interface HKAxis : NSObject <HKAxisLabelDataSource, NSCopying> {
    BOOL  _automaticallyFitData;
    <HKAxisLabelDataSource> * _labelDataSource;
    int  _location;
    int  _maxLabels;
    int  _minLabels;
    struct HKLinearTransform { 
        float offset; 
        float scale; 
    }  _pointTransform;
    HKAxisStyle * _style;
    HKCoordinateTransform * _transform;
    <HKZoomScale> * _zoomScale;
}

@property (nonatomic) BOOL automaticallyFitData;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned int hash;
@property (nonatomic) <HKAxisLabelDataSource> *labelDataSource;
@property (nonatomic) int location;
@property (nonatomic) int maxLabels;
@property (nonatomic) int minLabels;
@property (nonatomic) struct HKLinearTransform { float x1; float x2; } pointTransform;
@property (nonatomic, retain) HKAxisStyle *style;
@property (readonly) Class superclass;
@property (nonatomic, retain) HKCoordinateTransform *transform;
@property (nonatomic, retain) <HKZoomScale> *zoomScale;

- (void).cxx_destruct;
- (void)_addTickMarksForPosition:(unsigned int)arg1 axisRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 chartRange:(struct HKRange { float x1; float x2; })arg3 zoomScale:(float)arg4 contentOffset:(struct CGPoint { float x1; float x2; })arg5 toBezierPath:(id)arg6;
- (BOOL)_autoFitPointTransformFromSeriesRanges:(id)arg1 linearTransform:(struct HKLinearTransform { float x1; float x2; })arg2 toChartRange:(struct HKRange { float x1; float x2; })arg3;
- (struct HKRange { float x1; float x2; })_chartRangeForChartRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 zoomScale:(float)arg2 contentOffset:(struct CGPoint { float x1; float x2; })arg3;
- (void)_drawTextBackgroundWithLabels:(id)arg1 font:(id)arg2 offset:(float)arg3 rect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg4 renderView:(id)arg5;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 zoomScale:(float)arg2 contentOffset:(struct CGPoint { float x1; float x2; })arg3 offset:(float)arg4 horizontalAlignment:(int)arg5 renderView:(id)arg6;
- (id)_gridLinesForAxisRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 zoomScale:(float)arg2 contentOffset:(struct CGPoint { float x1; float x2; })arg3;
- (BOOL)_isHorizontal;
- (double)_maxLabelWidthFromLabels:(id)arg1 font:(id)arg2;
- (void)_offsetForChartRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 chartRange:(struct HKRange { float x1; float x2; })arg2 zoomScaleOut:(float*)arg3 contentOffsetOut:(struct CGPoint { float x1; float x2; }*)arg4;
- (void)_renderTickMarksWithChartRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 zoomScale:(float)arg2 contentOffset:(struct CGPoint { float x1; float x2; })arg3 renderView:(id)arg4;
- (id)adjustedRangeForFittedRange:(id)arg1;
- (BOOL)automaticallyFitData;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)drawGridlinesWithChartRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 zoomScale:(float)arg2 contentOffset:(struct CGPoint { float x1; float x2; })arg3 renderView:(id)arg4;
- (void)drawLabelsWithChartRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 zoomScale:(float)arg2 contentOffset:(struct CGPoint { float x1; float x2; })arg3 renderView:(id)arg4;
- (void)enumerateTickCoordinatesInChartRange:(struct HKRange { float x1; float x2; })arg1 zoomScale:(float)arg2 handler:(id /* block */)arg3;
- (id)init;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToAxis:(id)arg1;
- (BOOL)isValid;
- (id)labelDataSource;
- (id)labelsForChartRange:(struct HKRange { float x1; float x2; })arg1 zoomScale:(float)arg2;
- (int)location;
- (int)maxLabels;
- (int)minLabels;
- (struct HKLinearTransform { float x1; float x2; })pointTransform;
- (struct HKLinearTransform { float x1; float x2; })pointTransformFittingValueRange:(id)arg1 toChartRange:(struct HKRange { float x1; float x2; })arg2;
- (struct CGPoint { float x1; float x2; })renderPositionForLabel:(id)arg1 rect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 zoomScale:(float)arg3 contentOffset:(struct CGPoint { float x1; float x2; })arg4 constantOffset:(float)arg5 isHorizontal:(BOOL)arg6;
- (void)setAutomaticallyFitData:(BOOL)arg1;
- (void)setLabelDataSource:(id)arg1;
- (void)setLocation:(int)arg1;
- (void)setMaxLabels:(int)arg1;
- (void)setMinLabels:(int)arg1;
- (void)setPointTransform:(struct HKLinearTransform { float x1; float x2; })arg1;
- (void)setStyle:(id)arg1;
- (void)setTransform:(id)arg1;
- (void)setZoomScale:(id)arg1;
- (id)style;
- (id)transform;
- (id)zoomScale;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/StoreServices.framework/StoreServices
 */

@class NSString, NSData, NSLock, NSNumber;

@interface SSAccount : NSObject <SSXPCCoding, NSCopying> {
    long long _accountKind;
    NSString *_accountName;
    long long _accountScope;
    long long _accountSource;
    bool_active;
    bool_activeLockerAccount;
    long long _availableServiceTypes;
    NSData *_bioToken;
    NSString *_creditsString;
    bool_demo;
    bool_didFallbackToPassword;
    long long _enabledServiceTypes;
    NSString *_firstName;
    NSString *_itunesPassSerialNumber;
    NSString *_lastName;
    NSLock *_lock;
    bool_newCustomer;
    NSString *_secureToken;
    NSString *_storeFrontID;
    NSNumber *_uniqueIdentifier;
}

@property long long accountKind;
@property(copy) NSString * accountName;
@property long long accountScope;
@property long long availableServiceTypes;
@property(getter=isAuthenticated,readonly) bool authenticated;
@property(copy) NSString * creditsString;
@property long long enabledServiceTypes;
@property(copy) NSString * firstName;
@property(copy) NSString * lastName;
@property(getter=isSocialEnabled) bool socialEnabled;
@property(copy) NSString * storeFrontIdentifier;
@property(retain) NSNumber * uniqueIdentifier;
@property long long accountSource;
@property(copy) NSString * secureToken;
@property(getter=isDemoAccount) bool demoAccount;
@property(getter=isActive) bool active;
@property(getter=isActiveLockerAccount) bool activeLockerAccount;
@property(copy) NSString * ITunesPassSerialNumber;
@property(getter=isNewCustomer) bool newCustomer;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;


- (void)removeEnabledServiceTypes:(long long)arg1;
- (void)addEnabledServiceTypes:(long long)arg1;
- (void)setBiometricToken:(id)arg1;
- (id)popBiometricToken;
- (bool)mergeValuesFromAccount:(id)arg1;
- (id)copyLockdownRepresentation;
- (void)setActiveLockerAccount:(bool)arg1;
- (void)removeAvailableServiceTypes:(long long)arg1;
- (bool)isActiveLockerAccount;
- (void)getKeybagSyncDataWithType:(long long)arg1 completionHandler:(id)arg2;
- (void)getITunesMatchStatusWithCompletionBlock:(id)arg1;
- (void)addAvailableServiceTypes:(long long)arg1;
- (void)getTermsAndConditionsWithBlock:(id)arg1;
- (void)getPurchasedItemsForItems:(id)arg1 completionBlock:(id)arg2;
- (void)getDownloadKindsEligibleForContentRestoreWithBlock:(id)arg1;
- (void)acceptTermsAndConditions:(id)arg1 withCompletionBlock:(id)arg2;
- (id)initDemoAccount;
- (void)setSocialEnabled:(bool)arg1;
- (void)setEnabledServiceTypes:(long long)arg1;
- (void)setAvailableServiceTypes:(long long)arg1;
- (void)setNewCustomer:(bool)arg1;
- (void)setDidFallbackToPassword:(bool)arg1;
- (void)setAccountSource:(long long)arg1;
- (void)setAccountScope:(long long)arg1;
- (void)setAccountKind:(long long)arg1;
- (void)setStoreFrontIdentifier:(id)arg1;
- (void)setITunesPassSerialNumber:(id)arg1;
- (void)setCreditsString:(id)arg1;
- (long long)accountSource;
- (bool)isSocialEnabled;
- (bool)didFallbackToPassword;
- (long long)availableServiceTypes;
- (long long)accountKind;
- (id)ITunesPassSerialNumber;
- (id)creditsString;
- (void)_sendBlockingXPCMessage:(id)arg1;
- (void)setSecureToken:(id)arg1;
- (long long)enabledServiceTypes;
- (id)secureToken;
- (long long)accountScope;
- (bool)isDemoAccount;
- (void)setDemoAccount:(bool)arg1;
- (void)setAccountName:(id)arg1;
- (id)storeFrontIdentifier;
- (bool)isNewCustomer;
- (id)accountName;
- (void)setLockdownDictionary:(id)arg1;
- (void)resetTransientData;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (void)setLastName:(id)arg1;
- (void)setFirstName:(id)arg1;
- (id)lastName;
- (id)firstName;
- (bool)isAuthenticated;
- (bool)isActive;
- (id)init;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)uniqueIdentifier;
- (void)setUniqueIdentifier:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)setActive:(bool)arg1;

@end

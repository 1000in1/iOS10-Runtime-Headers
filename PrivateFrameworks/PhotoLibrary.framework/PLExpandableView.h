/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <PLExpandableViewDelegate>;

@interface PLExpandableView : UIView  {
    <PLExpandableViewDelegate> *_delegate;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _collapsingCompletionHandler;


  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _expansionCompletionHandler;

    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _contractedFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _expandedFrame;
    struct CGPoint { 
        double x; 
        double y; 
    } _leftTouchLocation;
    struct CGPoint { 
        double x; 
        double y; 
    } _rightTouchLocation;
    struct CGPoint { 
        double x; 
        double y; 
    } _previousLeftLocation;
    struct CGPoint { 
        double x; 
        double y; 
    } _previousRightLocation;
    unsigned long long _leftTouchIndex;
    unsigned long long _rightTouchIndex;
    double _pinchVelocity;
    double _trackingTimeInterval;
    double _expansionFraction;
    struct { 
        unsigned int state : 3; 
        unsigned int prevState : 3; 
        unsigned int tracking : 1; 
        unsigned int autorotationDisabled : 1; 
        unsigned int animationDisabled : 1; 
        unsigned int updateContractedFrame : 1; 
        unsigned int updateExpandedFrame : 1; 
        unsigned int allowsExpansion : 1; 
        unsigned int delegateWillBeginExpanding : 1; 
        unsigned int delegateWillCompleteExpanding : 1; 
        unsigned int delegateDidCompleteExpanding : 1; 
        unsigned int delegateWillCancelExpanding : 1; 
        unsigned int delegateDidCancelExpanding : 1; 
        unsigned int delegateDidBeginCollapsing : 1; 
        unsigned int delegateWillCompleteCollapsing : 1; 
        unsigned int delegateDidCompleteCollapsing : 1; 
        unsigned int delegateWillCancelCollapsing : 1; 
        unsigned int delegateDidCancelCollapsing : 1; 
        unsigned int delegateExpandedFractionChanged : 1; 
    } _expandFlags;
}

@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contractedFrame;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } expandedFrame;
@property bool allowsExpansion;


- (bool)canCollapse;
- (double)expansionFraction;
- (void)setAllowsExpansion:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })expandedFrame;
- (void)setExpandedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contractedFrame;
- (void)expandWithAnimation:(bool)arg1 completion:(id)arg2;
- (void)collapseWithAnimation:(bool)arg1 completion:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pinchRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inView:(id)arg2 insetTouches:(bool)arg3;
- (void)finishTransition;
- (void)canceledPinch:(id)arg1;
- (void)finishedPinch:(id)arg1;
- (void)continuedPinch:(id)arg1;
- (void)startedPinch:(id)arg1;
- (bool)allowsExpansion;
- (void)finishTransitionToState:(int)arg1;
- (float)completeTrackingPinch:(id)arg1 toState:(int)arg2 duration:(double)arg3;
- (int)snapState:(bool)arg1;
- (float)continueTrackingPinch:(id)arg1;
- (void)notifyExpansionFraction:(float)arg1 force:(bool)arg2;
- (void)beginTrackingPinch:(id)arg1;
- (void)setState:(int)arg1 withDuration:(double)arg2;
- (void)updatePinchState:(id)arg1;
- (bool)_canPinch;
- (void)setExpansionFraction:(double)arg1;
- (void)stateDidChangeFrom:(int)arg1;
- (void)_transitionFromCompleteContract:(int)arg1 withDuration:(double)arg2;
- (void)_transitionFromCancelContract:(int)arg1 withDuration:(double)arg2;
- (void)_transitionFromContracting:(int)arg1 withDuration:(double)arg2;
- (void)_transitionFromExpanded:(int)arg1 withDuration:(double)arg2;
- (void)_transitionFromCancelExpand:(int)arg1 withDuration:(double)arg2;
- (void)_transitionFromCompleteExpand:(int)arg1 withDuration:(double)arg2;
- (void)_transitionFromExpanding:(int)arg1 withDuration:(double)arg2;
- (void)_transitionFromContracted:(int)arg1 withDuration:(double)arg2;
- (void)setContractedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)stateWillChangeTo:(int)arg1;
- (void)_notifyDidCompleteCollapsing;
- (void)_notifyDidCancelCollapsing;
- (void)_notifyWillCompleteCollapsingWithDuration:(double)arg1;
- (void)_notifyWillCancelCollapsingWithDuration:(double)arg1;
- (void)_notifyDidCancelExpanding;
- (void)_notifyWillBeginCollapsing;
- (void)_notifyDidCompleteExpanding;
- (void)_notifyWillCancelExpandingWithDuration:(double)arg1;
- (void)_notifyWillCompleteExpandingWithDuration:(double)arg1;
- (void)_notifyWillBeginExpanding;
- (void)_setAutorotationDisabled:(bool)arg1;
- (int)previousState;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (int)state;
- (void)dealloc;
- (void)willMoveToWindow:(id)arg1;
- (bool)isTracking;
- (void)didMoveToWindow;

@end

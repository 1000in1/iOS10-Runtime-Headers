/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class UIView<PLTilePlaceholderView>, UIImageView, PLExpandableImageView, <PLPhotoTileViewControllerDelegate>, PHCachingImageManager, PHAsset, PLVideoView, PLImageScrollView, UIView, PLPhotoTileBadgeView, UIGestureRecognizer, NSString, NSObject<OS_dispatch_source>, NSArray, PLCommentsViewController, PLTileContainerView, UIImage;

@interface PLPhotoTileViewController : UIViewController <UIScrollViewDelegate, UIGestureRecognizerDelegate, PLCommentsViewControllerDelegate, PLPhotoTileCloudPlaceholderViewDelegate> {
    UIImage *_image;
    UIImage *_pendingImage;
    UIImage *_unscaledImage;
    PHAsset *_modelPhoto;
    PLImageScrollView *_scrollView;
    PLExpandableImageView *_imageView;
    PLVideoView *_videoView;
    UIImageView *_gradientView;
    PLPhotoTileBadgeView *_badgeView;
    UIImageView *_reviewCheckmarkImageView;
    UIView<PLTilePlaceholderView> *_placeholderView;
    bool_currentTileDownloadFinished;
    PLCommentsViewController *_commentsViewController;
    UIGestureRecognizer *_singleTapGestureRecognizer;
    UIGestureRecognizer *_doubleTapGestureRecognizer;
    <PLPhotoTileViewControllerDelegate> *_tileDelegate;
    int _imageOrientation;
    struct CGSize { 
        double width; 
        double height; 
    } _imageSize;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _tileFrame;
    bool_zoomToFillInsteadOfToFit;
    bool_useLessThanMinZoomForZoomedOutTest;
    bool_allowZoomToFill;
    id _orientationDelegate;
    float _cropRectZoomScale;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _cropOverlayRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _cropRect;
    double _doubleTapZoomScale;
    double _minZoomScale;
    double _zoomToFillScale;
    int _mode;
    long long _lastDisplayedOrientation;
    bool_clientIsTemporarilyWallpaper;
    bool_userDidAdjustWallpaper;
    float _wallpaperPortraitZoomScale;
    float _wallpaperLandscapeZoomScale;
    float _zoomScaleBeforeZooming;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _cropRectBeforeDragging;
    bool_force1XCroppedImage;
    bool_forceNativeScreenScale;
    bool_centerContentVertically;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _didEndZoomingBlock;

    NSObject<OS_dispatch_source> *_dispatchTimer;
    double _dispatchStartTime;
    double _dispatchTimeElapsed;
    bool_hasNotedZoom;
    unsigned int _imageIsThumbnail : 1;
    unsigned int _isTVOut : 1;
    unsigned int _zooming : 1;
    unsigned int _autoZooming : 1;
    unsigned int _zoomGesturesEnabled : 1;
    unsigned int _userDidZoom : 1;
    unsigned int _ignoreZoomChange : 1;
    unsigned int _tileParentIsPageController : 1;
    unsigned int _lockedUnderCropOverlay : 1;
    unsigned int _viewDidAppear : 1;
    unsigned int _viewWillAppear : 1;
    unsigned int _didRequestFullSizeImage : 1;
    unsigned int _useZoomScaleForCropRect : 1;
    unsigned int _avalancheBadgeShouldBeHidden : 1;
    unsigned int _badgeShouldBeVisible : 1;
    unsigned int _commentsTableVisible : 1;
    PLTileContainerView *_containerView;
    PHCachingImageManager *__cachingImageManager;
    int _fullSizeImageRequestID;
    NSArray *_customCenterOverlayConstraints;
    bool_wantsCompactLayout;
    bool_reviewing;
    bool_picked;
    bool_shouldHideProgressIndicator;
    UIView *__customCenterOverlay;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _overlayInsets;
}

@property(readonly) PHAsset * photo;
@property(retain) UIImage * thumbnailImage;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } tileFrame;
@property(retain) UIImage * unscaledImage;
@property bool centerContentVertically;
@property struct UIEdgeInsets { double x1; double x2; double x3; double x4; } overlayInsets;
@property bool forceNativeScreenScale;
@property bool force1XCroppedImage;
@property(readonly) PLCommentsViewController * commentsViewController;
@property(readonly) bool commentsTableIsVisible;
@property bool wantsCompactLayout;
@property bool reviewing;
@property bool picked;
@property bool shouldHideProgressIndicator;
@property(setter=_setCustomCenterOverlay:,retain) UIView * _customCenterOverlay;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;

+ (bool)shouldShowPlaceholderForAsset:(id)arg1;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 modelPhoto:(id)arg2 mode:(int)arg3;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 image:(id)arg2 allowZoomToFill:(bool)arg3 mode:(int)arg4;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 imageRef:(struct CGImage { }*)arg2 imageOrientation:(long long)arg3 allowZoomToFill:(bool)arg4 mode:(int)arg5;
+ (struct CGSize { double x1; double x2; })tvOutTileSize;
+ (struct CGSize { double x1; double x2; })tileSize;
+ (bool)_shouldForwardViewWillTransitionToSize;

- (bool)picked;
- (bool)reviewing;
- (void)setWantsCompactLayout:(bool)arg1;
- (bool)wantsCompactLayout;
- (void)setUnscaledImage:(id)arg1;
- (void)setCenterContentVertically:(bool)arg1;
- (bool)centerContentVertically;
- (void)setReviewing:(bool)arg1;
- (void)setLockedUnderCropOverlay:(bool)arg1;
- (void)setAllowsZoomToFill:(bool)arg1;
- (double)currentToDefaultZoomRatio;
- (id)dictionaryWithCroppedImageForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 minimalCropDimension:(double)arg2 withOptions:(int)arg3;
- (void)updateForVisibleOverlays:(bool)arg1;
- (bool)hasFullSizeImage;
- (void)setShouldHideProgressIndicator:(bool)arg1;
- (void)setClientIsWallpaper:(bool)arg1;
- (bool)userDidAdjustWallpaper;
- (id)tileDelegate;
- (id)expandableImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tileFrame;
- (id)initForPageController;
- (void)commentsControllerWillBeginScrolling:(id)arg1;
- (void)commentsControllerDidDisplayUnreadComment:(id)arg1;
- (void)commentsControllerDidExitEditMode:(id)arg1;
- (void)commentsControllerWillEnterEditMode:(id)arg1;
- (void)commentsControllerInactiveAreaWasTapped:(id)arg1;
- (void)_setupReviewCheckmark;
- (void)setReviewing:(bool)arg1 animated:(bool)arg2;
- (void)_adjustZoomForEnteringMode:(bool)arg1;
- (bool)isZoomedOut;
- (void)_adjustScrollViewContentOffsetForInsets;
- (double)minZoomScale;
- (double)zoomToFillScale;
- (void)_setDidEndZoomingBlock:(id)arg1;
- (id)newImageWithCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 minimalCropDimension:(double)arg2 croppedImageData:(id*)arg3 fullScreenImageData:(id*)arg4 fullScreenImage:(struct CGImage {}**)arg5 imageCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg6 intersectCropWithFullRect:(bool)arg7;
- (bool)forceNativeScreenScale;
- (bool)force1XCroppedImage;
- (id)newCGImageBackedUIImage;
- (void)_readOrientation:(long long*)arg1 andSize:(struct CGSize { double x1; double x2; }*)arg2 fromImageData:(id)arg3;
- (void)_handleFullSizeImageRequestResult:(id)arg1 dataUTI:(id)arg2 orientation:(long long)arg3;
- (void)_resetZoomCommon;
- (float)_calculateZoomScale:(bool)arg1 inView:(id)arg2;
- (double)minRotatedScale;
- (void)_performDidEndZoomBlock;
- (void)initializeCommentsTable;
- (void)setBadgeVisible:(bool)arg1;
- (bool)tileIsOnScreen;
- (void)_updateAggdKeys;
- (void)_setDefaultZoomScale;
- (void)updateZoomScales;
- (void)_updateModelPhotoWithImage:(id)arg1;
- (void)_updateReviewCheckmark;
- (void)_setupBadgeView;
- (void)_updatePlaceholderVisibility;
- (bool)shouldHideProgressIndicator;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })overlayInsets;
- (bool)_clientIsWallpaper;
- (void)_requestFullSizeImage;
- (void)_removePlaceholderView;
- (void)_updatePlaceholderViewAnimated:(bool)arg1;
- (void)_installSubview:(id)arg1;
- (bool)photoShouldHaveAvalancheBadge;
- (void)_repositionBadgeView;
- (void)_showBadgeViewIfAppropriate;
- (void)_updateSubviewOrdering;
- (id)_customCenterOverlay;
- (void)_setCustomCenterOverlay:(id)arg1;
- (void)_updatePlaceholderImageRect;
- (void)_updateVideoViewForModelPhoto;
- (void)_teardownDispatchTimer;
- (id)initWithModelPhoto:(id)arg1 image:(id)arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 isThumbnail:(bool)arg4 imageOrientation:(int)arg5 allowZoomToFill:(bool)arg6 mode:(int)arg7;
- (void)_configureViews;
- (void)_setImage:(id)arg1 isThumbnail:(bool)arg2 preserveFrame:(bool)arg3;
- (void)setTileFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setPhoto:(id)arg1;
- (void)_centerImageInScrollView;
- (void)_viewWillMoveToSuperView:(id)arg1;
- (void)retryDownload;
- (id)_newOriginalImageForPickerFromCachedData;
- (id)unscaledImage;
- (void)noteParentViewControllerDidDisappear;
- (void)setOverlayInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setCropOverlayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)setForce1XCroppedImage:(bool)arg1;
- (void)setForceNativeScreenScale:(bool)arg1;
- (void)setBadgeVisible:(bool)arg1 animated:(bool)arg2;
- (void)zoomToScale:(double)arg1 animated:(bool)arg2 completionBlock:(id)arg3;
- (double)defaultZoomScale;
- (double)zoomToFitScale;
- (double)currentToMinZoomRatio;
- (bool)isTVOut;
- (void)setFullSizeImage:(id)arg1;
- (void)installVideoOverlay:(id)arg1;
- (void)resetZoom;
- (void)ensureFullSizeImageLoaded;
- (void)updateAfterCollapse;
- (id)commentsViewController;
- (bool)commentsTableIsVisible;
- (void)removeCommentsTable;
- (void)setZoomingGesturesEnabled:(bool)arg1;
- (void)setCommentsTableVisibility:(bool)arg1 duration:(double)arg2;
- (id)commentsView;
- (void)forceZoomingGesturesEnabled;
- (void)refreshTileWithFullScreenImage:(id)arg1 modelPhoto:(id)arg2;
- (bool)photoShouldHaveHDRBadge;
- (void)updateAfterZoomTransitionWithImage:(id)arg1;
- (void)showContentView;
- (void)hideContentView;
- (void)updateCenterOverlay;
- (void)cancelFullSizeImageRequest;
- (void)setAvalancheBadgesHidden:(bool)arg1;
- (void)setOrientationDelegate:(id)arg1;
- (void)setTileDelegate:(id)arg1;
- (void)setTVOut:(bool)arg1;
- (id)initWithModelPhoto:(id)arg1 thumbnailImage:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (void)didLoadImage;
- (void)showErrorPlaceholderView;
- (void)updateCloudDownloadProgress:(double)arg1;
- (id)cachingImageManager;
- (void)_handleSingleTap:(id)arg1;
- (void)_updateContentInset;
- (void)_handleDoubleTap:(id)arg1;
- (void)setPicked:(bool)arg1;
- (void)setVideoView:(id)arg1;
- (id)videoView;
- (void)setThumbnailImage:(id)arg1;
- (id)photo;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (id)image;
- (id)init;
- (void)dealloc;
- (id)description;
- (id)thumbnailImage;
- (bool)allowsEditing;
- (id)imageView;
- (id)scrollView;
- (void)updateViewConstraints;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)willRotateToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewWillAppear:(bool)arg1;
- (bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (void)loadView;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (void)setZoomScale:(float)arg1;
- (struct CGSize { double x1; double x2; })scrollView:(id)arg1 contentSizeForZoomScale:(double)arg2 withProposedSize:(struct CGSize { double x1; double x2; })arg3;
- (void)viewDidLayoutSubviews;
- (void)setGesturesEnabled:(bool)arg1;
- (bool)gesturesEnabled;
- (long long)_imageOrientation;
- (int)imageOrientation;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (id)viewForZoomingInScrollView:(id)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;

@end

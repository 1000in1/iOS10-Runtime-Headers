/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing
 */

@class NSString, NSURL, NSURLSession, HSFairPlayInfo, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, HSConnectionConfiguration, HSConnectionStream;

@interface HSConnection : NSObject  {
    HSConnectionConfiguration *_configuration;
    long long _connectionState;
    HSConnectionStream *_connectionStream;
    long long _connectionType;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSObject<OS_dispatch_source> *_activityTimerSource;
    NSURLSession *_connectionSession;
    boolauthenticationRequired;
    booltokenCheckRequired;
    bool_tokenCheckRequred;
    unsigned int basePlaylistContainerID;
    unsigned int databaseID;
    unsigned int databaseRevision;
    unsigned int sessionID;
    unsigned int _interfaceID;
    unsigned int _controlKey;
    unsigned int _controlPort;
    unsigned int _promptID;
    HSFairPlayInfo *fairPlayInfo;
    NSString *homeSharingGroupID;
    NSString *password;
    NSString *username;
}

@property(readonly) NSURL * baseURL;
@property(readonly) long long connectionType;
@property long long connectionState;
@property(getter=isAuthenticationRequired) bool authenticationRequired;
@property(getter=isTokenCheckRequired,readonly) bool tokenCheckRequred;
@property(retain) HSFairPlayInfo * fairPlayInfo;
@property(copy) NSString * homeSharingGroupID;
@property(copy) NSString * username;
@property(copy) NSString * password;
@property unsigned int databaseID;
@property unsigned int databaseRevision;
@property unsigned int basePlaylistContainerID;
@property unsigned int sessionID;
@property unsigned int interfaceID;
@property unsigned int controlKey;
@property unsigned int controlPort;
@property unsigned int promptID;
@property bool tokenCheckRequired;

+ (void)_scheduleDialogResetIfNeeded;

- (bool)isTokenCheckRequired;
- (bool)tokenCheckRequired;
- (long long)connectionType;
- (id)signedRequestFromURLRequest:(id)arg1;
- (id)newControlConnection;
- (void)connectWithCompletionHandler:(id)arg1;
- (void)setControlKey:(unsigned int)arg1;
- (void)setControlPort:(unsigned int)arg1;
- (void)setInterfaceID:(unsigned int)arg1;
- (id)_onSerialQueue_connectionSession;
- (void)_onSerialQueue_sendRequest:(id)arg1 withInternalResponseHandler:(id)arg2;
- (void)_setupControlConnectionWithInternalConnectionCompletionHandler:(id)arg1;
- (void)checkForDatabaseUpdatesWithCompletionHandler:(id)arg1;
- (void)sendRequest:(id)arg1 withResponseHandler:(id)arg2;
- (unsigned int)basePlaylistContainerID;
- (void)setBasePlaylistContainerID:(unsigned int)arg1;
- (void)_continueFPSetupNegotiationWithData:(id)arg1 internalConnectionCompletionHandler:(id)arg2;
- (unsigned int)_sapVersionForConnectionType;
- (unsigned int)controlKey;
- (unsigned int)controlPort;
- (id)fairPlayInfo;
- (void)_sendRequest:(id)arg1 withInternalResponseHandler:(id)arg2;
- (void)setTokenCheckRequired:(bool)arg1;
- (void)_loadDatabaseWithInternalConnectionCompletionHandler:(id)arg1;
- (void)setConnectionState:(long long)arg1;
- (long long)connectionState;
- (void)setFairPlayInfo:(id)arg1;
- (id)initWithBaseURL:(id)arg1 connectionType:(long long)arg2;
- (unsigned int)databaseRevision;
- (void)setDatabaseRevision:(unsigned int)arg1;
- (void)setHomeSharingGroupID:(id)arg1;
- (id)homeSharingGroupID;
- (unsigned int)interfaceID;
- (id)initWithConfiguration:(id)arg1 connectionType:(long long)arg2;
- (unsigned int)promptID;
- (void)setPromptID:(unsigned int)arg1;
- (unsigned int)databaseID;
- (void)setDatabaseID:(unsigned int)arg1;
- (void)setPassword:(id)arg1;
- (void)setUsername:(id)arg1;
- (id)username;
- (id)initWithBaseURL:(id)arg1;
- (id)password;
- (id)baseURL;
- (unsigned int)sessionID;
- (void)setSessionID:(unsigned int)arg1;
- (void)dealloc;
- (void).cxx_destruct;
- (void)disconnect;
- (void)setAuthenticationRequired:(bool)arg1;
- (bool)isAuthenticationRequired;

@end

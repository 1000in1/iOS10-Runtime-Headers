/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CVML.framework/CVML
 */

@interface CVMLHumanDetector : CVMLDetector {
    struct TemplateObjectDetectorApply { int x1; int x2; int x3; int x4; bool x5; float x6[2]; float x7[2]; float x8; bool x9; bool x10; float x11; float x12; int x13; float x14; struct hog { struct gradient { } x_15_1_1; } x15; struct ChnsFeat { int x_16_1_1; int x_16_1_2; struct hog { struct gradient { } x_3_2_1; } x_16_1_3; struct gradient { } x_16_1_4; } x16; int x17; struct vector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_18_1_1; struct DTreeApply {} *x_18_1_2; struct __compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_3_2_1; } x_18_1_3; } x18; struct vector<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > > { struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_19_1_1; struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_19_1_2; struct __compressed_pair<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > *, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > > { struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_3_2_1; } x_19_1_3; } x19; struct vector<float, std::__1::allocator<float> > { float *x_20_1_1; float *x_20_1_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_2_1; } x_20_1_3; } x20; struct vector<vision::hum::DTreeNode *, std::__1::allocator<vision::hum::DTreeNode *> > { struct DTreeNode {} **x_21_1_1; struct DTreeNode {} **x_21_1_2; struct __compressed_pair<vision::hum::DTreeNode **, std::__1::allocator<vision::hum::DTreeNode *> > { struct DTreeNode {} **x_3_2_1; } x_21_1_3; } x21; float x22; struct adaBoostApply { struct vector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_1_2_1; struct DTreeApply {} *x_1_2_2; struct __compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_3_3_1; } x_1_2_3; } x_23_1_1; } x23; struct linearSVMApply { struct vector<float, std::__1::allocator<float> > { float *x_1_2_1; float *x_1_2_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_3_1; } x_1_2_3; } x_24_1_1; float x_24_1_2; struct vector<float, std::__1::allocator<float> > { float *x_3_2_1; float *x_3_2_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_3_1; } x_3_2_3; } x_24_1_3; } x24; id x25; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void x41; void*x42; out void*x43; int x44; void*x45; double x46; void*x47; char *x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void x62; void*x63; out void*x64; int x65; void*x66; double x67; void*x68; char *x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void x83; void*x84; out void*x85; int x86; void*x87; double x88; void*x89; char *x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; BOOL x104; void*x105; out void*x106; in void*x107; short x108; void*x109; void*x110; void*x111; void*x112; void*x113; void x114; void*x115; out void*x116; int x117; void*x118; void*x119; void*x120; long x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void x135; void*x136; out void*x137; int x138; void*x139; double x140; void*x141; char *x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void x156; void*x157; out void*x158; int x159; void*x160; double x161; void*x162; char *x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void x177; void*x178; out void*x179; void*x180; void*x181; long x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void x198; void*x199; out void*x200; int x201; void*x202; double x203; void*x204; char *x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void x219; void*x220; out void*x221; int x222; void*x223; double x224; void*x225; char *x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void x294; void*x295; out void*x296; int x297; void*x298; double x299; void*x300; char *x301; void*x302; void*x303; void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; long x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; char *x323; void*x324; void*x325; void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void x337; void*x338; out void*x339; int x340; void*x341; double x342; void*x343; char *x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void x358; void*x359; out void*x360; int x361; void*x362; double x363; void*x364; char *x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void*x375; void*x376; long x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; double x385; void*x386; char *x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; unsigned int x401/* : ? */; long x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; const void*x417; void*x418; void*x419; BOOL x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; out void*x434; const void*x435; void*x436; void*x437; float x438; void*x439; long x440; void*x441; out void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; short x451; void*x452; void*x453; void*x454; double x455; void*x456; SEL x457; void*x458; SEL x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; SEL x467; void*x468; SEL x469; void*x470; void*x471; void*x472; long x473; void*x474; long x475; void*x476; out void*x477; BOOL x478; void*x479; void*x480; void*x481; void*x482; void*x483; out void*x484; const void*x485; void*x486; void*x487; float x488; void*x489; long x490; void*x491; out void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; struct x505; void*x506; void*x507; void*x508; float x509; void*x510; long x511; void*x512; out void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; char *x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; float x540; void*x541; long x542; void*x543; out void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; char *x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; short x571; void*x572; void*x573; void*x574; const void*x575; void*x576; void*x577; BOOL x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; BOOL x588; void*x589; out void*x590; void*x591; void*x592; void*x593; void*x594; const void*x595; void*x596; void*x597; short x598; void*x599; short x600; void*x601; void*x602; void*x603; double x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; int x612; void*x613; const void*x614; void*x615; void*x616; float x617; void*x618; long x619; void*x620; out void*x621; void*x622; void*x623; void*x624; void*x625; void*x626; void*x627; char *x628; void*x629; void*x630; void*x631; void*x632; void*x633; short x634; void*x635; void*x636; void*x637; double x638; void*x639; SEL x640; void*x641; SEL x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; SEL x650; void*x651; SEL x652; void*x653; void*x654; void*x655; long x656; void*x657; long x658; void*x659; out void*x660; BOOL x661; void*x662; void*x663; void*x664; void*x665; void*x666; out void*x667; const void*x668; void*x669; void*x670; float x671; void*x672; long x673; void*x674; out void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; struct x688; void*x689; void*x690; void*x691; float x692; void*x693; long x694; void*x695; out void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; char *x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; void*x716; void*x717; void*x718; void*x719; void*x720; void*x721; void*x722; } * mHumanDetectorAlgorithmImpl_;
}

- (void)dealloc;
- (id)initWithOptions:(id)arg1 error:(id*)arg2;
- (id)processWithOptions:(id)arg1 regionOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 warningRecorder:(id)arg3 error:(id*)arg4;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSArray, NSString, VKStyleManager, <VKLabelModelDelegate>;

@interface VKLabelModel : VKModelObject <LabelManagerDelegate, GEOResourceManifestTileGroupObserver, VKMapLayer, VKStyleManagerObserver, VKMapModeObserver> {
    bool_debugSkipLabels;
    <VKLabelModelDelegate> *_delegate;
    bool_drawLabels;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id _observerIsReadyHook;

    struct shared_ptr<vk::LabelManager> { 
        struct LabelManager {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _labelManager;
    int _layoutStamp;
    struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { 
        struct shared_ptr<vk::LabelMapTile> {} *__begin_; 
        struct shared_ptr<vk::LabelMapTile> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { 
            struct shared_ptr<vk::LabelMapTile> {} *__first_; 
        } __end_cap_; 
    } _currentTiles;
    bool_inRealistic;
    bool_shouldModifyLabelsOnRoutes;
}

@property <VKLabelModelDelegate> * delegate;
@property bool drawLabels;
@property bool localizeLabels;
@property long long labelScaleFactor;
@property bool labelMarkerSelectionEnabled;
@property(readonly) struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x1; struct __shared_weak_count {} *x2; } labelManager;
@property long long shieldSize;
@property long long navigationShieldSize;
@property long long shieldIdiom;
@property bool showsPointsOfInterest;
@property bool shouldModifyLabelsOnRoutes;
@property(retain) NSArray * externalTrafficIncidents;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) VKStyleManager * styleManager;

+ (bool)reloadOnStylesheetChange;

- (bool)drawLabels;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned long long x4; unsigned char x5; long long x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; boolx34; boolx35; boolx36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; struct Matrix<double, 3, 1> { double x_40_1_1[3]; } x40; struct Matrix<double, 3, 1> { double x_41_1_1[3]; } x41; struct Matrix<double, 3, 1> { double x_42_1_1[3]; } x42; double x43; double x44; double x45; double x46; double x47; float x48; struct { double x_49_1_1[4][4]; } x49; struct Matrix<double, 4, 4> { double x_50_1_1[16]; } x50; struct CGSize { double x_51_1_1; double x_51_1_2; } x51; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_52_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_52_1_2; } x52; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_53_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_53_1_2; } x53; float x54; float x55; float x56; struct LabelAngle { unsigned char x_57_1_1; } x57; unsigned int x58; double x59[5]; double x60; int x61; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_62_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_62_1_3; } x62; struct set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_63_1_1; } x63; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_64_1_1; unsigned int x_64_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_64_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_64_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_64_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_64_1_6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_7_2_1; } x_64_1_7; boolx_64_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_64_1_9; } x64; struct LabelPool { unsigned long long x_65_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_65_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_65_1_3; unsigned long long x_65_1_4; } x65; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_66_1_1; struct shared_ptr<vk::InfoLabel> {} *x_66_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_66_1_3; } x66; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_67_1_1; struct InfoLabel {} **x_67_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_67_1_3; } x67; struct FontAtlas { int (**x_68_1_1)(); int x_68_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_68_1_3; struct FontAtlasCell {} *x_68_1_4; struct FontAtlasCell {} *x_68_1_5; int x_68_1_6; struct CGColor {} *x_68_1_7; struct CGContext {} *x_68_1_8; void *x_68_1_9; unsigned int x_68_1_10; unsigned int x_68_1_11; struct FontGlyphCache {} *x_68_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_68_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_68_1_14; } x68; struct LabelMesh { int (**x_69_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_69_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_69_1_3; struct FontAtlasBase {} *x_69_1_4; boolx_69_1_5; unsigned long long x_69_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_69_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_69_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_69_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_69_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_69_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_69_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_69_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_69_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_69_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_69_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_69_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_69_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_69_1_19; unsigned long long x_69_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_69_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_69_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_69_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_69_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_69_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_69_1_26; unsigned long long x_69_1_27; } x69; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_70_1_1; float x_70_1_2; boolx_70_1_3; long long x_70_1_4; long long x_70_1_5; unsigned long long x_70_1_6; float x_70_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_70_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_70_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_70_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_70_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_70_1_12; } x70; struct LabelCollider { struct LabelManager {} *x_71_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_71_1_2; float x_71_1_3; float x_71_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_71_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_71_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_71_1_7; unsigned int x_71_1_8; boolx_71_1_9; boolx_71_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_71_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned long long x_12_2_1; unsigned long long x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_71_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned long long x_13_2_1; unsigned long long x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_71_1_13; } x71; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_72_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_72_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_72_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_72_1_4; boolx_72_1_5; } x72; unsigned long long x73; unsigned long long x74; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_76_1_1; struct shared_ptr<vk::LabelIcon> {} *x_76_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_76_1_3; } x76; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_77_1_1; struct __shared_weak_count {} *x_77_1_2; } x77; unsigned int x78; double x79; double x80; boolx81; float x82; int x83; unsigned long long x84; double x85; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_86_1_1; struct __shared_weak_count {} *x_86_1_2; } x86; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_87_1_1; struct __shared_weak_count {} *x_87_1_2; } x87; struct LabelIdentifier { unsigned int x_88_1_1; } x88; boolx89; long long x90; long long x91; float x92; long long x93; boolx94; boolx95; boolx96; boolx97; int x98; int x99; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_100_1_1)(); id x_100_1_2; struct _retain_objc { } x_100_1_3; struct _release_objc { } x_100_1_4; } x100; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_101_1_1)(); id x_101_1_2; struct _retain_objc { } x_101_1_3; struct _release_objc { } x_101_1_4; } x101; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_102_1_1)(); id x_102_1_2; struct _retain_objc { } x_102_1_3; struct _release_objc { } x_102_1_4; } x102; struct LabelNavTrafficSupport { struct LabelManager {} *x_103_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_103_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_103_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_103_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_103_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_103_1_6; boolx_103_1_7; } x103; boolx104; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_105_1_1; struct shared_ptr<vk::NavLabel> {} *x_105_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_105_1_3; } x105; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_106_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_106_1_2; } x106; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_107_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_107_1_2; } x107; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_108_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_108_1_2; } x108; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_109_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_109_1_2; } x109; }*)arg1 pendingArtworkIsReady:(bool)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned long long x4; unsigned char x5; long long x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; boolx34; boolx35; boolx36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; struct Matrix<double, 3, 1> { double x_40_1_1[3]; } x40; struct Matrix<double, 3, 1> { double x_41_1_1[3]; } x41; struct Matrix<double, 3, 1> { double x_42_1_1[3]; } x42; double x43; double x44; double x45; double x46; double x47; float x48; struct { double x_49_1_1[4][4]; } x49; struct Matrix<double, 4, 4> { double x_50_1_1[16]; } x50; struct CGSize { double x_51_1_1; double x_51_1_2; } x51; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_52_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_52_1_2; } x52; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_53_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_53_1_2; } x53; float x54; float x55; float x56; struct LabelAngle { unsigned char x_57_1_1; } x57; unsigned int x58; double x59[5]; double x60; int x61; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_62_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_62_1_3; } x62; struct set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_63_1_1; } x63; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_64_1_1; unsigned int x_64_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_64_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_64_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_64_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_64_1_6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_7_2_1; } x_64_1_7; boolx_64_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_64_1_9; } x64; struct LabelPool { unsigned long long x_65_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_65_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_65_1_3; unsigned long long x_65_1_4; } x65; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_66_1_1; struct shared_ptr<vk::InfoLabel> {} *x_66_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_66_1_3; } x66; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_67_1_1; struct InfoLabel {} **x_67_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_67_1_3; } x67; struct FontAtlas { int (**x_68_1_1)(); int x_68_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_68_1_3; struct FontAtlasCell {} *x_68_1_4; struct FontAtlasCell {} *x_68_1_5; int x_68_1_6; struct CGColor {} *x_68_1_7; struct CGContext {} *x_68_1_8; void *x_68_1_9; unsigned int x_68_1_10; unsigned int x_68_1_11; struct FontGlyphCache {} *x_68_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_68_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_68_1_14; } x68; struct LabelMesh { int (**x_69_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_69_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_69_1_3; struct FontAtlasBase {} *x_69_1_4; boolx_69_1_5; unsigned long long x_69_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_69_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_69_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_69_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_69_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_69_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_69_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_69_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_69_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_69_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_69_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_69_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_69_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_69_1_19; unsigned long long x_69_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_69_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_69_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_69_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_69_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_69_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_69_1_26; unsigned long long x_69_1_27; } x69; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_70_1_1; float x_70_1_2; boolx_70_1_3; long long x_70_1_4; long long x_70_1_5; unsigned long long x_70_1_6; float x_70_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_70_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_70_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_70_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_70_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_70_1_12; } x70; struct LabelCollider { struct LabelManager {} *x_71_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_71_1_2; float x_71_1_3; float x_71_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_71_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_71_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_71_1_7; unsigned int x_71_1_8; boolx_71_1_9; boolx_71_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_71_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned long long x_12_2_1; unsigned long long x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_71_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned long long x_13_2_1; unsigned long long x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_71_1_13; } x71; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_72_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_72_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_72_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_72_1_4; boolx_72_1_5; } x72; unsigned long long x73; unsigned long long x74; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_76_1_1; struct shared_ptr<vk::LabelIcon> {} *x_76_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_76_1_3; } x76; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_77_1_1; struct __shared_weak_count {} *x_77_1_2; } x77; unsigned int x78; double x79; double x80; boolx81; float x82; int x83; unsigned long long x84; double x85; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_86_1_1; struct __shared_weak_count {} *x_86_1_2; } x86; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_87_1_1; struct __shared_weak_count {} *x_87_1_2; } x87; struct LabelIdentifier { unsigned int x_88_1_1; } x88; boolx89; long long x90; long long x91; float x92; long long x93; boolx94; boolx95; boolx96; boolx97; int x98; int x99; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_100_1_1)(); id x_100_1_2; struct _retain_objc { } x_100_1_3; struct _release_objc { } x_100_1_4; } x100; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_101_1_1)(); id x_101_1_2; struct _retain_objc { } x_101_1_3; struct _release_objc { } x_101_1_4; } x101; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_102_1_1)(); id x_102_1_2; struct _retain_objc { } x_102_1_3; struct _release_objc { } x_102_1_4; } x102; struct LabelNavTrafficSupport { struct LabelManager {} *x_103_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_103_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_103_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_103_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_103_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_103_1_6; boolx_103_1_7; } x103; boolx104; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_105_1_1; struct shared_ptr<vk::NavLabel> {} *x_105_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_105_1_3; } x105; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_106_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_106_1_2; } x106; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_107_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_107_1_2; } x107; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_108_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_108_1_2; } x108; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_109_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_109_1_2; } x109; }*)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned long long x4; unsigned char x5; long long x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; boolx34; boolx35; boolx36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; struct Matrix<double, 3, 1> { double x_40_1_1[3]; } x40; struct Matrix<double, 3, 1> { double x_41_1_1[3]; } x41; struct Matrix<double, 3, 1> { double x_42_1_1[3]; } x42; double x43; double x44; double x45; double x46; double x47; float x48; struct { double x_49_1_1[4][4]; } x49; struct Matrix<double, 4, 4> { double x_50_1_1[16]; } x50; struct CGSize { double x_51_1_1; double x_51_1_2; } x51; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_52_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_52_1_2; } x52; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_53_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_53_1_2; } x53; float x54; float x55; float x56; struct LabelAngle { unsigned char x_57_1_1; } x57; unsigned int x58; double x59[5]; double x60; int x61; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_62_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_62_1_3; } x62; struct set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_63_1_1; } x63; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_64_1_1; unsigned int x_64_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_64_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_64_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_64_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_64_1_6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_7_2_1; } x_64_1_7; boolx_64_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_64_1_9; } x64; struct LabelPool { unsigned long long x_65_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_65_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_65_1_3; unsigned long long x_65_1_4; } x65; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_66_1_1; struct shared_ptr<vk::InfoLabel> {} *x_66_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_66_1_3; } x66; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_67_1_1; struct InfoLabel {} **x_67_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_67_1_3; } x67; struct FontAtlas { int (**x_68_1_1)(); int x_68_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_68_1_3; struct FontAtlasCell {} *x_68_1_4; struct FontAtlasCell {} *x_68_1_5; int x_68_1_6; struct CGColor {} *x_68_1_7; struct CGContext {} *x_68_1_8; void *x_68_1_9; unsigned int x_68_1_10; unsigned int x_68_1_11; struct FontGlyphCache {} *x_68_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_68_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_68_1_14; } x68; struct LabelMesh { int (**x_69_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_69_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_69_1_3; struct FontAtlasBase {} *x_69_1_4; boolx_69_1_5; unsigned long long x_69_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_69_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_69_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_69_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_69_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_69_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_69_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_69_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_69_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_69_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_69_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_69_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_69_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_69_1_19; unsigned long long x_69_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_69_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_69_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_69_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_69_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_69_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_69_1_26; unsigned long long x_69_1_27; } x69; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_70_1_1; float x_70_1_2; boolx_70_1_3; long long x_70_1_4; long long x_70_1_5; unsigned long long x_70_1_6; float x_70_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_70_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_70_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_70_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_70_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_70_1_12; } x70; struct LabelCollider { struct LabelManager {} *x_71_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_71_1_2; float x_71_1_3; float x_71_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_71_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_71_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_71_1_7; unsigned int x_71_1_8; boolx_71_1_9; boolx_71_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_71_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned long long x_12_2_1; unsigned long long x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_71_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned long long x_13_2_1; unsigned long long x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_71_1_13; } x71; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_72_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_72_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_72_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_72_1_4; boolx_72_1_5; } x72; unsigned long long x73; unsigned long long x74; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_76_1_1; struct shared_ptr<vk::LabelIcon> {} *x_76_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_76_1_3; } x76; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_77_1_1; struct __shared_weak_count {} *x_77_1_2; } x77; unsigned int x78; double x79; double x80; boolx81; float x82; int x83; unsigned long long x84; double x85; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_86_1_1; struct __shared_weak_count {} *x_86_1_2; } x86; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_87_1_1; struct __shared_weak_count {} *x_87_1_2; } x87; struct LabelIdentifier { unsigned int x_88_1_1; } x88; boolx89; long long x90; long long x91; float x92; long long x93; boolx94; boolx95; boolx96; boolx97; int x98; int x99; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_100_1_1)(); id x_100_1_2; struct _retain_objc { } x_100_1_3; struct _release_objc { } x_100_1_4; } x100; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_101_1_1)(); id x_101_1_2; struct _retain_objc { } x_101_1_3; struct _release_objc { } x_101_1_4; } x101; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_102_1_1)(); id x_102_1_2; struct _retain_objc { } x_102_1_3; struct _release_objc { } x_102_1_4; } x102; struct LabelNavTrafficSupport { struct LabelManager {} *x_103_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_103_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_103_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_103_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_103_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_103_1_6; boolx_103_1_7; } x103; boolx104; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_105_1_1; struct shared_ptr<vk::NavLabel> {} *x_105_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_105_1_3; } x105; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_106_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_106_1_2; } x106; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_107_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_107_1_2; } x107; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_108_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_108_1_2; } x108; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_109_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_109_1_2; } x109; }*)arg1 setNeedsDisplay:(bool)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<vk::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; id x3; unsigned long long x4; unsigned char x5; long long x6; boolx7; boolx8; boolx9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; boolx21; boolx22; boolx23; boolx24; boolx25; boolx26; boolx27; boolx28; boolx29; boolx30; boolx31; boolx32; boolx33; boolx34; boolx35; boolx36; struct Matrix<double, 3, 1> { double x_37_1_1[3]; } x37; struct Matrix<double, 3, 1> { double x_38_1_1[3]; } x38; struct Matrix<double, 3, 1> { double x_39_1_1[3]; } x39; struct Matrix<double, 3, 1> { double x_40_1_1[3]; } x40; struct Matrix<double, 3, 1> { double x_41_1_1[3]; } x41; struct Matrix<double, 3, 1> { double x_42_1_1[3]; } x42; double x43; double x44; double x45; double x46; double x47; float x48; struct { double x_49_1_1[4][4]; } x49; struct Matrix<double, 4, 4> { double x_50_1_1[16]; } x50; struct CGSize { double x_51_1_1; double x_51_1_2; } x51; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_52_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_52_1_2; } x52; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_53_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_53_1_2; } x53; float x54; float x55; float x56; struct LabelAngle { unsigned char x_57_1_1; } x57; unsigned int x58; double x59[5]; double x60; int x61; struct vector<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_62_1_1; struct shared_ptr<vk::LabelMapTile> {} *x_62_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct shared_ptr<vk::LabelMapTile> {} *x_3_2_1; } x_62_1_3; } x62; struct set<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree<std::__1::shared_ptr<vk::LabelMapTile>, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> >, std::__1::allocator<std::__1::shared_ptr<vk::LabelMapTile> > > { struct __tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<vk::LabelMapTile>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<vk::LabelMapTile> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_63_1_1; } x63; struct InfoLabelFeaturePool { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_64_1_1; unsigned int x_64_1_2; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_3_2_1; struct __shared_weak_count {} *x_3_2_2; } x_64_1_3; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::RoadLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_4_2_1; } x_64_1_4; struct set<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > >, std::__1::allocator<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { struct __tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> >::FeatureLess<geo::fast_shared_ptr<vk::LabelFeatureThunk<vk::PointLabelFeature, GEOFeature, geo::_retain_ptr<GEOFeature *, geo::_retain_GEOFeature, geo::_release_GEOFeature, geo::_hash_ptr, geo::_equal_ptr> > > > > { unsigned long long x_3_4_1; } x_1_3_3; } x_5_2_1; } x_64_1_5; struct unordered_map<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry, std::__1::hash<GEOVectorTile *>, std::__1::equal_to<GEOVectorTile *>, std::__1::allocator<std::__1::pair<GEOVectorTile *const, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct __hash_table<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true>, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> *> { struct __hash_node<std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::hash<GEOVectorTile *>, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOVectorTile *, std::__1::__hash_value_type<GEOVectorTile *, vk::InfoLabelFeaturePool::TileFeatureValueEntry>, std::__1::equal_to<GEOVectorTile *>, true> > { float x_4_4_1; } x_1_3_4; } x_6_2_1; } x_64_1_6; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_7_2_1; } x_64_1_7; boolx_64_1_8; struct vector<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_1; struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_9_2_2; struct __compressed_pair<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > { struct _retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {} *x_3_3_1; } x_9_2_3; } x_64_1_9; } x64; struct LabelPool { unsigned long long x_65_1_1; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::weak_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_2_2_1; } x_65_1_2; struct map<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel>, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, std::__1::allocator<std::__1::pair<const std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> > > > { struct __tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::__value_type<std::__1::pair<unsigned long long, vk::LabelIdentifier>, std::__1::shared_ptr<vk::InfoLabel> >, std::__1::less<std::__1::pair<unsigned long long, vk::LabelIdentifier> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_3_2_1; } x_65_1_3; unsigned long long x_65_1_4; } x65; struct vector<std::__1::shared_ptr<vk::InfoLabel>, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_66_1_1; struct shared_ptr<vk::InfoLabel> {} *x_66_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::InfoLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::InfoLabel> > > { struct shared_ptr<vk::InfoLabel> {} *x_3_2_1; } x_66_1_3; } x66; struct vector<vk::InfoLabel *, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_67_1_1; struct InfoLabel {} **x_67_1_2; struct __compressed_pair<vk::InfoLabel **, std::__1::allocator<vk::InfoLabel *> > { struct InfoLabel {} **x_3_2_1; } x_67_1_3; } x67; struct FontAtlas { int (**x_68_1_1)(); int x_68_1_2; struct vector<std::__1::shared_ptr<vk::FontAtlasPage>, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_1; struct shared_ptr<vk::FontAtlasPage> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::FontAtlasPage> *, std::__1::allocator<std::__1::shared_ptr<vk::FontAtlasPage> > > { struct shared_ptr<vk::FontAtlasPage> {} *x_3_3_1; } x_3_2_3; } x_68_1_3; struct FontAtlasCell {} *x_68_1_4; struct FontAtlasCell {} *x_68_1_5; int x_68_1_6; struct CGColor {} *x_68_1_7; struct CGContext {} *x_68_1_8; void *x_68_1_9; unsigned int x_68_1_10; unsigned int x_68_1_11; struct FontGlyphCache {} *x_68_1_12; struct PendingFreeCellEntry { struct shared_ptr<ggl::RenderTransaction> { struct RenderTransaction {} *x_1_3_1; struct __shared_weak_count {} *x_1_3_2; } x_13_2_1; struct vector<vk::FontAtlasCell *, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_2_3_1; struct FontAtlasCell {} **x_2_3_2; struct __compressed_pair<vk::FontAtlasCell **, std::__1::allocator<vk::FontAtlasCell *> > { struct FontAtlasCell {} **x_3_4_1; } x_2_3_3; } x_13_2_2; } x_68_1_13[2]; struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_14_2_1; struct shared_ptr<ggl::Texture2D> {} *x_14_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > { struct shared_ptr<ggl::Texture2D> {} *x_3_3_1; } x_14_2_3; } x_68_1_14; } x68; struct LabelMesh { int (**x_69_1_1)(); struct vector<vk::IconLabelPart *, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_2_2_1; struct IconLabelPart {} **x_2_2_2; struct __compressed_pair<vk::IconLabelPart **, std::__1::allocator<vk::IconLabelPart *> > { struct IconLabelPart {} **x_3_3_1; } x_2_2_3; } x_69_1_2; struct vector<vk::TextLabelPart *, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_2_1; struct TextLabelPart {} **x_3_2_2; struct __compressed_pair<vk::TextLabelPart **, std::__1::allocator<vk::TextLabelPart *> > { struct TextLabelPart {} **x_3_3_1; } x_3_2_3; } x_69_1_3; struct FontAtlasBase {} *x_69_1_4; boolx_69_1_5; unsigned long long x_69_1_6; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_7_2_1; struct BufferRange {} *x_7_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_7_2_3; } x_69_1_7; struct vector<vk::LabelMeshBase::BufferRange, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_8_2_1; struct BufferRange {} *x_8_2_2; struct __compressed_pair<vk::LabelMeshBase::BufferRange *, std::__1::allocator<vk::LabelMeshBase::BufferRange> > { struct BufferRange {} *x_3_3_1; } x_8_2_3; } x_69_1_8; struct Matrix<float, 4, 4> { float x_9_2_1[16]; } x_69_1_9; struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_10_2_1; struct shared_ptr<ggl::RenderItem> {} *x_10_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > { struct shared_ptr<ggl::RenderItem> {} *x_3_3_1; } x_10_2_3; } x_69_1_10; struct vector<std::__1::shared_ptr<ggl::ShaderSetup>, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_1; struct shared_ptr<ggl::ShaderSetup> {} *x_11_2_2; struct __compressed_pair<std::__1::shared_ptr<ggl::ShaderSetup> *, std::__1::allocator<std::__1::shared_ptr<ggl::ShaderSetup> > > { struct shared_ptr<ggl::ShaderSetup> {} *x_3_3_1; } x_11_2_3; } x_69_1_11; struct RenderState { int (**x_12_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_12_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_12_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_12_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_12_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_12_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_12_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_12_2_8; } x_69_1_12[4]; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_13_2_1; struct __shared_weak_count {} *x_13_2_2; } x_69_1_13; struct shared_ptr<ggl::Glyph::ViewUniformData> { struct ViewUniformData {} *x_14_2_1; struct __shared_weak_count {} *x_14_2_2; } x_69_1_14; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_15_2_1; struct __shared_weak_count {} *x_15_2_2; } x_69_1_15; struct shared_ptr<ggl::Glyph::ChannelUniformData> { struct ChannelUniformData {} *x_16_2_1; struct __shared_weak_count {} *x_16_2_2; } x_69_1_16; struct shared_ptr<ggl::Shader> { struct Shader {} *x_17_2_1; struct __shared_weak_count {} *x_17_2_2; } x_69_1_17; struct shared_ptr<ggl::Shader> { struct Shader {} *x_18_2_1; struct __shared_weak_count {} *x_18_2_2; } x_69_1_18; struct DefaultMesh { int (**x_19_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_19_2_2; int (**x_19_2_3)(); struct ResourceManager {} *x_19_2_4; struct RenderResource {} *x_19_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_19_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_19_2_7; struct shared_ptr<ggl::Glyph::DefaultVertexData> { struct DefaultVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_19_2_8; } x_69_1_19; unsigned long long x_69_1_20; struct shared_ptr<ggl::Icon::ViewUniformData> { struct ViewUniformData {} *x_21_2_1; struct __shared_weak_count {} *x_21_2_2; } x_69_1_21; struct RenderState { int (**x_22_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_22_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_22_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_22_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_22_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_22_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_22_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_22_2_8; } x_69_1_22; struct RenderState { int (**x_23_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_23_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_23_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_23_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_23_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_23_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_23_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_23_2_8; } x_69_1_23; struct shared_ptr<ggl::Shader> { struct Shader {} *x_24_2_1; struct __shared_weak_count {} *x_24_2_2; } x_69_1_24; struct IconMesh { int (**x_25_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_25_2_2; int (**x_25_2_3)(); struct ResourceManager {} *x_25_2_4; struct RenderResource {} *x_25_2_5; struct shared_ptr<ggl::VertexData> { struct VertexData {} *x_6_3_1; struct __shared_weak_count {} *x_6_3_2; } x_25_2_6; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_7_3_1; struct __shared_weak_count {} *x_7_3_2; } x_25_2_7; struct shared_ptr<ggl::Icon::IconVertexData> { struct IconVertexData {} *x_8_3_1; struct __shared_weak_count {} *x_8_3_2; } x_25_2_8; } x_69_1_25; struct shared_ptr<ggl::IndexDataTyped<unsigned short> > { struct IndexDataTyped<unsigned short> {} *x_26_2_1; struct __shared_weak_count {} *x_26_2_2; } x_69_1_26; unsigned long long x_69_1_27; } x69; struct LabelStyleCache { struct mutex { struct _opaque_pthread_mutex_t { long long x_1_3_1; BOOL x_1_3_2[56]; } x_1_2_1; } x_70_1_1; float x_70_1_2; boolx_70_1_3; long long x_70_1_4; long long x_70_1_5; unsigned long long x_70_1_6; float x_70_1_7; struct _retain_ptr<VKStyleManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_8_2_1)(); id x_8_2_2; struct _retain_objc { } x_8_2_3; struct _release_objc { } x_8_2_4; } x_70_1_8; struct shared_ptr<md::StyleResolutionSession> { struct StyleResolutionSession {} *x_9_2_1; struct __shared_weak_count {} *x_9_2_2; } x_70_1_9; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_10_2_1; } x_70_1_10; struct map<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle>, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, std::__1::allocator<std::__1::pair<const std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> > > > { struct __tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::StyleQuery>, std::__1::__value_type<std::__1::shared_ptr<md::StyleQuery>, std::__1::shared_ptr<vk::LabelStyle> >, std::__1::less<std::__1::shared_ptr<md::StyleQuery> >, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_11_2_1; } x_70_1_11; struct shared_ptr<vk::LabelStyle> { struct LabelStyle {} *x_12_2_1; struct __shared_weak_count {} *x_12_2_2; } x_70_1_12; } x70; struct LabelCollider { struct LabelManager {} *x_71_1_1; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_3_1[2]; } x_2_2_1; struct Matrix<float, 2, 1> { float x_2_3_1[2]; } x_2_2_2; } x_71_1_2; float x_71_1_3; float x_71_1_4; struct Matrix<float, 2, 1> { float x_5_2_1[2]; } x_71_1_5; struct Matrix<int, 2, 1> { int x_6_2_1[2]; } x_71_1_6; struct vector<vk::LabelCollider::GridNode, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_7_2_1; struct GridNode {} *x_7_2_2; struct __compressed_pair<vk::LabelCollider::GridNode *, std::__1::allocator<vk::LabelCollider::GridNode> > { struct GridNode {} *x_3_3_1; } x_7_2_3; } x_71_1_7; unsigned int x_71_1_8; boolx_71_1_9; boolx_71_1_10; struct Box<int, 2> { struct Matrix<int, 2, 1> { int x_1_3_1[2]; } x_11_2_1; struct Matrix<int, 2, 1> { int x_2_3_1[2]; } x_11_2_2; } x_71_1_11; struct SimpleBuffer<vk::LabelCollidableItem *, 20> { unsigned long long x_12_2_1; unsigned long long x_12_2_2; struct LabelCollidableItem {} **x_12_2_3; } x_71_1_12; struct SimpleBuffer<vk::LabelCollisionItemBase *, 2000> { unsigned long long x_13_2_1; unsigned long long x_13_2_2; struct LabelCollisionItemBase {} **x_13_2_3; } x_71_1_13; } x71; struct OcclusionManager { struct shared_ptr<ggl::OcclusionLine::ViewUniformData> { struct ViewUniformData {} *x_1_2_1; struct __shared_weak_count {} *x_1_2_2; } x_72_1_1; struct RenderState { int (**x_2_2_1)(); struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned long long x_1_7_1; unsigned long long x_1_7_2; char *x_1_7_3; } x_1_6_1; struct __short { union { unsigned char x_1_8_1; BOOL x_1_8_2; } x_2_7_1; BOOL x_2_7_2[23]; } x_1_6_2; struct __raw { unsigned long long x_3_7_1[3]; } x_1_6_3; } x_1_5_1; } x_1_4_1; } x_2_3_1; } x_2_2_2; struct DepthState { int (**x_3_3_1)(); int x_3_3_2; boolx_3_3_3; boolx_3_3_4; boolx_3_3_5; float x_3_3_6; float x_3_3_7; } x_2_2_3; struct ColorState { int (**x_4_3_1)(); boolx_4_3_2; boolx_4_3_3; boolx_4_3_4; boolx_4_3_5; } x_2_2_4; struct BlendState { int (**x_5_3_1)(); boolx_5_3_2; int x_5_3_3; } x_2_2_5; struct StencilState { int (**x_6_3_1)(); boolx_6_3_2; boolx_6_3_3; unsigned int x_6_3_4; int x_6_3_5; int x_6_3_6; unsigned int x_6_3_7; int x_6_3_8; int x_6_3_9; int x_6_3_10; } x_2_2_6; struct ScissorState { int (**x_7_3_1)(); boolx_7_3_2; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_5_1[2]; } x_3_4_1; struct Matrix<float, 2, 1> { float x_2_5_1[2]; } x_3_4_2; } x_7_3_3; } x_2_2_7; struct PolygonState { int (**x_8_3_1)(); boolx_8_3_2; int x_8_3_3; int x_8_3_4; } x_2_2_8; } x_72_1_2; struct unique_ptr<ggl::OcclusionLine::Shader::Setup, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct __compressed_pair<ggl::OcclusionLine::Shader::Setup *, std::__1::default_delete<ggl::OcclusionLine::Shader::Setup> > { struct Setup {} *x_1_3_1; } x_3_2_1; } x_72_1_3; struct Matrix<double, 4, 4> { double x_4_2_1[16]; } x_72_1_4; boolx_72_1_5; } x72; unsigned long long x73; unsigned long long x74; struct shared_ptr<vk::LabelTrafficTilePool> { struct LabelTrafficTilePool {} *x_75_1_1; struct __shared_weak_count {} *x_75_1_2; } x75; struct vector<std::__1::shared_ptr<vk::LabelIcon>, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_76_1_1; struct shared_ptr<vk::LabelIcon> {} *x_76_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::LabelIcon> *, std::__1::allocator<std::__1::shared_ptr<vk::LabelIcon> > > { struct shared_ptr<vk::LabelIcon> {} *x_3_2_1; } x_76_1_3; } x76; struct shared_ptr<vk::LabelManagerNotifierHook> { struct LabelManagerNotifierHook {} *x_77_1_1; struct __shared_weak_count {} *x_77_1_2; } x77; unsigned int x78; double x79; double x80; boolx81; float x82; int x83; unsigned long long x84; double x85; struct shared_ptr<vk::InfoLabel> { struct InfoLabel {} *x_86_1_1; struct __shared_weak_count {} *x_86_1_2; } x86; struct shared_ptr<vk::LabelFeature> { struct LabelFeature {} *x_87_1_1; struct __shared_weak_count {} *x_87_1_2; } x87; struct LabelIdentifier { unsigned int x_88_1_1; } x88; boolx89; long long x90; long long x91; float x92; long long x93; boolx94; boolx95; boolx96; boolx97; int x98; int x99; struct _retain_ptr<VKLabelMarker *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_100_1_1)(); id x_100_1_2; struct _retain_objc { } x_100_1_3; struct _release_objc { } x_100_1_4; } x100; struct _retain_ptr<VKLabelNavSupport *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_101_1_1)(); id x_101_1_2; struct _retain_objc { } x_101_1_3; struct _release_objc { } x_101_1_4; } x101; struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_102_1_1)(); id x_102_1_2; struct _retain_objc { } x_102_1_3; struct _release_objc { } x_102_1_4; } x102; struct LabelNavTrafficSupport { struct LabelManager {} *x_103_1_1; struct _retain_ptr<NSArray *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_2_2_1)(); id x_2_2_2; struct _retain_objc { } x_2_2_3; struct _release_objc { } x_2_2_4; } x_103_1_2; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_3_2_3; } x_103_1_3; struct PolylineCoordinate { unsigned int x_4_2_1; float x_4_2_2; } x_103_1_4; struct PolylineCoordinate { unsigned int x_5_2_1; float x_5_2_2; } x_103_1_5; struct vector<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature>, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_1; struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_6_2_2; struct __compressed_pair<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> *, std::__1::allocator<std::__1::shared_ptr<vk::TrafficIncidentLabelFeature> > > { struct shared_ptr<vk::TrafficIncidentLabelFeature> {} *x_3_3_1; } x_6_2_3; } x_103_1_6; boolx_103_1_7; } x103; boolx104; struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_105_1_1; struct shared_ptr<vk::NavLabel> {} *x_105_1_2; struct __compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > { struct shared_ptr<vk::NavLabel> {} *x_3_2_1; } x_105_1_3; } x105; struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_2_1[2]; } x_106_1_1; struct Matrix<double, 2, 1> { double x_2_2_1[2]; } x_106_1_2; } x106; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_107_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_107_1_2; } x107; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_108_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_108_1_2; } x108; struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_2_1[2]; } x_109_1_1; struct Matrix<float, 2, 1> { float x_2_2_1[2]; } x_109_1_2; } x109; }*)arg1 setNeedsLayout:(bool)arg2;
- (bool)shouldModifyLabelsOnRoutes;
- (void)updateLabelMapTiles:(id)arg1;
- (id)labelDebugString;
- (void)debugHighlightLabelAtScreenPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFocusedPolylinePainter:(id)arg1;
- (id)focusedPolylinePainter;
- (void)setIsShowingRoute:(bool)arg1;
- (unsigned long long)mapLayerPosition;
- (void)didTransitionFrom:(long long)arg1 To:(long long)arg2;
- (void)willTransitionFrom:(long long)arg1 To:(long long)arg2;
- (void)didTapZoom;
- (void)willTapZoom;
- (void)setShouldModifyLabelsOnRoutes:(bool)arg1;
- (id)initWithPurpose:(unsigned long long)arg1 sharedResources:(id)arg2;
- (void)stylesheetDoneChanging;
- (void)stylesheetWillTransition:(unsigned long long)arg1;
- (void)setLabelMode:(unsigned char)arg1;
- (void)setVectorType:(long long)arg1;
- (void)stylesheetDidChange;
- (void)prepareForStylesheetTransitionToMapDisplayStyle:(unsigned long long)arg1 withReadinessBlock:(id)arg2;
- (void)setDrawLabels:(bool)arg1;
- (struct shared_ptr<vk::LabelManager> { struct LabelManager {} *x1; struct __shared_weak_count {} *x2; })labelManager;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setCurrentLocationText:(id)arg1;
- (id)labelMarkers;
- (id)selectedLabelMarker;
- (void)selectLabelMarker:(id)arg1;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectableLabelsOnly:(bool)arg2;
- (void)deselectLabelMarker;
- (void)setExternalTrafficIncidents:(id)arg1;
- (id)externalTrafficIncidents;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (bool)showsPointsOfInterest;
- (void)setShieldIdiom:(long long)arg1;
- (long long)shieldIdiom;
- (void)setNavigationShieldSize:(long long)arg1;
- (long long)navigationShieldSize;
- (void)setShieldSize:(long long)arg1;
- (long long)shieldSize;
- (void)clearScene;
- (void)setLabelScaleFactor:(long long)arg1;
- (long long)labelScaleFactor;
- (void)setLocalizeLabels:(bool)arg1;
- (bool)localizeLabels;
- (void)setTrafficEnabled:(bool)arg1;
- (void)setStyleManager:(id)arg1;
- (id)styleManager;
- (void)setLabelMarkerSelectionEnabled:(bool)arg1;
- (bool)labelMarkerSelectionEnabled;
- (void)setMapType:(long long)arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)setContentScale:(double)arg1;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSSet, VKAttributedRoute;

@interface VKRouteLine : NSObject <VKRouteMapMatchingDataSource> {
    BOOL _curve;
    BOOL _matchToRoads;
    BOOL _hasNewRoadMatches;
    struct { 
        double x0; 
        double x1; 
        double y0; 
        double y1; 
    } _bounds;
    struct { 
        double v[4][4]; 
    } _inverseMatrix;
    VKAttributedRoute *_overlay;
    double _boundsUnitsPerMeter;
    double _metersPerPoint;
    double _boundsInWorldUnit;
    double _simplificationEpsilonPoints;
    double _viewUnitsPerPoint;
    struct vector<vk::RouteLineSection, vk_allocator<vk::RouteLineSection> > { 
        struct RouteLineSection {} *__begin_; 
        struct RouteLineSection {} *__end_; 
        struct __compressed_pair<vk::RouteLineSection *, vk_allocator<vk::RouteLineSection> > { 
            struct RouteLineSection {} *__first_; 
        } __end_cap_; 
    } _sections;
    struct RouteLineSection { int (**x1)(); struct vector<vk::RouteLineSection::Vertex, vk_allocator<vk::RouteLineSection::Vertex> > { struct Vertex {} *x_2_1_1; struct Vertex {} *x_2_1_2; struct __compressed_pair<vk::RouteLineSection::Vertex *, vk_allocator<vk::RouteLineSection::Vertex> > { struct Vertex {} *x_3_2_1; } x_2_1_3; } x2; struct vector<vk::RouteLineSection::Arrow, vk_allocator<vk::RouteLineSection::Arrow> > { struct Arrow {} *x_3_1_1; struct Arrow {} *x_3_1_2; struct __compressed_pair<vk::RouteLineSection::Arrow *, vk_allocator<vk::RouteLineSection::Arrow> > { struct Arrow {} *x_3_2_1; } x_3_1_3; } x3; struct vector<vk::RouteLineSection::Arrow, vk_allocator<vk::RouteLineSection::Arrow> > { struct Arrow {} *x_4_1_1; struct Arrow {} *x_4_1_2; struct __compressed_pair<vk::RouteLineSection::Arrow *, vk_allocator<vk::RouteLineSection::Arrow> > { struct Arrow {} *x_3_2_1; } x_4_1_3; } x4; boolx5; float x6; float x7; struct list<VGLRouteLineMesh *, vk_allocator<VGLRouteLineMesh *> > { struct __list_node_base<VGLRouteLineMesh *, void *> { struct __list_node<VGLRouteLineMesh *, void *> {} *x_1_2_1; struct __list_node<VGLRouteLineMesh *, void *> {} *x_1_2_2; } x_8_1_1; struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VGLRouteLineMesh *, void *> > > { unsigned long x_2_2_1; } x_8_1_2; } x8; struct VertexSource {} *x9; struct VKPolylineWalker<vk::RouteLineSection::Vertex> { struct VKPolylineWalkerDataSource<vk::RouteLineSection::Vertex> {} *x_10_1_1; } x10; struct VKRouteLineToMeshPathMap { struct list<VKRouteLineToMeshPathMap::Range, vk_allocator<VKRouteLineToMeshPathMap::Range> > { struct __list_node_base<VKRouteLineToMeshPathMap::Range, void *> { struct __list_node<VKRouteLineToMeshPathMap::Range, void *> {} *x_1_3_1; struct __list_node<VKRouteLineToMeshPathMap::Range, void *> {} *x_1_3_2; } x_1_2_1; struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VKRouteLineToMeshPathMap::Range, void *> > > { unsigned long x_2_3_1; } x_1_2_2; } x_11_1_1; struct __list_iterator<VKRouteLineToMeshPathMap::Range, void *> { struct __list_node<VKRouteLineToMeshPathMap::Range, void *> {} *x_2_2_1; } x_11_1_2; } x11; struct PolylineCoordinate { unsigned int x_12_1_1; float x_12_1_2; } x12; struct PolylineCoordinate { unsigned int x_13_1_1; float x_13_1_2; } x13; unsigned int *x14; unsigned int x15; double x16; float x17; } *_userLocationSection;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    } _userLocationIndex;
    struct Vec2Imp<float> { 
        float x; 
        float y; 
    } _userLocation;
    double _lastUserLocationMatchTimestamp;
    double _lastTrafficTimeStamp;
    NSSet *_retainedTiles;
}

@property VKAttributedRoute * overlay;
@property(readonly) BOOL needsUpdate;
@property double simplificationEpsilonPoints;
@property(readonly) struct { double x1; double x2; double x3; double x4; } bounds;
@property BOOL hasNewRoadMatches;


- (double)simplificationEpsilonPoints;
- (BOOL)isTrafficUptoDate:(double)arg1;
- (BOOL)hasNewRoadMatches;
- (BOOL)isTrafficUpToDate;
- (void)_updateTilesCovered:(id)arg1;
- (void)_updateBounds:(id)arg1;
- (void)setHasNewRoadMatches:(BOOL)arg1;
- (void)drawDebugMarkersWithContext:(id)arg1;
- (void)splitRouteLineAtAnnotation:(id)arg1;
- (void)forEachSection:(id)arg1;
- (void)createMeshIfNecessary:(BOOL)arg1 currentManeuver:(int)arg2;
- (void)generateArrowsForManeuverDisplayMode:(int)arg1 routeLineWidth:(float)arg2;
- (BOOL)buildRouteLineForPainter:(id)arg1 keysInView:(id)arg2 tiles:(id)arg3 containerModel:(id)arg4 viewUnitsPerPoint:(double)arg5 force:(BOOL)arg6;
- (void)setSimplificationEpsilonPoints:(double)arg1;
- (void)forEachMapMatchingSection:(id)arg1;
- (BOOL)needsUpdate;
- (struct { double x1; double x2; double x3; double x4; })bounds;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)setOverlay:(id)arg1;
- (id)overlay;

@end

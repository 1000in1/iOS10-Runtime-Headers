/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKClassicGlobeCanvas : VKScreenCanvas <GEOResourceManifestTileGroupObserver, LabelManagerDelegate, VKCameraControllerDelegate, VKGlobeLineContainerDelegate, VKInteractiveMap> {
    struct shared_ptr<md::AnchorContext> { 
        struct AnchorContext {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _anchorContext;
    VKAnnotationModel * _annotationModel;
    id /* block */  _artworkIsReadyBlock;
    bool  _canShowFlyover;
    bool  _coarseLoading;
    double  _contentScale;
    double  _currentZoomLevel;
    struct AltitudeDebugSettings { 
        bool altitudePauseLoading; 
        bool altitudeFreezeViewNode; 
        bool altitudeTexturePaging; 
        bool altitudeShowTileBounds; 
        bool altitudeThreadDrawing; 
        bool altitudeHighResSatellite; 
        bool altitudeMipmapSatellite; 
        bool altitudeMipmapFlyover; 
        bool altitudeMipmapObjectTree; 
        bool altitudeShowNightLight; 
        float lodScale; 
        float tileQualityThreshold; 
        float hideMeshTime; 
        float fadeSpeed; 
        bool tourSpeedup; 
        float tourSpeedupFactor; 
    }  _debugSettings;
    <VKInteractiveMapDelegate> * _delegate;
    bool  _disableLabels;
    bool  _disableRoads;
    NSMutableArray * _externalAnchors;
    struct shared_ptr<ggl::FlyoverLibrary> { 
        struct FlyoverLibrary {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _flyoverLibrary;
    struct GlobeAdapter { struct shared_ptr<md::GlobeAdapterData> { struct GlobeAdapterData {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct GlobeView {} *x2; struct Geocentric<double> { double x_3_1_1[3]; } x3; struct { double x_4_1_1; double x_4_1_2; } x4; struct vector<std::__1::shared_ptr<md::LabelMapTile>, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_5_1_1; struct shared_ptr<md::LabelMapTile> {} *x_5_1_2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMapTile> > > { struct shared_ptr<md::LabelMapTile> {} *x_3_2_1; } x_5_1_3; } x5; struct shared_ptr<md::LabelManager> { struct LabelManager {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6; bool x7; bool x8; } * _globeAdapter;
    VKGlobeCameraController * _globeCameraController;
    struct shared_ptr<md::VKGlobeStylesheet> { 
        struct VKGlobeStylesheet {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _globeStyleSheet;
    struct GlobeView { int (**x1)(); struct AnchorManagerPrivate {} *x2; struct Scene {} *x3; struct Context {} *x4; struct DtmCacheNode {} *x5; struct DtmRequestManager {} *x6; struct FreezeViewNode {} *x7; struct Projection { struct Perspective { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_8_1_1; struct Ortho { double x_2_2_1; double x_2_2_2; double x_2_2_3; double x_2_2_4; double x_2_2_5; double x_2_2_6; } x_8_1_2; bool x_8_1_3; bool x_8_1_4; } x8; struct FrameLatLon { double x_9_1_1; double x_9_1_2; double x_9_1_3; double x_9_1_4; struct PositionLatLonAlt { double x_5_2_1; double x_5_2_2; double x_5_2_3; } x_9_1_5; } x9; bool x10; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_11_1_1; } x11; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_12_1_1; } x12; struct vector<altitude::TileBound, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_13_1_1; struct TileBound {} *x_13_1_2; struct __compressed_pair<altitude::TileBound *, std::__1::allocator<altitude::TileBound> > { struct TileBound {} *x_3_2_1; } x_13_1_3; } x13; struct vector<altitude::SimpleTileKey, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_14_1_1; struct SimpleTileKey {} *x_14_1_2; struct __compressed_pair<altitude::SimpleTileKey *, std::__1::allocator<altitude::SimpleTileKey> > { struct SimpleTileKey {} *x_3_2_1; } x_14_1_3; } x14; bool x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; struct VKClassicGlobeCanvas { Class x_20_1_1; id x_20_1_2; id x_20_1_3; id x_20_1_4; unsigned int x_20_1_5; unsigned int x_20_1_6; bool x_20_1_7; bool x_20_1_8; id x_20_1_9; bool x_20_1_10; /* Warning: unhandled array encoding: '[2@]BB{VKEdgeInsets=dddd}{VKEdgeInsets=dddd}{VKEdgeInsets=dddd}BB{unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >={__compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> >=^{RenderQueue}}}^{RenderTree}^{LayoutContext}{Matrix<float, 4, 1>=[4f]}@@@q{?=CCCCB}@dBB^{GlobeView}{shared_ptr<md::VKGlobeStylesheet>=^{VKGlobeStylesheet}^{__shared_weak_count}}{AltitudeDebugSettings=BBBBBBBBBBffffBf}^{GlobeAdapter}{shared_ptr<md::GlobeOverlayContainer>=^{GlobeOverlayContainer}^{__shared_weak_count}}{shared_ptr<ggl::FlyoverLibrary>=^{FlyoverLibrary}^{__shared_weak_count}}BB{shared_ptr<bool>=^B^{__shared_weak_count}}BBBBd@?@?@@{shared_ptr<md::ViewTransform>=^{ViewTransform}^{__shared_weak_count}}{shared_ptr<md::AnchorContext>=^{AnchorContext}^{__shared_weak_count}}{_MDRenderTargetRef=@}B@}BBi{AnimationManager={AnimationTimer=^{AnimationReferenceTimer}ddd}d{vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}^{AnimationObjectHolder}{__compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> >=^{AnimationObjectHolder}}}}{Timer=d}dBddd{FrameLatLon=dddd{PositionLatLonAlt=ddd}}^{C3mmRequestManager}^{RenderableGroup}IdBB^{LabelDataManagerPrivate}BBBB^{RouteLineManager}^{GlobeCleanupLoader}^{CompleteGlobeTileSetCullingGraph}^{CompleteGlobeTileSetLoader}^{TileSetNode}^{GlobeTileRenderManager}^{CullingNode}^{EarthAdjustedViewNode}^{UserViewNode}^{View}^{BasicViewNode}^{GlobeMainViewNode}^{C3bRequestManager}fB{shared_ptr<bool>=^B^{__shared_weak_count}}^{HeightRequestManager}{map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > >={__tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > >=^{__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true> >=Q}}}{Mutex=^v}{shared_ptr<altitude::Stylesheet>=^{Stylesheet}^{__shared_weak_count}}^{FlyoverTour}B^{TriggerManager}{Viewport=iiii}{AnimationReferenceTimer=ddd}B{set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >={__tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> >=^{__tree_node<altitude::ManifestListener *, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> >=Q}}}^{GeoServicesLoader}^{ManifestManager}^{GlobeDispatch}}' */ id x_20_1_11[2]; } *x20; id x21; id x22; struct { unsigned char x_23_1_1; unsigned char x_23_1_2; unsigned char x_23_1_3; unsigned char x_23_1_4; bool x_23_1_5; } x23; id x24; bool x25; bool x26; struct GlobeView {} *x27; struct shared_ptr<md::VKGlobeStylesheet> { struct VKGlobeStylesheet {} *x_28_1_1; struct __shared_weak_count {} *x_28_1_2; } x28; struct AltitudeDebugSettings { bool x_29_1_1; bool x_29_1_2; bool x_29_1_3; bool x_29_1_4; bool x_29_1_5; bool x_29_1_6; bool x_29_1_7; bool x_29_1_8; bool x_29_1_9; bool x_29_1_10; float x_29_1_11; float x_29_1_12; float x_29_1_13; float x_29_1_14; bool x_29_1_15; float x_29_1_16; } x29; struct GlobeAdapter {} *x30; struct shared_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer {} *x_31_1_1; struct __shared_weak_count {} *x_31_1_2; } x31; struct shared_ptr<ggl::FlyoverLibrary> { struct FlyoverLibrary {} *x_32_1_1; struct __shared_weak_count {} *x_32_1_2; } x32; bool x33; bool x34; struct shared_ptr<bool> { bool *x_35_1_1; struct __shared_weak_count {} *x_35_1_2; } x35; bool x36; bool x37; bool x38; bool x39; double x40; id /* block */ x41; id /* block */ x42; id x43; struct shared_ptr<md::ViewTransform> { struct ViewTransform {} *x_44_1_1; struct __shared_weak_count {} *x_44_1_2; } x44; struct shared_ptr<md::AnchorContext> { struct AnchorContext {} *x_45_1_1; struct __shared_weak_count {} *x_45_1_2; } x45; struct _MDRenderTargetRef { id x_46_1_1; bool x_46_1_2; id x_46_1_3; bool x_46_1_4; bool x_46_1_5; int x_46_1_6; struct AnimationManager { struct AnimationTimer { struct AnimationReferenceTimer {} *x_1_3_1; double x_1_3_2; double x_1_3_3; double x_1_3_4; } x_7_2_1; double x_7_2_2; struct vector<altitude::AnimationObjectHolder, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_3_1; struct AnimationObjectHolder {} *x_3_3_2; struct __compressed_pair<altitude::AnimationObjectHolder *, std::__1::allocator<altitude::AnimationObjectHolder> > { struct AnimationObjectHolder {} *x_3_4_1; } x_3_3_3; } x_7_2_3; } x_46_1_7; struct Timer { double x_8_2_1; } x_46_1_8; double x_46_1_9; bool x_46_1_10; double x_46_1_11; double x_46_1_12; double x_46_1_13; struct FrameLatLon { double x_14_2_1; double x_14_2_2; double x_14_2_3; double x_14_2_4; struct PositionLatLonAlt { double x_5_3_1; double x_5_3_2; double x_5_3_3; } x_14_2_5; } x_46_1_14; struct C3mmRequestManager {} *x_46_1_15; struct RenderableGroup {} *x_46_1_16; unsigned int x_46_1_17; double x_46_1_18; bool x_46_1_19; bool x_46_1_20; struct LabelDataManagerPrivate {} *x_46_1_21; bool x_46_1_22; bool x_46_1_23; bool x_46_1_24; bool x_46_1_25; struct RouteLineManager {} *x_46_1_26; struct GlobeCleanupLoader {} *x_46_1_27; struct CompleteGlobeTileSetCullingGraph {} *x_46_1_28; struct CompleteGlobeTileSetLoader {} *x_46_1_29; struct TileSetNode {} *x_46_1_30; struct GlobeTileRenderManager {} *x_46_1_31; struct CullingNode {} *x_46_1_32; struct EarthAdjustedViewNode {} *x_46_1_33; struct UserViewNode {} *x_46_1_34; struct View {} *x_46_1_35; struct BasicViewNode {} *x_46_1_36; struct GlobeMainViewNode {} *x_46_1_37; struct C3bRequestManager {} *x_46_1_38; float x_46_1_39; bool x_46_1_40; struct shared_ptr<bool> { bool *x_41_2_1; struct __shared_weak_count {} *x_41_2_2; } x_46_1_41; struct HeightRequestManager {} *x_46_1_42; struct map<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d>, altitude::GlobeView::LessVector2i, std::__1::allocator<std::__1::pair<const gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true>, std::__1::allocator<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> > > > { struct __tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<gm::Matrix<int, 2, 1>, std::__1::__value_type<gm::Matrix<int, 2, 1>, std::__1::pair<bool, altitude::Position3d> >, altitude::GlobeView::LessVector2i, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_43_2_1; } x_46_1_43; struct Mutex { void *x_44_2_1; } x_46_1_44; struct shared_ptr<altitude::Stylesheet> { struct Stylesheet {} *x_45_2_1; struct __shared_weak_count {} *x_45_2_2; } x_46_1_45; struct FlyoverTour {} *x_46_1_46; bool x_46_1_47; struct TriggerManager {} *x_46_1_48; struct Viewport { int x_49_2_1; int x_49_2_2; int x_49_2_3; int x_49_2_4; } x_46_1_49; struct AnimationReferenceTimer { double x_50_2_1; double x_50_2_2; double x_50_2_3; } x_46_1_50; bool x_46_1_51; struct set<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree<altitude::ManifestListener *, std::__1::less<altitude::ManifestListener *>, std::__1::allocator<altitude::ManifestListener *> > { struct __tree_node<altitude::ManifestListener *, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<altitude::ManifestListener *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::less<altitude::ManifestListener *> > { unsigned long long x_3_4_1; } x_1_3_3; } x_52_2_1; } x_46_1_52; struct GeoServicesLoader {} *x_46_1_53; struct ManifestManager {} *x_46_1_54; struct GlobeDispatch {} *x_46_1_55; } x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; id x58; void*x59; void*x60; const void*x61; out void*x62; void*x63; void*x64; void*x65; void*x66; const void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; union x74; void*x75; in void*x76; out void*x77; in void*x78; void*x79; void*x80; void*x81; void*x82; out void*x83; void*x84; void*x85; int x86; void*x87; BOOL x88; void*x89; void*x90; void*x91; void*x92; void*x93; float x94; void*x95; long x96; void*x97; out void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; short x105; void*x106; BOOL x107; void*x108; void*x109; void*x110; long x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; out void*x119; out void*x120; long x121; void*x122; void*x123; void*x124; void*x125; void*x126; const void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; union x136; void*x137; int x138; void*x139; short x140; void*x141; void*x142; void*x143; const void*x144; void*x145; void*x146; BOOL x147; void*x148; void*x149; void*x150; void*x151; void*x152; unsigned int x153/* : ? */; void*x154; void*x155; void*x156; short x157; void*x158; int x159; void*x160; BOOL x161; void*x162; void*x163; void*x164; short x165; void*x166; void*x167; void*x168; const void*x169; int x170; void*x171; in void*x172; void*x173; void*x174; void*x175; void*x176; BOOL x177; void*x178; void*x179; void*x180; void*x181; void*x182; const void*x183; void*x184; void*x185; void*x186; void*x187; short x188; void*x189; void*x190; void*x191; double x192; void*x193; SEL x194; void*x195; SEL x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; SEL x204; void*x205; SEL x206; void*x207; BOOL x208; void*x209; void*x210; void*x211; void*x212; void*x213; const void*x214; void*x215; void*x216; void*x217; void*x218; const void*x219; void*x220; void*x221; int x222; void*x223; void*x224; void*x225; short x226; void*x227; void*x228; void*x229; BOOL x230; void*x231; void*x232; void*x233; void*x234; void*x235; const void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; short x243; void*x244; void*x245; void*x246; double x247; void*x248; SEL x249; void*x250; SEL x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; SEL x259; void*x260; SEL x261; void*x262; void*x263; void*x264; long x265; void*x266; long x267; void*x268; out void*x269; BOOL x270; void*x271; void*x272; void*x273; void*x274; void*x275; out void*x276; const void*x277; void*x278; void*x279; BOOL x280; void*x281; void*x282; void*x283; void*x284; void*x285; const void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; struct x295; void*x296; void*x297; void*x298; short x299; void*x300; void*x301; void*x302; const void*x303; void*x304; void*x305; BOOL x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; BOOL x316; void*x317; out void*x318; void*x319; void*x320; void*x321; void*x322; const void*x323; void*x324; void*x325; short x326; void*x327; short x328; void*x329; void*x330; void*x331; double x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; int x340; void*x341; const void*x342; void*x343; void*x344; short x345; void*x346; void*x347; void*x348; double x349; void*x350; SEL x351; void*x352; SEL x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; SEL x361; void*x362; SEL x363; void*x364; unsigned int x365/* : ? */; void*x366; void*x367; void*x368; short x369; void*x370; int x371; void*x372; BOOL x373; void*x374; void*x375; void*x376; short x377; void*x378; void*x379; void*x380; const void*x381; int x382; void*x383; in void*x384; void*x385; void*x386; void*x387; void*x388; BOOL x389; void*x390; void*x391; void*x392; void*x393; void*x394; const void*x395; void*x396; void*x397; void*x398; void*x399; short x400; void*x401; void*x402; void*x403; double x404; void*x405; SEL x406; void*x407; SEL x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; SEL x416; void*x417; SEL x418; void*x419; BOOL x420; void*x421; void*x422; void*x423; void*x424; void*x425; const void*x426; void*x427; void*x428; void*x429; void*x430; const void*x431; void*x432; void*x433; int x434; void*x435; void*x436; void*x437; short x438; void*x439; void*x440; void*x441; BOOL x442; void*x443; void*x444; void*x445; void*x446; void*x447; const void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; short x455; void*x456; void*x457; void*x458; double x459; void*x460; SEL x461; void*x462; SEL x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; SEL x471; void*x472; SEL x473; void*x474; void*x475; void*x476; long x477; void*x478; long x479; void*x480; out void*x481; BOOL x482; void*x483; void*x484; void*x485; void*x486; void*x487; out void*x488; const void*x489; void*x490; void*x491; BOOL x492; void*x493; void*x494; void*x495; void*x496; void*x497; const void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; SEL x505; void*x506; SEL x507; void*x508; void*x509; void*x510; void*x511; void*x512; const void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; short x522; void*x523; void*x524; void*x525; double x526; void*x527; SEL x528; void*x529; SEL x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; void*x537; SEL x538; void*x539; SEL x540; void*x541; void*x542; void*x543; long x544; void*x545; long x546; void*x547; out void*x548; BOOL x549; void*x550; void*x551; void*x552; void*x553; void*x554; out void*x555; const void*x556; void*x557; void*x558; BOOL x559; void*x560; void*x561; void*x562; void*x563; void*x564; const void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; struct x574; void*x575; void*x576; void*x577; short x578; void*x579; void*x580; void*x581; const void*x582; void*x583; void*x584; BOOL x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; const void*x595; void*x596; void*x597; void*x598; void*x599; void*x600; void*x601; struct x602; void*x603; void*x604; void*x605; void*x606; void*x607; in void*x608; int x609; void*x610; out void*x611; in void*x612; void*x613; void*x614; struct x615; void*x616; void*x617; void*x618; short x619; void*x620; void*x621; void*x622; const void*x623; void*x624; void*x625; BOOL x626; void*x627; void*x628; void*x629; void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; long x636; void*x637; out void*x638; in void*x639; void*x640; void*x641; void*x642; void*x643; struct x644; void*x645; void*x646; void*x647; BOOL x648; void*x649; void*x650; void*x651; void*x652; void*x653; const void*x654; void*x655; void*x656; char *x657; void*x658; void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; in void*x679; short x680; void*x681; int x682; void*x683; void*x684; void*x685; in void*x686; void*x687; void*x688; double x689; void*x690; void*x691; void*x692; long x693; void*x694; out void*x695; in void*x696; void*x697; void*x698; void*x699; void*x700; long x701; void*x702; out void*x703; in void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; void*x716; void*x717; void*x718; void*x719; void*x720; void*x721; void*x722; void*x723; void*x724; void*x725; void*x726; void*x727; void*x728; in void*x729; short x730; void*x731; int x732; void*x733; void*x734; void*x735; in void*x736; void*x737; void*x738; double x739; void*x740; void*x741; void*x742; long x743; void*x744; out void*x745; in void*x746; void*x747; void*x748; void*x749; void*x750; long x751; void*x752; out void*x753; in void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; void*x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; void*x769; void*x770; void*x771; void*x772; void*x773; void*x774; void*x775; void*x776; } * _globeView;
    bool  _initialized;
    struct shared_ptr<bool> { 
        bool *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _isDead;
    bool  _isDownloading;
    bool  _isLoading;
    VKGlobeLineContainer * _lineContainer;
    GEOResourceManifestConfiguration * _manifestConfiguration;
    struct { 
        unsigned char timePeriod; 
        unsigned char overlayType; 
        unsigned char applicationState; 
        unsigned char searchResultsType; 
        bool mapHasLabels; 
    }  _mapDisplayStyle;
    long long  _mapType;
    struct shared_ptr<md::GlobeOverlayContainer> { 
        struct GlobeOverlayContainer {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _overlayContainer;
    struct _MDRenderTargetRef { 
        <MDRenderTarget> *ptr; 
    }  _renderTargetRef;
    id /* block */  _sceneDidLoadCallback;
    bool  _showsBuildings;
    bool  _tourIsDownloading;
    struct shared_ptr<md::ViewTransform> { 
        struct ViewTransform {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _viewTransform;
}

@property (nonatomic, retain) NSArray *customFeatureDataSources;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VKInteractiveMapDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableLabels;
@property (nonatomic) bool disableRoads;
@property (nonatomic, readonly) VKAnchorWrapper *externalAnchors;
@property (nonatomic, retain) NSArray *externalTrafficIncidents;
@property (nonatomic, readonly) bool flyoverAvailable;
@property (nonatomic, readonly) int flyoverMode;
@property (getter=isFullyDrawn, nonatomic, readonly) bool fullyDrawn;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool labelMarkerSelectionEnabled;
@property (nonatomic) unsigned char labelScaleFactor;
@property (nonatomic) bool localizeLabels;
@property (nonatomic) long long mapType;
@property (nonatomic) long long navigationShieldSize;
@property (nonatomic, readonly) struct GlobeOverlayContainer { struct weak_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct GlobeView {} *x2; struct NSMutableArray { Class x_3_1_1; } *x3; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_4_1_1; } x4; double x5; }*overlayContainer;
@property (nonatomic, readonly) NSArray *overlays;
@property (nonatomic, readonly) NSSet *persistentOverlays;
@property (nonatomic, readonly) NSArray *rasterOverlays;
@property (nonatomic) <VKRouteMatchedAnnotationPresentation> *routeLineSplitAnnotation;
@property (nonatomic) struct PolylineCoordinate { unsigned int x1; float x2; } routeUserOffset;
@property (nonatomic, copy) id /* block */ sceneDidLoadCallback;
@property (nonatomic) long long shieldIdiom;
@property (nonatomic) long long shieldSize;
@property (nonatomic) bool showsBuildings;
@property (nonatomic) bool showsPointsOfInterest;
@property (readonly) Class superclass;
@property (nonatomic) bool trafficEnabled;
@property (nonatomic) bool trafficIncidentsEnabled;
@property (nonatomic, readonly) NSArray *visibleTileSets;

+ (bool)supportsMapType:(long long)arg1 scale:(int)arg2 manifestConfiguration:(id)arg3;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CGPoint { double x1; double x2; })_centerScreenPoint;
- (void)_reloadStylesheet;
- (void)_setDefaultFov:(float)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)_update;
- (void)_updateDebugSettings;
- (void)_viewTransformSetup;
- (void)addAnnotationMarker:(id)arg1;
- (void)addCustomFeatureDataSource:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (id /* block */)annotationCoordinateTest;
- (id)annotationMarkers;
- (id /* block */)annotationRectTest;
- (id)attributionsForCurrentRegion;
- (void)beginStyleAnimationGroup;
- (id)boundsForSelectedTransitLines;
- (id)camera;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(bool)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(bool)arg2;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(bool)arg2;
- (void)cameraController:(id)arg1 flyoverModeDidChange:(int)arg2;
- (void)cameraController:(id)arg1 flyoverModeWillChange:(int)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(bool)arg2;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
- (void)cameraControllerDidFinishInitialTrackingAnimation:(id)arg1;
- (void)cameraControllerRequestsLayout:(id)arg1;
- (bool)canRender;
- (void)clearSceneIsEffectivelyHidden:(bool)arg1;
- (struct shared_ptr<md::LabelFeatureMarker> { struct LabelFeatureMarker {} *x1; struct __shared_weak_count {} *x2; })closestRoadMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)consoleString:(bool)arg1;
- (struct CGPoint { double x1; double x2; })convertCoordinateToCameraModelPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertCoordinateToPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertMapPointToPoint:(struct { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToCoordinate:(struct CGPoint { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToCoordinateOnSphere:(struct CGPoint { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToMapPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)createFlyoverPreTourAnimation:(id)arg1 duration:(double)arg2;
- (bool)currentSceneRequiresMSAA;
- (id)customFeatureDataSources;
- (void)dealloc;
- (void)debugHighlightFeatureMarker:(const struct shared_ptr<md::FeatureMarker> { }*)arg1;
- (void)debugHighlightObjectAtPoint:(struct CGPoint { double x1; double x2; })arg1 highlightTarget:(unsigned char)arg2;
- (id)delegate;
- (void)deselectLabelMarker;
- (void)deselectTransitLineMarker;
- (id)detailedDescription;
- (id)detailedDescriptionDictionaryRepresentation;
- (void)didEnterBackground;
- (void)didPresent;
- (void)didReceiveMemoryWarning:(bool)arg1 beAggressive:(bool)arg2;
- (void)disableFlyoverStatistics;
- (bool)disableLabels;
- (bool)disableRoads;
- (void)disableTileAnalytics;
- (void)enableFlyoverStatistics;
- (void)enableTileAnalytics;
- (void)endStyleAnimationGroup;
- (id)externalAnchors;
- (id)externalTrafficIncidents;
- (void)finishStyleBlend;
- (bool)flyoverAvailable;
- (int)flyoverMode;
- (id)flyoverStatistics;
- (void)gglWillDrawWithTimestamp;
- (id)initWithTarget:(id)arg1 inBackground:(bool)arg2 manifestConfiguration:(id)arg3;
- (void)initializeScene;
- (void)initializeWithRenderer:(struct Renderer { int (**x1)(); struct Device {} *x2; unsigned long long x3; unsigned long long x4; bool x5; float x6; struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > > { struct shared_ptr<ggl::DebugRenderer> {} *x_7_1_1; struct shared_ptr<ggl::DebugRenderer> {} *x_7_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer> *, std::__1::allocator<std::__1::shared_ptr<ggl::DebugRenderer> > > { struct shared_ptr<ggl::DebugRenderer> {} *x_3_2_1; } x_7_1_3; } x7; struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> > { struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> > { struct RenderQueue {} *x_1_2_1; } x_8_1_1; } x8; struct shared_ptr<ggl::CommonLibrary> { struct CommonLibrary {} *x_9_1_1; struct __shared_weak_count {} *x_9_1_2; } x9; struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences> > { struct __compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences> > { struct RenderResourceFences {} *x_1_2_1; } x_10_1_1; } x10; struct Texture2D {} *x11; struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > { struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer> > { struct CommandBuffer {} *x_1_2_1; } x_12_1_1; } x12; }*)arg1;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (bool)isFullyDrawn;
- (bool)isPointValidForGesturing:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isShowingNoDataPlaceholders;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 pendingArtworkIsReady:(bool)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 selectedLabelMarkerDidChangeState:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 selectedLabelMarkerWillDisappear:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 setNeedsDisplay:(bool)arg2;
- (void)labelManager:(struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1 setNeedsLayout:(bool)arg2;
- (void)labelManagerDidLayout:(struct LabelManager { int (**x1)(); struct weak_ptr<md::LabelManager> { struct LabelManager {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct _retain_ptr<VKDispatch *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> { int (**x_3_1_1)(); id x_3_1_2; /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_3_1_3; const void*x_3_1_4; void*x_3_1_5; void*x_3_1_6; int x_3_1_7; in void*x_3_1_8; out unsigned int x_3_1_9/* : ? */; void*x_3_1_10; BOOL x_3_1_11; void*x_3_1_12; } x3; struct _release_objc { } x4; }*)arg1;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })labelMarkerForCustomFeatureAnnotation:(id)arg1 dataSource:(id)arg2;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })labelMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectableLabelsOnly:(bool)arg2;
- (bool)labelMarkerSelectionEnabled;
- (struct vector<std::__1::shared_ptr<md::LabelMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker> > > { struct shared_ptr<md::LabelMarker> {} *x1; struct shared_ptr<md::LabelMarker> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::LabelMarker> *, std::__1::allocator<std::__1::shared_ptr<md::LabelMarker> > > { struct shared_ptr<md::LabelMarker> {} *x_3_1_1; } x3; })labelMarkers;
- (unsigned char)labelScaleFactor;
- (void)lineContainerNeedsDisplay:(id)arg1;
- (bool)localizeLabels;
- (long long)mapType;
- (long long)navigationShieldSize;
- (struct GlobeOverlayContainer { struct weak_ptr<md::GlobeOverlayContainer> { struct GlobeOverlayContainer {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; struct GlobeView {} *x2; struct NSMutableArray { Class x_3_1_1; } *x3; struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_4_1_1; } x4; double x5; }*)overlayContainer;
- (id)overlays;
- (void)pauseFlyoverTourAnimation;
- (id)persistentOverlays;
- (void)prepareFlyoverAnimation:(id)arg1 completion:(id /* block */)arg2;
- (id)rasterOverlays;
- (void)removeAnnotationMarker:(id)arg1;
- (void)removeCustomFeatureDataSource:(id)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)removeRasterOverlay:(id)arg1;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2 setupHandler:(id /* block */)arg3;
- (void)resetFlyoverStatistics;
- (void)resetRenderQueue:(struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (void)resumeFlyoverTourAnimation;
- (id)routeLineSplitAnnotation;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (id /* block */)sceneDidLoadCallback;
- (void)selectLabelMarker:(const struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)selectTransitLineMarker:(id)arg1;
- (struct shared_ptr<md::LabelMarker> { struct LabelMarker {} *x1; struct __shared_weak_count {} *x2; })selectedLabelMarker;
- (id)selectedTransitLineIDs;
- (void)setContentsScale:(double)arg1;
- (void)setCustomFeatureDataSources:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableLabels:(bool)arg1;
- (void)setDisableRoads:(bool)arg1;
- (void)setExternalTrafficIncidents:(id)arg1;
- (void)setHidden:(bool)arg1;
- (void)setLabelMarkerSelectionEnabled:(bool)arg1;
- (void)setLabelScaleFactor:(unsigned char)arg1;
- (void)setLocalizeLabels:(bool)arg1;
- (void)setMapType:(long long)arg1;
- (void)setMapType:(long long)arg1 animated:(bool)arg2;
- (void)setNavigationShieldSize:(long long)arg1;
- (void)setNightMode:(bool)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setSceneDidLoadCallback:(id /* block */)arg1;
- (void)setShieldIdiom:(long long)arg1;
- (void)setShieldSize:(long long)arg1;
- (void)setShowsBuildings:(bool)arg1;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (void)setStylesheetMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1;
- (void)setTrafficEnabled:(bool)arg1;
- (void)setTrafficIncidentsEnabled:(bool)arg1;
- (void)setupMapScene;
- (long long)shieldIdiom;
- (long long)shieldSize;
- (bool)shouldHideOffscreenSelectedAnnotation;
- (bool)showsBuildings;
- (bool)showsPointsOfInterest;
- (struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })sourceMapDisplayStyle;
- (void)startFlyoverAnimation:(id)arg1 animateToStart:(bool)arg2 labelChanged:(id /* block */)arg3 stateChange:(id /* block */)arg4;
- (void)startFlyoverTourAnimation:(unsigned long long)arg1 animateToStart:(bool)arg2 labelChanged:(id /* block */)arg3 stateChange:(id /* block */)arg4;
- (void)stopAnimations;
- (void)stopFlyoverAnimation;
- (void)stopSnappingAnimations;
- (struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; })styleManager;
- (void)stylesheetAnimationDidEnd:(bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1 toStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg2;
- (bool)supportsMapDisplayStyle:(struct DisplayStyle { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; })arg1;
- (bool)trafficEnabled;
- (bool)trafficIncidentsEnabled;
- (void)transferStateFromCanvas:(id)arg1;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)transitLineMarkersInCurrentViewport;
- (void)transitionToFlyoverMode:(int)arg1 animated:(bool)arg2;
- (void)updateCameraForFrameResize;
- (void)updateCameraFromGlobe;
- (void)updateWithTimestamp:(double)arg1;
- (bool)useNewRenderPath;
- (id)viewportInfo;
- (id)visibleTileSets;
- (void)waitForLoading;
- (bool)wantsRender;

@end

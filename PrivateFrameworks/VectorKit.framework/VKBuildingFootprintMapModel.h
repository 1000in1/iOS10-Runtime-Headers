/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class VKSkyModel, VGLRenderState, VKMercatorTerrainHeightCache, VKAnimation;

@interface VKBuildingFootprintMapModel : VKVectorMapModel <VKMercatorTerrainHeightProvider, VKMapLayer> {
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _topColor;
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _facadeColor;
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _landmarkColor;
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _flatColor;
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _pointyFacadeColor;
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _pointyTopColor;
    float _brightness;
    int _vectorType;
    int _buildingMode;
    VKAnimation *_styleChangeAnimation;
    VKAnimation *_fadeBuildingAnimation;
    float _buildingOccluderAlpha;
    BOOL _fadeTiles;
    VKSkyModel *_skyModel;
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _footprintStrokeColor;
    float _footprintStrokeWidth;
    struct _VGLColor { 
        float r; 
        float g; 
        float b; 
        float a; 
    } _3DStrokeColor;
    float _3DStrokeWidth;
    double _nearDistance;
    double _farDistance;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, vk_allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > { 
        struct __hash_table<std::__1::pair<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true>, vk_allocator<std::__1::pair<VKVectorTile *, OccluderGroupList> > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                    struct __hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> {} **__first_; 
                    struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                        struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> { 
                    struct __hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    } _currentOccluders;
    struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, vk_allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > { 
        struct __hash_table<std::__1::pair<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true>, vk_allocator<std::__1::pair<VKVectorTile *, OccluderGroupList> > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > { 
                    struct __hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> {} **__first_; 
                    struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                        struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> { 
                    struct __hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    } _previousOccluders;
    VGLRenderState *_renderState;
    float _minLayeringHeight;
    float _maxLayeringHeight;
    bool_shouldDraw3DBuildingsInVectorBuildingsRenderPass;
    bool_shouldDraw3DBuildingsIn3DBuildingsRenderPass;
    BOOL _initializedStyles;
    VKMercatorTerrainHeightCache *_heightCache;
}

@property(readonly) VKMercatorTerrainHeightCache * heightCache;
@property int vectorType;
@property BOOL fadeTiles;
@property int buildingMode;
@property(retain) VKSkyModel * skyModel;


- (id)skyModel;
- (void)setBuildingMode:(int)arg1;
- (BOOL)fadeTiles;
- (void)draw2DBuildingsInScene:(id)arg1 withContext:(id)arg2;
- (void)draw3DBuildingStrokesInScene:(id)arg1 withContext:(id)arg2;
- (void)drawFootprintsInScene:(id)arg1 withContext:(id)arg2;
- (void)draw3DBuildingShadowsInScene:(id)arg1 withContext:(id)arg2;
- (void)draw3DBuildingsInScene:(id)arg1 withContext:(id)arg2 passes:(unsigned int)arg3;
- (void)_updateStyles;
- (id)_globalPointyBuildingDrawStyle;
- (id)_globalBuildingDrawStyle;
- (void)_clearOccluders;
- (void)vectorTypeDidChange;
- (int)vectorType;
- (void)willStopDrawingTiles:(id)arg1;
- (void)willStartDrawingTiles:(id)arg1;
- (void)removePersistingExitingTiles:(id)arg1;
- (BOOL)wantsCategorizedSourceTiles;
- (void)setBuildingMode:(int)arg1 animated:(BOOL)arg2;
- (int)buildingMode;
- (double)maxTileHeightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (void)setSkyModel:(id)arg1;
- (void)setVectorType:(int)arg1;
- (void)stylesheetDidChange;
- (void)setFadeTiles:(BOOL)arg1;
- (id)heightCache;
- (void)drawDebugScene:(id)arg1 withContext:(id)arg2;
- (void)drawScene:(id)arg1 withContext:(id)arg2 pass:(unsigned int)arg3;
- (unsigned int)supportedRenderPasses;
- (double)heightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (unsigned int)mapLayerPosition;
- (void)reset;
- (id)init;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)setActive:(BOOL)arg1;

@end

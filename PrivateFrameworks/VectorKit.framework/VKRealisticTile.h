/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKRealisticTile : VKVectorTile {
    float  _alpha;
    struct shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> { 
        struct RealisticMesh {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _coastlineMesh;
    struct shared_ptr<ggl::Texture2D> { 
        struct Texture2D {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _defaultLandTexture;
    struct shared_ptr<ggl::Texture2D> { 
        struct Texture2D {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _defaultLandTextureVariant;
    struct FogInfo { 
        struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> > { 
            struct ConstantDataTyped<ggl::Fog::Skyfog> {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } _fogConstantData; 
    }  _fogInfo;
    struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { 
            struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __first_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { 
                unsigned long __first_; 
            } __pair3_; 
        } __tree_; 
    }  _landDrawableIndices;
    struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
        struct shared_ptr<md::TexturedDrawable> {} *__begin_; 
        struct shared_ptr<md::TexturedDrawable> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
            struct shared_ptr<md::TexturedDrawable> {} *__first_; 
        } __end_cap_; 
    }  _landDrawables;
    VKRealisticPolygonMaker * _landPolygonMaker;
    struct shared_ptr<gss::StyleQuery> { 
        struct StyleQuery {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _landTextureStyleQuery;
    float  _landZ;
    float  _laneMarkingZ;
    struct vector<_VKRealisticPolygonMetaData, std::__1::allocator<_VKRealisticPolygonMetaData> > { 
        struct _VKRealisticPolygonMetaData {} *__begin_; 
        struct _VKRealisticPolygonMetaData {} *__end_; 
        struct __compressed_pair<_VKRealisticPolygonMetaData *, std::__1::allocator<_VKRealisticPolygonMetaData> > { 
            struct _VKRealisticPolygonMetaData {} *__first_; 
        } __end_cap_; 
    }  _polygonMetaData;
    NSMutableArray * _realisticRoadGroups;
    NSMapTable * _realisticRoadGroupsTable;
    struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic> > { 
        struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _realisticTextureConstantData;
    float  _roadZ;
    BOOL  _shouldBlend;
    VKAnimation * _startDrawingAnimation;
    struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { 
        struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { 
            struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __first_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { 
                unsigned long __first_; 
            } __pair3_; 
        } __tree_; 
    }  _waterDrawableIndices;
    struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
        struct shared_ptr<md::TexturedDrawable> {} *__begin_; 
        struct shared_ptr<md::TexturedDrawable> {} *__end_; 
        struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { 
            struct shared_ptr<md::TexturedDrawable> {} *__first_; 
        } __end_cap_; 
    }  _waterDrawables;
    VKRealisticPolygonMaker * _waterPolygonMaker;
    float  _waterZ;
}

@property (nonatomic) float alpha;
@property (nonatomic, readonly) struct RealisticMesh { int (**x1)(); char *x2; int (**x3)(); struct ResourceManager {} *x4; struct RenderResource {} *x5; struct MeshCReflection {} *x6; /* Warning: unhandled struct encoding: '{vector<std::__1::shared_ptr<ggl::VertexData>' */ struct x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; unsigned int x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; bycopy void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; id x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; const void*x68; void*x69; void*x70; float x71; void*x72; int x73; void*x74; long x75; void*x76; void*x77; void*x78; void*x79; void*x80; const void*x81; void*x82; void*x83; double x84; void*x85; unsigned long x86; void*x87; int x88; void*x89; in void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; short x97; void*x98; void*x99; void*x100; void*x101; void*x102; struct x103; void*x104; }*coastlineMesh; /* unknown property attribute:  std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > >=^{shared_ptr<ggl::VertexData>}}}{shared_ptr<ggl::IndexData>=^{IndexData}^{__shared_weak_count}}} */
@property (nonatomic, readonly) struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; } defaultLandTexture;
@property (nonatomic, readonly) struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; } defaultLandTextureVariant;
@property (nonatomic, readonly) struct FogInfo { struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> > { struct ConstantDataTyped<ggl::Fog::Skyfog> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*fogInfo;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<std::__1::shared_ptr<md::TexturedDrawable>' */ struct *landDrawables; /* unknown property attribute:  std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > >=^{shared_ptr<md::TexturedDrawable>}}} */
@property (nonatomic, readonly) float landZ;
@property (nonatomic, readonly) NSArray *realisticRoadGroups;
@property (nonatomic, readonly) struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic> > { struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {} *x1; struct __shared_weak_count {} *x2; } realisticTextureConstantData;
@property (nonatomic, readonly) float roadZ;
@property (nonatomic) BOOL shouldBlend;
@property (nonatomic, retain) VKAnimation *startDrawingAnimation;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<std::__1::shared_ptr<md::TexturedDrawable>' */ struct *waterDrawables; /* unknown property attribute:  std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > >=^{shared_ptr<md::TexturedDrawable>}}} */
@property (nonatomic, readonly) float waterZ;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_addCoastlineMeshForPoints:(const struct Matrix<float, 2, 1> { float x1[2]; }*)arg1 pointCount:(unsigned int)arg2;
- (struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; })_createDefaultTextureForLevelOfDetail:(unsigned int)arg1 takeVariant:(BOOL)arg2;
- (struct TexturedDrawable { struct unique_ptr<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh> > > { struct __compressed_pair<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonBase::CompressedMeshMesh> > > { struct MeshVendor<ggl::PolygonBase::CompressedMeshMesh> {} *x_1_2_1; } x_1_1_1; } x1; struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *x_2_1_1; struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *x_2_1_2; struct __compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > { struct vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > {} *x_3_2_1; } x_2_1_3; } x2; struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_4_1_1; } x4; struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x_5_1_1; struct __shared_weak_count {} *x_5_1_2; } x5; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { unsigned int x_1_5_1; unsigned int x_1_5_2; char *x_1_5_3; } x_1_4_1; struct __short { union { unsigned char x_1_6_1; BOOL x_1_6_2; } x_2_5_1; BOOL x_2_5_2[11]; } x_1_4_2; struct __raw { unsigned long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_6_1_1; } x6; struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x_7_1_1; struct __shared_weak_count {} *x_7_1_2; } x7; }*)_drawableInMap:(struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long x_3_2_1; } x_1_1_3; } x1; }*)arg1 vendors:(struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)arg2 forStyleQuery:(struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg3;
- (id)_groupForRenderZ:(int)arg1;
- (void)_parseCoastlines;
- (void)_parsePolygons;
- (void)_updateDefaultLandTextures;
- (void)addTriangulatedPointsToDrawableInMap:(struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long x_3_2_1; } x_1_1_3; } x1; }*)arg1 vendors:(struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)arg2 zIndex:(float)arg3 points:(const struct Matrix<float, 2, 1> { float x1[2]; }*)arg4 pointCount:(unsigned int)arg5 indices:(const unsigned short*)arg6 indexCount:(unsigned int)arg7 styleQuery:(struct shared_ptr<gss::StyleQuery> { struct StyleQuery {} *x1; struct __shared_weak_count {} *x2; })arg8;
- (float)alpha;
- (struct RealisticMesh { int (**x1)(); char *x2; int (**x3)(); struct ResourceManager {} *x4; struct RenderResource {} *x5; struct MeshCReflection {} *x6; struct vector<std::__1::shared_ptr<ggl::VertexData>, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_7_1_1; struct shared_ptr<ggl::VertexData> {} *x_7_1_2; struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData> *, std::__1::allocator<std::__1::shared_ptr<ggl::VertexData> > > { struct shared_ptr<ggl::VertexData> {} *x_3_2_1; } x_7_1_3; } x7; struct shared_ptr<ggl::IndexData> { struct IndexData {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; }*)coastlineMesh;
- (void)createMeshes;
- (void)dealloc;
- (struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; })defaultLandTexture;
- (struct shared_ptr<ggl::Texture2D> { struct Texture2D {} *x1; struct __shared_weak_count {} *x2; })defaultLandTextureVariant;
- (struct FogInfo { struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog> > { struct ConstantDataTyped<ggl::Fog::Skyfog> {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)fogInfo;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1 modelTile:(id)arg2 styleManager:(struct shared_ptr<gss::StyleManager> { struct StyleManager {} *x1; struct __shared_weak_count {} *x2; })arg3 sharedResources:(id)arg4 contentScale:(float)arg5 device:(struct Device { }*)arg6;
- (struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)landDrawables;
- (float)landZ;
- (id)realisticRoadGroups;
- (struct shared_ptr<ggl::ConstantDataTyped<ggl::RealisticTexture::Realistic> > { struct ConstantDataTyped<ggl::RealisticTexture::Realistic> {} *x1; struct __shared_weak_count {} *x2; })realisticTextureConstantData;
- (float)roadZ;
- (void)setAlpha:(float)arg1;
- (void)setShouldBlend:(BOOL)arg1;
- (void)setStartDrawingAnimation:(id)arg1;
- (BOOL)shouldBlend;
- (id)startDrawingAnimation;
- (void)updateTextures;
- (void)updateViewDependentStateIfNecessaryWithContext:(id)arg1;
- (void)updateViewDependentStateWithContext:(id)arg1;
- (int)vectorType;
- (struct vector<std::__1::shared_ptr<md::TexturedDrawable>, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x1; struct shared_ptr<md::TexturedDrawable> {} *x2; struct __compressed_pair<std::__1::shared_ptr<md::TexturedDrawable> *, std::__1::allocator<std::__1::shared_ptr<md::TexturedDrawable> > > { struct shared_ptr<md::TexturedDrawable> {} *x_3_1_1; } x3; }*)waterDrawables;
- (float)waterZ;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSMutableArray, NSMutableDictionary, NSMutableSet;

@interface VKLabelNavRoadGraph : NSObject  {
    NSMutableSet *_tiles;
    NSMutableSet *_duplicateTiles;
    NSMutableDictionary *_tileDatasByIndex;
    NSMutableArray *_junctions;
    NSMutableArray *_intersections;
    BOOL _oppositeCarriagewayJunctionsValid;
    NSMutableArray *_oppositeCarriagewayJunctions;
    struct Vec2Imp<float> { 
        float x; 
        float y; 
    } _unitHeading;
    BOOL _offRouteJunctionsValid;
    struct BRectImp<double> { 
        struct Vec2Imp<double> { 
            double x; 
            double y; 
        } p0; 
        struct Vec2Imp<double> { 
            double x; 
            double y; 
        } p1; 
    } _offRouteJunctionSelectRect;
    NSMutableArray *_offRouteJunctions;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    } _routeUserOffset;
    BOOL _routeFeatureMapValid;
    struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, vk_allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > { 
        struct __hash_table<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true>, vk_allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > { 
                    struct __hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> {} **__first_; 
                    struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > { 
                        struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> { 
                    struct __hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    } _routeFeatureMap;
    BOOL _simplifiedRouteValid;
    struct vector<geo::Vec2Imp<double>, vk_allocator<geo::Vec2Imp<double> > > { 
        struct Vec2Imp<double> {} *__begin_; 
        struct Vec2Imp<double> {} *__end_; 
        struct __compressed_pair<geo::Vec2Imp<double> *, vk_allocator<geo::Vec2Imp<double> > > { 
            struct Vec2Imp<double> {} *__first_; 
        } __end_cap_; 
    } _simplifiedRoutePoints;
    unsigned int _currentRoadStartSimplifiedPointIndex;
    BOOL _screenRouteValid;
    struct vector<RouteSegment, vk_allocator<RouteSegment> > { 
        struct RouteSegment {} *__begin_; 
        struct RouteSegment {} *__end_; 
        struct __compressed_pair<RouteSegment *, vk_allocator<RouteSegment> > { 
            struct RouteSegment {} *__first_; 
        } __end_cap_; 
    } _screenRouteSegments;
    unsigned int _firstPOIAligningRouteSegment;
}

@property(retain) NSMutableArray * junctions;


- (void)_transformRouteToScreenWithContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg1;
- (void)_updateSimplifiedRoute;
- (void)_findOffRouteJunctions;
- (void)_updateIntersectionsForDepth:(unsigned int)arg1;
- (BOOL)_checkIfDualCarriageWayConnectorRoad:(id)arg1 fromJunction:(id)arg2 toJunction:(id)arg3 checkShields:(BOOL)arg4;
- (id)_nextIntersectionForRoad:(id)arg1;
- (id)_findInterTileJunctionForJunction:(id)arg1;
- (id)_junctionForRoadEdge:(const struct { struct { /* ? */ } *x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg1 atA:(BOOL)arg2 routeOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3 tile:(id)arg4;
- (void)evaluateDualCarriagewayForJunction:(id)arg1 outputJunctionList:(id)arg2;
- (id)overpassJunctionForJunction:(id)arg1;
- (void)addRouteRoadEdge:(const struct VKLabelNavRouteRoadEdge { struct PolylineCoordinate { unsigned int x_1_1_1; float x_1_1_2; } x1; struct PolylineCoordinate { unsigned int x_2_1_1; float x_2_1_2; } x2; struct { /* ? */ } *x3; }*)arg1 atA:(BOOL)arg2 isRouteRefineJunction:(BOOL)arg3 tile:(id)arg4 junctionList:(id)arg5;
- (id)offRouteGraphJunctionsWithNavContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg1 maxJunctions:(unsigned int)arg2 isOnRoute:(BOOL)arg3;
- (id)junctionListForDepth:(unsigned int)arg1;
- (unsigned int)countReadyJunctionLists;
- (id)oppositeCarriagewayJunctions;
- (BOOL)prepareOppositeCarriagewayJunctions;
- (void)startingLabelLayoutWithContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg1 routeUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg2;
- (BOOL)isOnScreenRouteBackwardsAtJunction:(id)arg1 navContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg2;
- (BOOL)collideRouteWithLabel:(id)arg1 routeCrossProduct:(float*)arg2 context:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg3;
- (BOOL)isPriorRouteCollinearWithRoad:(id)arg1 distance:(float)arg2;
- (void)routeJunctionsHaveChanged;
- (void)setTiles:(id)arg1;
- (id)initWithJunctions:(id)arg1;
- (id)junctionForRoad:(id)arg1 nearJunction:(BOOL)arg2 crossTileEdge:(BOOL)arg3;
- (id)nextRoadSegmentForRoad:(id)arg1;
- (unsigned char)computeRoutePositionMaskForPOIAtPixel:(const struct Vec2Imp<float> { float x1; float x2; }*)arg1 currentPositionMask:(unsigned char)arg2 context:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg3;
- (void)setJunctions:(id)arg1;
- (id)junctions;
- (void)reset;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;

@end

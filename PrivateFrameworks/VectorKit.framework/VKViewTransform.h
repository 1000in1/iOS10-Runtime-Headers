/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class VKViewVolume;

@interface VKViewTransform : NSObject  {
    struct shared_ptr<vk::ViewTransform> { 
        struct ViewTransform {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _viewTransform;
}

@property(readonly) BOOL isMercator;
@property(readonly) BOOL isGeocentric;
@property(readonly) int coordinateSpace;
@property(readonly) struct CGSize { float x1; float x2; } screenSizeInPoints;
@property(readonly) struct CGSize { float x1; float x2; } screenSizeInPixels;
@property(readonly) float contentScale;
@property(readonly) struct VKPoint { double x1; double x2; double x3; } translation;
@property(readonly) struct VKPoint { double x1; double x2; double x3; } translationInMercator;
@property(readonly) struct Vec3Imp<double> { double x1; double x2; double x3; } upVector;
@property(readonly) struct Vec3Imp<double> { double x1; double x2; double x3; } rightVector;
@property(readonly) struct Vec3Imp<double> { double x1; double x2; double x3; } forwardVector;
@property(readonly) float heading;
@property(readonly) float degreesFromPlumb;
@property(readonly) double widthOverDepth;
@property(readonly) const struct { double x1[4][4]; }* viewProjectionMatrix;
@property(readonly) double nearPlaneDistance;
@property(readonly) double farPlaneDistance;
@property(readonly) VKViewVolume * viewVolume;
@property(readonly) double focusDistance;
@property(readonly) struct VKPoint { double x1; double x2; double x3; } focusPoint;
@property const struct { double x1[4][4]; }* scaledViewProjectionMatrix;


- (struct VKPoint { double x1; double x2; double x3; })groundPointFromPixel:(struct Vec2Imp<float> { float x1; float x2; })arg1;
- (double)focusDistance;
- (double)farPlaneDistance;
- (double)nearPlaneDistance;
- (struct VKPoint { double x1; double x2; double x3; })translationInMercator;
- (int)coordinateSpace;
- (struct CGSize { float x1; float x2; })screenSizeInPixels;
- (struct CGSize { float x1; float x2; })screenSizeInPoints;
- (struct VKPoint { double x1; double x2; double x3; })focusPoint;
- (double)widthOverDepth;
- (float)degreesFromPlumb;
- (const struct { double x1[4][4]; }*)scaledViewProjectionMatrix;
- (struct { double x1[4][4]; })orientationMatrixAtWorldPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (struct VKPoint { double x1; double x2; double x3; })translation;
- (BOOL)isGeocentric;
- (BOOL)isMercator;
- (void)setScaledViewProjectionMatrix:(const struct { double x1[4][4]; }*)arg1;
- (void)setCoordinateSpace:(int)arg1 screenSizeInPixels:(struct CGSize { float x1; float x2; })arg2 contentScale:(float)arg3 frustum:(struct { BOOL x1; double x2; double x3; double x4; double x5; })arg4 position:(struct VKPoint { double x1; double x2; double x3; })arg5 orientation:(const struct { double x1[4][4]; }*)arg6;
- (struct shared_ptr<vk::ViewTransform> { struct ViewTransform {} *x1; struct __shared_weak_count {} *x2; })viewTransform;
- (struct VKPoint { double x1; double x2; double x3; })groundPointFromScreenPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct Vec3Imp<double> { double x1; double x2; double x3; })upVector;
- (id)viewVolume;
- (const struct { double x1[4][4]; }*)viewProjectionMatrix;
- (struct Vec3Imp<double> { double x1; double x2; double x3; })rightVector;
- (struct Vec3Imp<double> { double x1; double x2; double x3; })forwardVector;
- (float)heading;
- (id)init;
- (void).cxx_destruct;
- (id).cxx_construct;
- (float)contentScale;

@end

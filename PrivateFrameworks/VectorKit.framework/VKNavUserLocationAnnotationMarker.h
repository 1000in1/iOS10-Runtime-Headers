/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKNavUserLocationAnnotationMarker : VKAnnotationMarker {
    float  _arrowBrightness;
    struct Matrix<float, 4, 1> { 
        float _e[4]; 
    }  _arrowColor;
    struct Matrix<float, 4, 1> { 
        float _e[4]; 
    }  _arrowColorStale;
    struct shared_ptr<ggl::TextureAlphaMask::MeshPipelineSetup> { 
        struct MeshPipelineSetup {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _arrowPipelineSetup;
    struct shared_ptr<ggl::RenderItem> { 
        struct RenderItem {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _arrowRenderItem;
    float  _circleBrightness;
    struct shared_ptr<ggl::TextureWithBrightness::MeshPipelineSetup> { 
        struct MeshPipelineSetup {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _circlePipelineSetup;
    struct shared_ptr<ggl::RenderItem> { 
        struct RenderItem {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _circleRenderItem;
    struct shared_ptr<ggl::RenderState> { 
        struct RenderState {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _gglPuckRenderState;
    float  _greyPuckAlphaScale;
    bool  _needsTextureUpdate;
    double  _presentationCourse;
    bool  _puckFlipped;
    double  _puckOffset;
    int  _puckStyle;
    VKTimedAnimation * _puckStyleAnimation;
    float  _scale;
    bool  _shouldShowCourse;
    double  _sizePoints;
    bool  _stale;
    int  _style;
    struct shared_ptr<ggl::Texture2D> { 
        struct Texture2D {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _textureArrow;
    struct shared_ptr<ggl::Texture2D> { 
        struct Texture2D {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _textureCircle;
}

@property (nonatomic) struct { float x1; float x2; float x3; float x4; } innerColor;
@property (nonatomic) double presentationCourse;
@property (nonatomic) float scale;
@property (nonatomic) bool shouldShowCourse;
@property (getter=isStale, nonatomic) bool stale;
@property (nonatomic) int style;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_updatePuckStyle;
- (void)_updateTexturesIfNeeded;
- (void)appendCommandsToBuffer:(struct CommandBuffer { int (**x1)(); char *x2; unsigned char x3; struct RenderQueue {} *x4; struct ClearItem {} *x5; struct vector<ggl::RenderItem *, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_6_1_1; struct RenderItem {} **x_6_1_2; struct __compressed_pair<ggl::RenderItem **, std::__1::allocator<ggl::RenderItem *> > { struct RenderItem {} **x_3_2_1; } x_6_1_3; } x6; struct vector<ggl::Texture2DLoadItem, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_7_1_1; struct Texture2DLoadItem {} *x_7_1_2; struct __compressed_pair<ggl::Texture2DLoadItem *, std::__1::allocator<ggl::Texture2DLoadItem> > { struct Texture2DLoadItem {} *x_3_2_1; } x_7_1_3; } x7; struct vector<ggl::BufferLoadItem, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_8_1_1; struct BufferLoadItem {} *x_8_1_2; struct __compressed_pair<ggl::BufferLoadItem *, std::__1::allocator<ggl::BufferLoadItem> > { struct BufferLoadItem {} *x_3_2_1; } x_8_1_3; } x8; struct deque<geo::fast_shared_ptr<ggl::QueryItem>, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { struct __split_buffer<geo::fast_shared_ptr<ggl::QueryItem> *, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_1; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_2; struct fast_shared_ptr<ggl::QueryItem> {} **x_1_2_3; struct __compressed_pair<geo::fast_shared_ptr<ggl::QueryItem> **, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> *> > { struct fast_shared_ptr<ggl::QueryItem> {} **x_4_3_1; } x_1_2_4; } x_9_1_1; unsigned long long x_9_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<geo::fast_shared_ptr<ggl::QueryItem> > > { unsigned long long x_3_2_1; } x_9_1_3; } x9; struct deque<ggl::PendingQuery, std::__1::allocator<ggl::PendingQuery> > { struct __split_buffer<ggl::PendingQuery *, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_1_2_1; struct PendingQuery {} **x_1_2_2; struct PendingQuery {} **x_1_2_3; struct __compressed_pair<ggl::PendingQuery **, std::__1::allocator<ggl::PendingQuery *> > { struct PendingQuery {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned long long x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<ggl::PendingQuery> > { unsigned long long x_3_2_1; } x_10_1_3; } x10; id x11; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; short x25; int x26; in void*x27; bool x28; long x29; out BOOL x30; void*x31; SEL x32; union { int x_33_1_1; double x_33_1_2; void*x_33_1_3; void*x_33_1_4; char *x_33_1_5; void*x_33_1_6; unsigned int x_33_1_7/* : ? */; long x_33_1_8; out BOOL x_33_1_9; void*x_33_1_10; void*x_33_1_11; char *x_33_1_12; void*x_33_1_13; } x33; void*x34; const void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; union { void*x_41_1_1; in short x_41_1_2; int x_41_1_3; void*x_41_1_4; in void*x_41_1_5; double x_41_1_6; void*x_41_1_7; long x_41_1_8; out in void*x_41_1_9; void*x_41_1_10; long x_41_1_11; out in void*x_41_1_12; } x41; void*x42; const out void*x43; void*x44; void*x45; double x46; void*x47; void*x48; in void*x49; void*x50; void x51; void*x52; const unsigned char x53; out void*x54; in void*x55; void*x56; void*x57; void*x58; void*x59; union { int x_60_1_1; double x_60_1_2; } x60; void*x61; const out void*x62; void*x63; void*x64; double x65; void*x66; void*x67; in void*x68; void*x69; void x70; void*x71; const unsigned char x72; out void*x73; in void*x74; short x75; void*x76; void*x77; void*x78; void*x79; union { int x_80_1_1; double x_80_1_2; } x80; int x81; in int x82; void*x83; void*x84; void*x85; void*x86; void*x87; union { void x_88_1_1; out int x_88_1_2; double x_88_1_3; } x88; const void*x89; void*x90; out void x91; void*x92; bycopy unsigned int x93/* : ? */; short x94; void*x95; const void x96; void*x97; const SEL x98; union { int x_99_1_1; double x_99_1_2; } x99; void*x100; const void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; union { int x_107_1_1; double x_107_1_2; } x107; const out void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; union { int x_115_1_1; double x_115_1_2; } x115; const out void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; BOOL x122; void*x123; void*x124; void*x125; void*x126; void*x127; union { int x_128_1_1; double x_128_1_2; } x128; const out void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; BOOL x135; void*x136; void*x137; const void*x138; void*x139; void*x140; void*x141; union { void x_142_1_1; out int x_142_1_2; double x_142_1_3; } x142; short x143; void*x144; void*x145; long x146; void*x147; void*x148; const in void*x149; void*x150; void*x151; void*x152; out void*x153; void*x154; void*x155; SEL x156; union { int x_157_1_1; double x_157_1_2; } x157; void*x158; const void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; union { void x_165_1_1; out int x_165_1_2; double x_165_1_3; } x165; short x166; void*x167; void*x168; long x169; void*x170; void*x171; const in void*x172; void*x173; void*x174; void*x175; out void*x176; void*x177; void*x178; unsigned short x179; void*x180; void*x181; const void*x182; void*x183; out int x184; in void*x185; unsigned int x186; in double x187; void*x188; void*x189; SEL x190; union { void*x_191_1_1; in short x_191_1_2; int x_191_1_3; void*x_191_1_4; in void*x_191_1_5; double x_191_1_6; void*x_191_1_7; int x_191_1_8; in void*x_191_1_9; } x191; void*x192; const void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; union { void x_199_1_1; out int x_199_1_2; double x_199_1_3; } x199; short x200; void*x201; void*x202; unsigned char x203; void*x204; const const void*x205; in void*x206; unsigned short x207; void*x208; void*x209; void*x210; unsigned int x211; in double x212; void*x213; void*x214; SEL x215; union { void*x_216_1_1; in short x_216_1_2; int x_216_1_3; void*x_216_1_4; in void*x_216_1_5; double x_216_1_6; void*x_216_1_7; long x_216_1_8; out in void*x_216_1_9; void*x_216_1_10; long x_216_1_11; out in void*x_216_1_12; } x216; void*x217; const void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; union { void x_224_1_1; out int x_224_1_2; double x_224_1_3; } x224; short x225; void*x226; void*x227; void*x228; const out short x229; void*x230; void*x231; void*x232; const void*x233; void*x234; void*x235; BOOL x236; void*x237; void*x238; void*x239; void*x240; void*x241; double x242; void*x243; void*x244; void*x245; long long x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; out void*x258; SEL x259; void*x260; SEL x261; void*x262; float x263; void*x264; void*x265; void*x266; short x267; void*x268; void*x269; void*x270; void*x271; void*x272; short x273; void*x274; void*x275; void*x276; void*x277; void*x278; const void*x279; void*x280; void*x281; double x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; const void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; long x297; void*x298; SEL x299; void*x300; SEL x301; void*x302; unsigned long long x303; void*x304; void*x305; void*x306; void*x307; void*x308; const void*x309; void*x310; void*x311; unsigned int x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void*x324; void*x325; short x326; void*x327; void*x328; void*x329; double x330; void*x331; SEL x332; void*x333; SEL x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; SEL x342; void*x343; SEL x344; void*x345; void*x346; void*x347; long x348; void*x349; long x350; void*x351; out void*x352; BOOL x353; void*x354; void*x355; void*x356; void*x357; void*x358; out void*x359; const void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; out void*x367; SEL x368; void*x369; SEL x370; void*x371; float x372; void*x373; void*x374; void*x375; short x376; void*x377; void*x378; void*x379; void*x380; void*x381; short x382; void*x383; void*x384; void*x385; void*x386; void*x387; const void*x388; void*x389; void*x390; double x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; const void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; long x406; void*x407; SEL x408; void*x409; SEL x410; void*x411; unsigned long long x412; void*x413; void*x414; void*x415; void*x416; void*x417; const void*x418; void*x419; void*x420; unsigned int x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; struct x441; void*x442; void*x443; void*x444; short x445; void*x446; void*x447; void*x448; const void*x449; void*x450; void*x451; BOOL x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; short x462; void*x463; void*x464; void*x465; long x466; void*x467; int x468; void*x469; void*x470; void*x471; void*x472; void*x473; unsigned int x474/* : ? */; void*x475; void*x476; void*x477; float x478; void*x479; float x480; void*x481; void*x482; void*x483; const void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; out void*x491; SEL x492; void*x493; SEL x494; void*x495; float x496; void*x497; void*x498; void*x499; short x500; void*x501; void*x502; void*x503; void*x504; void*x505; short x506; void*x507; void*x508; void*x509; void*x510; void*x511; const void*x512; void*x513; void*x514; double x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; const void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; long x530; void*x531; SEL x532; void*x533; SEL x534; void*x535; unsigned long long x536; void*x537; void*x538; void*x539; void*x540; void*x541; const void*x542; void*x543; void*x544; unsigned int x545; void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; char *x557; void*x558; void*x559; void*x560; void*x561; void*x562; short x563; void*x564; void*x565; void*x566; double x567; void*x568; SEL x569; void*x570; SEL x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; SEL x579; void*x580; SEL x581; void*x582; void*x583; void*x584; long x585; void*x586; long x587; void*x588; out void*x589; BOOL x590; void*x591; void*x592; void*x593; void*x594; void*x595; out void*x596; const void*x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; out void*x604; SEL x605; void*x606; SEL x607; void*x608; float x609; void*x610; void*x611; void*x612; short x613; void*x614; void*x615; void*x616; void*x617; void*x618; short x619; void*x620; void*x621; void*x622; void*x623; void*x624; const void*x625; void*x626; void*x627; double x628; void*x629; void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; const void*x636; void*x637; void*x638; void*x639; void*x640; void*x641; void*x642; long x643; void*x644; SEL x645; void*x646; SEL x647; void*x648; unsigned long long x649; void*x650; void*x651; void*x652; void*x653; void*x654; const void*x655; void*x656; void*x657; unsigned int x658; void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; char *x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; struct x680; void*x681; void*x682; void*x683; short x684; void*x685; void*x686; void*x687; const void*x688; void*x689; void*x690; BOOL x691; void*x692; void*x693; void*x694; void*x695; void*x696; float x697; void*x698; void*x699; void*x700; short x701; void*x702; void*x703; void*x704; void*x705; void*x706; short x707; void*x708; void*x709; void*x710; void*x711; void*x712; const void*x713; void*x714; void*x715; double x716; void*x717; void*x718; void*x719; void*x720; void*x721; void*x722; void*x723; const void*x724; void*x725; void*x726; void*x727; void*x728; void*x729; void*x730; long x731; void*x732; SEL x733; void*x734; SEL x735; void*x736; unsigned long long x737; void*x738; void*x739; void*x740; void*x741; void*x742; const void*x743; void*x744; void*x745; unsigned int x746; void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; struct x758; void*x759; }*)arg1 inContext:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg2;
- (void)dealloc;
- (id)initWithAnnotation:(id)arg1 style:(int)arg2;
- (struct { float x1; float x2; float x3; float x4; })innerColor;
- (bool)isStale;
- (double)presentationCourse;
- (float)scale;
- (void)setInnerColor:(struct { float x1; float x2; float x3; float x4; })arg1;
- (void)setModel:(id)arg1;
- (void)setPresentationCourse:(double)arg1;
- (void)setScale:(float)arg1;
- (void)setShouldShowCourse:(bool)arg1;
- (void)setStale:(bool)arg1;
- (void)setStyle:(int)arg1;
- (bool)shouldShowCourse;
- (int)style;
- (void)updateWithStyleQuery:(const struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > { struct StylesheetQuery<gss::PropertyID> {} *x1; struct __shared_weak_count {} *x2; }*)arg1 AtZ:(double)arg2;
- (void)willLayoutWithContext:(struct LayoutContext { id x1; short x2; /* Warning: Unrecognized filer type: 'h' using 'void*' */ void*x3; void*x4; const void*x5; double x6; void*x7; void*x8; void*x9; const void*x10; void*x11; double x12; SEL x13; SEL x14; oneway int x15; void*x16; void*x17; void*x18; const void*x19; in short x20; float x21; out const void*x22; void*x23; void*x24; struct ViewTransform {} *x25; struct __shared_weak_count {} *x26; }*)arg1;

@end

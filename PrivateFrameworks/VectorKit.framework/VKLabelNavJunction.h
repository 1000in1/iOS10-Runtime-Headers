/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, NSArray, VKLabelNavRoadLabel, VKLabelTile, NSMutableArray, VKLabelNavRoad, VKLabelNavJunction;

@interface VKLabelNavJunction : NSObject <VKLabelNavFeature> {
    VKLabelTile *_tile;
    struct Matrix<float, 2, 1> { 
        float _e[2]; 
    } _tileCoordinate;
    struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; } *_geoJunction;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    } _routeOffset;
    NSMutableArray *_roads;
    VKLabelNavRoad *_incomingRoad;
    VKLabelNavRoad *_outgoingRoad;
    float _distanceFromPreviousShieldLabel;
    int _preferredLabelPlacement;
    bool_isOnDualCarriageway;
    bool_hasSharedRouteDirection;
    struct Matrix<float, 2, 1> { 
        float _e[2]; 
    } _sharedRouteDirection;
    bool_foundRoads;
    bool_isOverpass;
    bool_isRouteOverpass;
    int _largestRoadClass;
    struct { struct { id x_1_1_1; char *x_1_1_2; unsigned long long x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned long long x_1_1_6; unsigned int x_1_1_7; unsigned long long x_1_1_8; boolx_1_1_9; unsigned long long x_1_1_10; float x_1_1_11; unsigned long long x_1_1_12; id x_1_1_13; int x_1_1_14; } x1; struct { float x_2_1_1; float x_2_1_2; } x2; unsigned char x3; unsigned char x4; unsigned char x5; struct { /* ? */ } *x6; } *_labelFeature;
    NSString *_name;
    VKLabelNavRoadLabel *_junctionSign;
    bool_areLabelsDisabled;
    unsigned long long _depthFromRoute;
    double _worldUnitsPerMeter;
    VKLabelNavJunction *_overpassJunction;
    struct VKPoint { 
        double x; 
        double y; 
        double z; 
    } _worldCoordinate;
    double _sortValue;
    bool_isRouteRefineJunction;
}

@property(readonly) VKLabelTile * tile;
@property(readonly) const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; }* geoJunction;
@property(readonly) /* Warning: unhandled struct encoding: '{Matrix<float' */ struct  tileCoordinate; /* unknown property attribute:  1>=[2f]} */
@property struct PolylineCoordinate { unsigned int x1; float x2; } routeOffset;
@property(readonly) NSArray * roads;
@property(readonly) VKLabelNavRoad * outgoingRoad;
@property(readonly) VKLabelNavRoad * incomingRoad;
@property float distanceFromPreviousShieldLabel;
@property bool isOnDualCarriageway;
@property(readonly) bool hasSharedRouteDirection;
@property struct  sharedRouteDirection; /* unknown property attribute:  1>=[2f]} */
@property(readonly) bool isOnRoute;
@property(readonly) bool isIntraRamp;
@property(readonly) bool isTileEdgeJunction;
@property bool isRouteRefineJunction;
@property(readonly) bool isRoadTerminus;
@property(readonly) bool isIntersection;
@property(readonly) bool isMultiRoadIntersection;
@property(readonly) bool isAwayFromRoute;
@property(readonly) bool isOffRouteGraph;
@property(readonly) bool isOverpass;
@property bool isRouteOverpass;
@property(readonly) int largestRoadClass;
@property unsigned long long depthFromRoute;
@property VKLabelNavJunction * overpassJunction;
@property(readonly) double worldUnitsPerMeter;
@property(readonly) NSString * name;
@property(readonly) VKLabelNavRoadLabel * junctionSign;
@property(readonly) int requiredLabelPlacement;
@property int preferredLabelPlacement;
@property(readonly) bool isRamp;
@property(readonly) NSString * shieldDisplayGroup;
@property(readonly) bool isStartOfRoadName;
@property(readonly) bool isInGuidance;
@property(readonly) long long intraRoadPriority;
@property(readonly) bool isGuidanceStepStart;


- (void)setIsRouteRefineJunction:(bool)arg1;
- (bool)isRouteRefineJunction;
- (bool)isRouteOverpass;
- (void)setOverpassJunction:(id)arg1;
- (id)overpassJunction;
- (unsigned long long)depthFromRoute;
- (struct Matrix<float, 2, 1> { float x1[2]; })sharedRouteDirection;
- (bool)hasSharedRouteDirection;
- (void)setIsOnDualCarriageway:(bool)arg1;
- (void)setDistanceFromPreviousShieldLabel:(float)arg1;
- (float)distanceFromPreviousShieldLabel;
- (int)preferredLabelPlacement;
- (const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; }*)geoJunction;
- (void)setSharedRouteDirection:(struct Matrix<float, 2, 1> { float x1[2]; })arg1;
- (void)addRouteEdge:(const struct VKLabelNavRouteRoadEdge { struct PolylineCoordinate { unsigned int x_1_1_1; float x_1_1_2; } x1; struct PolylineCoordinate { unsigned int x_2_1_1; float x_2_1_2; } x2; struct { /* ? */ } *x3; }*)arg1 atA:(bool)arg2;
- (int)largestRoadClass;
- (bool)isOffRouteGraph;
- (bool)isRoadTerminus;
- (bool)isTileEdgeJunction;
- (bool)matchesLocationForJunction:(id)arg1;
- (id)initWithRoadEdge:(const struct { struct { /* ? */ } *x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; struct { /* ? */ } *x6; struct { /* ? */ } *x7; }*)arg1 atA:(bool)arg2 routeOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg3 tile:(id)arg4;
- (id)initWithGEOJunction:(struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct { /* ? */ } *x5; }*)arg1 routeOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg2 tile:(id)arg3;
- (struct VKPoint { double x1; double x2; double x3; })_anchorCoordinateForSignOrientation:(long long)arg1;
- (long long)_signOrientationWithDrivingSide:(bool)arg1;
- (bool)isIntersection;
- (void)findRoads;
- (struct Matrix<float, 2, 1> { float x1[2]; })tileCoordinate;
- (void)setPreferredLabelPlacement:(int)arg1;
- (int)requiredLabelPlacement;
- (bool)isOnDualCarriageway;
- (void)evaluateCrossStreetsUsingRouteJunction:(id)arg1;
- (void)setIsRouteOverpass:(bool)arg1;
- (bool)isIntraRamp;
- (bool)isOverpass;
- (void)setDepthFromRoute:(unsigned long long)arg1;
- (void)evaluateCrossStreets;
- (id)roads;
- (id)junctionSign;
- (void)createLabelWithNavContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; }*)arg1 isDrivingSideRight:(bool)arg2;
- (id)tile;
- (bool)isGuidanceStepStart;
- (long long)intraRoadPriority;
- (bool)isInGuidance;
- (bool)isStartOfRoadName;
- (id)shieldDisplayGroup;
- (id)incomingRoad;
- (id)outgoingRoad;
- (bool)isOnRoute;
- (bool)isMultiRoadIntersection;
- (double)worldUnitsPerMeter;
- (bool)isAwayFromRoute;
- (void)setRouteOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeOffset;
- (bool)isRamp;
- (id)name;
- (void)dealloc;
- (id).cxx_construct;
- (id)description;

@end

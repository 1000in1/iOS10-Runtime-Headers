/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CameraKit.framework/CameraKit
 */

@interface CAMTimelapseDiskUtilities : NSObject  {
}

+ (id)dummyFilePathForTimelapseUUID:(id)arg1;
+ (id)dummyFileName;
+ (long long)frameIndexFromImageFileName:(id)arg1;
+ (bool)writeSecondaryStateToDisk:(id)arg1 forTimelapseUUID:(id)arg2;
+ (id)secondaryStateFilePathForTimelapseUUID:(id)arg1;
+ (id)secondaryStateFileName;
+ (id)stateFilePathForTimelapseUUID:(id)arg1;
+ (id)stateFileName;
+ (id)timelapseDirectoryPathCreateIfNeeded:(bool)arg1;
+ (bool)hasPendingWork;
+ (id)fileNameForImageFrameIndex:(long long)arg1;
+ (bool)reserveDummyFileForTimelapseUUID:(id)arg1 width:(long long)arg2 height:(long long)arg3;
+ (id)updateSecondaryStateForMovieWriteAttemptForTimelapseUUID:(id)arg1;
+ (bool)removeDummyFileForTimelapseUUID:(id)arg1;
+ (id)readSecondaryStateForTimelapseUUID:(id)arg1;
+ (id)directoryPathForTimelapseUUID:(id)arg1;
+ (id)sortedArrayFromFilePathDictionary:(id)arg1 reverse:(bool)arg2;
+ (id)readFrameFilePathsForTimelapseUUID:(id)arg1;
+ (bool)writeStateToDisk:(id)arg1 createDirectoryIfNeeded:(bool)arg2;
+ (id)updateSecondaryStateForTimelapseUUID:(id)arg1 withStopReasons:(long long)arg2 stopTime:(id)arg3;
+ (id)timelapseDirectoryPath;
+ (id)updateSecondaryStateForTimelapseUUID:(id)arg1 forStateReadSuccessfully:(bool)arg2;
+ (id)timelapseUUIDsOnDisk;
+ (id)readStateForTimelapseUUID:(id)arg1 mergeSecondaryState:(bool)arg2;
+ (id)readSortedStatesFromDiskMergeSecondaryState:(bool)arg1;


@end

/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet
 */

@interface _CDActivity : NSObject {
    BOOL  _afterUserIsInactive;
    BOOL  _allowOnBattery;
    CDAttribute * _attribute;
    BOOL  _beforeUserIsActive;
    BOOL  _budgeted;
    int  _budgetedPid;
    unsigned long long  _budgetingToken;
    NSString * _bundleId;
    BOOL  _cpuIntensive;
    BOOL  _deviceWakeAllowed;
    BOOL  _discretionaryActivity;
    NSDate * _executeBefore;
    NSObject<OS_dispatch_queue> * _handlerQueue;
    NSNumber * _identifier;
    BOOL  _ioIntensive;
    double  _leeway;
    BOOL  _memoryIntensive;
    NSString * _name;
    NSString * _networkAvailability;
    int  _pid;
    NSDate * _scheduledTime;
    NSDate * _startAfter;
    id /* block */  _startHandler;
    unsigned int  _state;
    id /* block */  _suspendHandler;
    BOOL  _triggersRestart;
}

@property (nonatomic) BOOL afterUserIsInactive;
@property (nonatomic) BOOL allowOnBattery;
@property (retain) CDAttribute *attribute;
@property (nonatomic) BOOL beforeUserIsActive;
@property (nonatomic) BOOL budgeted;
@property (nonatomic) int budgetedPid;
@property unsigned long long budgetingToken;
@property (nonatomic, retain) NSString *bundleId;
@property (nonatomic) BOOL cpuIntensive;
@property (nonatomic) BOOL deviceWakeAllowed;
@property (nonatomic) BOOL discretionaryActivity;
@property (nonatomic, copy) NSDate *executeBefore;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *handlerQueue;
@property (retain) NSNumber *identifier;
@property (nonatomic) BOOL ioIntensive;
@property double leeway;
@property (nonatomic) BOOL memoryIntensive;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, retain) NSString *networkAvailability;
@property int pid;
@property (retain) NSDate *scheduledTime;
@property (nonatomic, copy) NSDate *startAfter;
@property (nonatomic, copy) id /* block */ startHandler;
@property unsigned int state;
@property (nonatomic, copy) id /* block */ suspendHandler;
@property (nonatomic) BOOL triggersRestart;

+ (id)activityWithName:(id)arg1 startAfter:(id)arg2 executeBefore:(id)arg3 handlerQueue:(id)arg4 handler:(id /* block */)arg5;

- (void).cxx_destruct;
- (BOOL)afterUserIsInactive;
- (BOOL)allowOnBattery;
- (id)attribute;
- (BOOL)beforeUserIsActive;
- (BOOL)budgeted;
- (int)budgetedPid;
- (unsigned long long)budgetingToken;
- (id)bundleId;
- (BOOL)checkForBudget;
- (BOOL)cpuIntensive;
- (BOOL)deviceWakeAllowed;
- (BOOL)discretionaryActivity;
- (id)executeBefore;
- (id)handlerQueue;
- (id)identifier;
- (id)init;
- (id)initWithName:(id)arg1 startAfter:(id)arg2 executeBefore:(id)arg3 handlerQueue:(id)arg4 handler:(id /* block */)arg5;
- (BOOL)ioIntensive;
- (double)leeway;
- (BOOL)memoryIntensive;
- (id)name;
- (id)networkAvailability;
- (int)pid;
- (id)scheduledTime;
- (void)setAfterUserIsInactive:(BOOL)arg1;
- (void)setAllowOnBattery:(BOOL)arg1;
- (void)setAttribute:(id)arg1;
- (void)setBeforeUserIsActive:(BOOL)arg1;
- (void)setBudgeted:(BOOL)arg1;
- (void)setBudgetedPid:(int)arg1;
- (void)setBudgetingToken:(unsigned long long)arg1;
- (void)setBundleId:(id)arg1;
- (void)setCpuIntensive:(BOOL)arg1;
- (void)setDeviceWakeAllowed:(BOOL)arg1;
- (void)setDiscretionaryActivity:(BOOL)arg1;
- (void)setExecuteBefore:(id)arg1;
- (void)setHandlerQueue:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIoIntensive:(BOOL)arg1;
- (void)setLeeway:(double)arg1;
- (void)setMemoryIntensive:(BOOL)arg1;
- (void)setName:(id)arg1;
- (void)setNetworkAvailability:(id)arg1;
- (void)setPid:(int)arg1;
- (void)setScheduledTime:(id)arg1;
- (void)setStartAfter:(id)arg1;
- (void)setStartHandler:(id /* block */)arg1;
- (void)setState:(unsigned int)arg1;
- (void)setSuspendHandler:(id /* block */)arg1;
- (void)setTriggersRestart:(BOOL)arg1;
- (id)startAfter;
- (void)startBudgetAccounting;
- (id /* block */)startHandler;
- (unsigned int)state;
- (void)stopBudgetAccounting;
- (id /* block */)suspendHandler;
- (BOOL)triggersRestart;
- (BOOL)updateAttribute;

@end

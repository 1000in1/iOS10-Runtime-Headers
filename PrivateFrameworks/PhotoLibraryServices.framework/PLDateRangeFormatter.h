/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
 */

@class NSDateFormatter, NSLocale;

@interface PLDateRangeFormatter : NSObject  {
    bool_autoUpdateOnChanges;
    bool_includeDayNumbers;
    bool_includeDayNumbersWhenMonthsDiffer;
    bool_useRelativeDayFormatting;
    bool_useShortMonths;
    bool_useShortDaysInRanges;
    bool_useTime;
    bool_yearOnly;
    bool_timeOnly;
    NSDateFormatter *__sameDayDateFormatter;
    NSDateFormatter *__sameDayNoYearDateFormatter;
    NSDateFormatter *__dayOfTheWeekDateFormatter;
    NSDateFormatter *__relativeDateFormatterDay;
    NSDateFormatter *__yearDateFormatter;
    struct UDateIntervalFormat { } *__monthDayIntervalFormat;
    struct UDateIntervalFormat { } *__monthDayNoYearIntervalFormat;
    struct UDateIntervalFormat { } *__differentMonthDayIntervalFormat;
    struct UDateIntervalFormat { } *__differentMonthDayNoYearIntervalFormat;
    struct UDateIntervalFormat { } *__dayOfTheWeekIntervalFormat;
    struct UDateIntervalFormat { } *__timeIntervalFormat;
    struct UDateIntervalFormat { } *__yearIntervalFormat;
    NSLocale *__currentLocale;
}

@property bool includeDayNumbers;
@property bool includeDayNumbersWhenMonthsDiffer;
@property bool useRelativeDayFormatting;
@property bool useShortMonths;
@property bool useShortDaysInRanges;
@property bool useTime;
@property bool yearOnly;
@property bool timeOnly;
@property bool autoUpdateOnChanges;
@property(setter=_setCurrentLocale:,retain) NSLocale * _currentLocale;
@property(retain,readonly) NSDateFormatter * _sameDayDateFormatter;
@property(retain,readonly) NSDateFormatter * _sameDayNoYearDateFormatter;
@property(retain,readonly) NSDateFormatter * _dayOfTheWeekDateFormatter;
@property(retain,readonly) NSDateFormatter * _yearDateFormatter;
@property(retain,readonly) NSDateFormatter * _relativeDateFormatterDay;
@property(readonly) struct UDateIntervalFormat { }* _monthDayIntervalFormat;
@property(readonly) struct UDateIntervalFormat { }* _monthDayNoYearIntervalFormat;
@property(readonly) struct UDateIntervalFormat { }* _differentMonthDayIntervalFormat;
@property(readonly) struct UDateIntervalFormat { }* _differentMonthDayNoYearIntervalFormat;
@property(readonly) struct UDateIntervalFormat { }* _dayOfTheWeekIntervalFormat;
@property(readonly) struct UDateIntervalFormat { }* _timeIntervalFormat;
@property(readonly) struct UDateIntervalFormat { }* _yearIntervalFormat;

+ (void)_dumpAllDateCombinationsWithFormatters;

- (id)_currentLocale;
- (bool)useTime;
- (void)_updateStartAndEndDatesAndDumpDateCombinationWithStartDate:(id)arg1 endDate:(id)arg2 currentDate:(id)arg3 dateFormatter:(id)arg4 calendarUnit:(unsigned long long)arg5 value:(long long)arg6;
- (void)_updateCurrentDateAndDumpDateCombinationWithStartDate:(id)arg1 endDate:(id)arg2 currentDate:(id)arg3 dateFormatter:(id)arg4 calendarUnit:(unsigned long long)arg5 value:(long long)arg6;
- (void)_dumpDateCombinationWithStartDate:(id)arg1 endDate:(id)arg2 currentDate:(id)arg3 dateFormatter:(id)arg4;
- (bool)autoUpdateOnChanges;
- (void)setAutoUpdateOnChanges:(bool)arg1;
- (void)_dumpDateCombinations;
- (id)_relativeCombinationsForDate:(id)arg1;
- (id)_dateCombinationAfterUpdatingStartAndEndDatesWithStartDate:(id)arg1 endDate:(id)arg2 currentDate:(id)arg3 dateFormatter:(id)arg4 calendarUnit:(unsigned long long)arg5 value:(long long)arg6;
- (id)_dateCombinationAfterUpdatingCurrentDateWithStartDate:(id)arg1 endDate:(id)arg2 currentDate:(id)arg3 dateFormatter:(id)arg4 calendarUnit:(unsigned long long)arg5 value:(long long)arg6;
- (void)_updateDateComponents:(id)arg1 withValueValue:(long long)arg2 forCalendarUnit:(unsigned long long)arg3;
- (id)_dateCombinationWithStartDate:(id)arg1 endDate:(id)arg2 currentDate:(id)arg3 dateFormatter:(id)arg4;
- (void)setTimeOnly:(bool)arg1;
- (void)setYearOnly:(bool)arg1;
- (void)setUseTime:(bool)arg1;
- (void)setUseShortDaysInRanges:(bool)arg1;
- (void)setUseShortMonths:(bool)arg1;
- (void)setUseRelativeDayFormatting:(bool)arg1;
- (void)setIncludeDayNumbersWhenMonthsDiffer:(bool)arg1;
- (void)setIncludeDayNumbers:(bool)arg1;
- (void)_invalidateFormats;
- (void)_significantTimeChange:(id)arg1;
- (id)formattedDateRangeWithStartDate:(id)arg1 endDate:(id)arg2;
- (id)formattedDateRangeWithStartDate:(id)arg1 endDate:(id)arg2 currentDate:(id)arg3;
- (id)_sameDayDateFormatter;
- (id)_sameDayNoYearDateFormatter;
- (bool)timeOnly;
- (struct UDateIntervalFormat { }*)_timeIntervalFormat;
- (id)_yearDateFormatter;
- (struct UDateIntervalFormat { }*)_monthDayIntervalFormat;
- (struct UDateIntervalFormat { }*)_monthDayNoYearIntervalFormat;
- (struct UDateIntervalFormat { }*)_differentMonthDayIntervalFormat;
- (struct UDateIntervalFormat { }*)_differentMonthDayNoYearIntervalFormat;
- (struct UDateIntervalFormat { }*)_yearIntervalFormat;
- (bool)yearOnly;
- (id)_relativeDateFormatterDay;
- (id)_formattedDateWithUDateFormatter:(struct UDateIntervalFormat { }*)arg1 startDate:(id)arg2 endDate:(id)arg3;
- (struct UDateIntervalFormat { }*)_dayOfTheWeekIntervalFormat;
- (bool)_date:(id)arg1 isWithinDaysInThePast:(long long)arg2;
- (bool)_date:(id)arg1 isWithinDaysInThePast:(long long)arg2 fromCurrentDate:(id)arg3;
- (bool)useShortDaysInRanges;
- (id)_dayDifferentMonthsTemplate;
- (struct UDateIntervalFormat { }*)_newUDateFormatterForLocale:(id)arg1 template:(id)arg2;
- (bool)useRelativeDayFormatting;
- (id)_dayTemplate;
- (id)_sameMonthTemplate;
- (bool)includeDayNumbersWhenMonthsDiffer;
- (bool)includeDayNumbers;
- (bool)useShortMonths;
- (void)_releaseUDateFormatter:(struct UDateIntervalFormat { }*)arg1;
- (void)_setCurrentLocale:(id)arg1;
- (void)configureForFormatPreset:(unsigned long long)arg1;
- (id)_dayOfTheWeekDateFormatter;
- (id)formattedDate:(id)arg1;
- (void)_localeChanged:(id)arg1;
- (void)_postChangeNotification;
- (id)init;
- (void)dealloc;

@end

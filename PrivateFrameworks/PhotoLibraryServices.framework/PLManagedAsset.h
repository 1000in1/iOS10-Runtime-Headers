/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
 */

@class NSDictionary, NSOrderedSet, NSString, NSError, UIImage, NSArray, <PLCloudSharedAlbumProtocol>, NSSet, PLMoment, NSData, NSManagedObject, PLCloudMaster, CLLocation, PLAdditionalAssetAttributes, NSObject<NSCopying>, PLManagedAsset, NSURL, NSDate, PLCloudFeedAssetsEntry, NSNumber;

@interface PLManagedAsset : PLManagedObject <UIActivityItemSource, PLMomentAssetData_Private, _PLImageLoadingAsset> {
    bool_didPrepareForDeletion;
    bool_isRegisteredForChanges;
    bool_needsMomentUpdate;
    bool_disableDupeAnalysis;
    bool_disableFileSystemPersistency;
    bool_didPersistEAs;
    bool_didLoadReverseGeo;
    bool_isLocatedAtHome;
    bool_setCustomCreationDate;
    bool_setCustomLocation;
    NSString *_reverseGeoDescription;
    NSURL *cachedNonPersistedVideoPlaybackURL;
    NSDate *cachedNonPersistedVideoPlaybackURLExpiration;
    NSError *cachedNonPersistedVideoPlaybackURLError;
    UIImage *inflightImageInMemory;
    NSString *inflightImagePath;
    UIImage *inflightIndexSheetImage;
    NSDictionary *inflightMetadata;
}

@property(setter=setSearchDataValid:) bool isSearchDataValid;
@property(retain) NSData * searchCategoryData;
@property(retain) NSString * creatorBundleID;
@property(retain) NSString * editorBundleID;
@property(retain) NSString * originalAssetsUUID;
@property short originalHeight;
@property short originalWidth;
@property(retain) NSData * originalHash;
@property(retain) NSString * publicGlobalUUID;
@property long long externalUsageIntent;
@property(retain) NSString * originalFilename;
@property short originalOrientation;
@property int originalFilesize;
@property(retain) NSString * originalPath;
@property(retain) NSString * importSessionID;
@property(readonly) bool hasEmbeddedThumbnail;
@property(retain,readonly) NSData * embeddedThumbnailData;
@property int embeddedThumbnailOffset;
@property int embeddedThumbnailLength;
@property short embeddedThumbnailWidth;
@property short embeddedThumbnailHeight;
@property int locationHash;
@property(retain) NSString * longDescription;
@property(retain) NSString * title;
@property(retain) NSSet * cloudResources;
@property(retain) PLCloudMaster * cloudMaster;
@property(retain) NSString * cloudBatchID;
@property(retain) NSDate * cloudBatchPublishDate;
@property(retain) NSDate * cloudServerPublishDate;
@property(retain) NSString * cloudAssetGUID;
@property(retain) NSString * cloudCollectionGUID;
@property bool cloudHasUnseenComments;
@property bool cloudHasCommentsByMe;
@property(retain) NSDate * cloudLastViewedCommentDate;
@property(retain) PLCloudFeedAssetsEntry * cloudFeedAssetsEntry;
@property(retain) NSString * cloudOwnerHashedPersonID;
@property bool cloudIsDeletable;
@property bool cloudIsMyAsset;
@property(retain) NSNumber * cloudDownloadRequests;
@property(readonly) NSString * cloudOwnerEmail;
@property(readonly) NSString * cloudOwnerFullName;
@property(readonly) NSString * cloudOwnerFirstName;
@property(readonly) NSString * cloudOwnerLastName;
@property bool cloudHasCommentsConversation;
@property(retain) NSOrderedSet * cloudComments;
@property(retain) NSOrderedSet * likeComments;
@property(readonly) unsigned long long totalCommentsCount;
@property short cloudPlaceholderKind;
@property bool userCloudSharedLiked;
@property int avalanchePickType;
@property(retain) NSString * avalancheUUID;
@property bool complete;
@property(retain) NSDate * dateCreated;
@property(retain) NSString * directory;
@property(retain) NSString * filename;
@property bool favorite;
@property short height;
@property short highDynamicRangeType;
@property short kind;
@property short kindSubtype;
@property(retain) NSDate * lastSharedDate;
@property(retain) NSData * locationData;
@property(retain) NSDate * modificationDate;
@property short orientation;
@property short savedAssetType;
@property double sortToken;
@property short trashedState;
@property(retain) NSDate * trashedDate;
@property(retain) NSDate * addedDate;
@property double duration;
@property(retain) NSString * uniformTypeIdentifier;
@property(retain) id uuid;
@property short visibilityState;
@property bool hidden;
@property short width;
@property bool hasAdjustments;
@property(retain) PLAdditionalAssetAttributes * additionalAttributes;
@property(retain) NSOrderedSet * adjustments;
@property(retain) NSSet * albums;
@property(retain) NSSet * albumsBeingCustomKeyAssetFor;
@property(retain) NSSet * albumsBeingKeyAssetFor;
@property(retain) NSSet * albumsBeingSecondaryKeyAssetFor;
@property(retain) NSSet * albumsBeingTertiaryKeyAssetFor;
@property(retain) NSSet * faces;
@property(retain) NSOrderedSet * likeComments;
@property(retain) PLMoment * moment;
@property(retain) NSSet * sidecarFiles;
@property(retain) NSSet * albumOrders;
@property short cloudLocalState;
@property short cloudServerState;
@property(retain) NSManagedObject * searchData;
@property(retain) NSData * reverseLocationData;
@property bool reverseLocationDataIsValid;
@property(retain) NSString * customMomentName;
@property(retain) NSString * customMomentUUID;
@property(retain) NSString * customCollectionName;
@property(retain) NSString * customCollectionUUID;
@property(retain) CLLocation * location;
@property unsigned long long effectiveThumbnailIndex;
@property(retain) PLManagedAsset * originalAsset;
@property bool isInFlight;
@property(retain,readonly) UIImage * inflightImage;
@property(retain) UIImage * inflightImageInMemory;
@property(retain) NSString * inflightImagePath;
@property(retain) UIImage * inflightIndexSheetImage;
@property(retain) NSDictionary * inflightMetadata;
@property struct CGSize { double x1; double x2; } imageSize;
@property struct { double x1; double x2; } gpsCoordinate;
@property(readonly) bool isPhotoStreamPhoto;
@property(readonly) bool isUsedByiPhoto;
@property(readonly) bool isCloudSharedAsset;
@property(readonly) bool isCloudPhotoLibraryAsset;
@property(readonly) <PLCloudSharedAlbumProtocol> * cloudShareAlbum;
@property(readonly) bool isVideo;
@property(readonly) bool isStreamedVideo;
@property(readonly) bool isHDVideo;
@property(readonly) bool isMogul;
@property(readonly) bool isPhoto;
@property(readonly) bool isAudio;
@property(readonly) bool allowsWallpaperEditing;
@property bool needsMomentUpdate;
@property bool disableDupeAnalysis;
@property bool disableFileSystemPersistency;
@property(copy,readonly) NSArray * sortedSidecarFiles;
@property(readonly) bool isJPEG;
@property(copy,readonly) NSURL * mainFileURL;
@property(copy,readonly) NSSet * allFileURLs;
@property(copy,readonly) NSSet * filePathsWithoutThumbs;
@property(copy,readonly) NSString * pathForLargeThumbnailFile;
@property(copy,readonly) NSString * pathForOriginalFile;
@property(copy,readonly) NSString * pathForMediumVideoFile;
@property(copy,readonly) NSString * pathForSmallVideoFile;
@property(copy,readonly) NSURL * fileURLForLargeThumbnailFile;
@property(copy,readonly) NSArray * allUniformTypeIdentifiers;
@property(copy,readonly) NSString * fileExtension;
@property(copy,readonly) NSString * pathForMetadataDirectory;
@property(copy,readonly) NSString * pathForAdjustmentDirectory;
@property(copy,readonly) NSURL * fileURLForThumbnailFile;
@property(copy,readonly) NSString * pathForPrebakedLandscapeScrubberThumbnails;
@property(copy,readonly) NSURL * fileURLForPrebakedLandscapeScrubberThumbnails;
@property(copy,readonly) NSString * pathForPrebakedPortraitScrubberThumbnails;
@property(copy,readonly) NSURL * fileURLForPrebakedPortraitScrubberThumbnails;
@property(copy,readonly) NSString * pathForPrebakedWildcatThumbnailsFile;
@property(copy,readonly) NSString * pathForTrimmedVideoFile;
@property(copy,readonly) NSString * pathForVideoPreviewFile;
@property(copy,readonly) NSString * pathForVideoFile;
@property(copy,readonly) NSString * pathForLargeDisplayableImageFile;
@property(copy,readonly) NSString * pathForMediumThumbnailFile;
@property(copy,readonly) NSString * pathForXMPFile;
@property(copy,readonly) NSString * pathForLegacySlalomRegionsArchive;
@property(copy,readonly) NSString * textBadgeString;
@property(retain) NSURL * cachedNonPersistedVideoPlaybackURL;
@property(retain) NSDate * cachedNonPersistedVideoPlaybackURLExpiration;
@property(retain) NSError * cachedNonPersistedVideoPlaybackURLError;
@property(retain,readonly) UIImage * wallpaperFullScreenImage;
@property(retain,readonly) NSURL * assetURL;
@property int thumbnailIndex;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(retain,readonly) NSObject<NSCopying> * uniqueObjectID;
@property(retain,readonly) NSString * cloudAssetGUID;

+ (id)uuidFromAssetURL:(id)arg1;
+ (int)portraitScrubberThumbnailFormat;
+ (int)landscapeScrubberThumbnailFormat;
+ (int)wildcatPhotoScrubberFormat;
+ (void)markAssetAsRecentlyUsed:(id)arg1;
+ (id)cloudSharedAssetsWithGUIDs:(id)arg1 inLibrary:(id)arg2;
+ (id)allCloudSharedAssetsInLibrary:(id)arg1;
+ (id)recentlyUsedGUIDsPath;
+ (id)cloudAssetsInLibrary:(id)arg1;
+ (short)PLPhotoHDRTypeFromCPLAssetHDRType:(unsigned long long)arg1;
+ (unsigned long long)CPLAssetHDRTypeFromPLPhotoHDRType:(short)arg1;
+ (long long)pfAdjustmentsBaseVersionFromAdjustmentBaseVersion:(long long)arg1;
+ (id)assetsToResetInLibrary:(id)arg1;
+ (bool)assetTypeIsSupportedForUpload:(short)arg1;
+ (id)_supportedAssetTypesForUpload;
+ (id)fileURLFromAssetURL:(id)arg1 photoLibrary:(id)arg2;
+ (int)formatForThumbnailGeneration;
+ (int)feedEntryThumbnailFormat;
+ (bool)isValidFileExtensionForImport:(id)arg1;
+ (int)imageFormatFromAdjustmentBaseVersion:(long long)arg1;
+ (long long)adjustmentBaseVersionFromImageFormat:(int)arg1;
+ (id)assetBaseFilenameForAdjustmentFilePath:(id)arg1;
+ (id)keyPathsForValuesAffectingIsJPEG;
+ (bool)guaranteedFlashOffForAssetAtURL:(id)arg1;
+ (id)keyPathsForValuesAffectingIsPhotoStreamPhoto;
+ (id)keyPathsForValuesAffectingGpsCoordinate;
+ (id)keyPathsForValuesAffectingImageSize;
+ (struct CGSize { double x1; double x2; })dimensionsForVideoAtURL:(id)arg1;
+ (id)pathsForAllIncompleteAssetsInManagedObjectContext:(id)arg1;
+ (id)incompleteAssetsInManagedObjectContext:(id)arg1;
+ (id)assetsWithSavedAssetType:(short)arg1 inManagedObjectContext:(id)arg2;
+ (unsigned long long)countAssetsWithKind:(short)arg1 inManagedObjectContext:(id)arg2;
+ (id)fetchPredicateForLegacyRequiredResourcesLocallyAvailable;
+ (id)assetWithObjectID:(id)arg1 inLibrary:(id)arg2;
+ (id)uuidFromAssetURL:(id)arg1 fileExtension:(id*)arg2 sidecarIndex:(id*)arg3;
+ (id)photoFromAssetURL:(id)arg1 photoLibrary:(id)arg2 sidecar:(id*)arg3;
+ (id)assetsLibraryURLWithUUID:(id)arg1 extension:(id)arg2;
+ (id)pathForAdjustmentDirectoryWithMutationsDirectory:(id)arg1;
+ (id)pathForMutationsDirectoryWithDirectory:(id)arg1 filename:(id)arg2;
+ (id)_pathsByAssetUUIDFromFetchResults:(id)arg1 absolute:(bool)arg2;
+ (id)abbreviatedMetadataDirectoryForDirectory:(id)arg1;
+ (void)extractDirectory:(id*)arg1 andFilename:(id*)arg2 fromMainFileURL:(id)arg3;
+ (struct { double x1; double x2; })locationFromAVAsset:(id)arg1;
+ (id)_insertAssetIntoPhotoLibrary:(id)arg1 mainFileURL:(id)arg2 savedAssetType:(short)arg3 replacementUUID:(id)arg4 imageSource:(struct CGImageSource {}**)arg5 imageData:(id*)arg6 isPlaceholder:(bool)arg7;
+ (short)_correctedOrientation:(short)arg1;
+ (id)locationFromLocationData:(id)arg1 timestampIfMissing:(id)arg2 outUsesCompactFormat:(bool*)arg3;
+ (id)assetWithObjectID:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)assetsWithUUIDs:(id)arg1 includePendingChanges:(bool)arg2 inLibrary:(id)arg3;
+ (id)createCloudPhotoLibraryAssetWithAssetRecord:(id)arg1 masterRecord:(id)arg2 inLibrary:(id)arg3;
+ (void)fixupCloudPhotoLibraryAsset:(id)arg1 withMasterIdentifier:(id)arg2 inLibrary:(id)arg3;
+ (void)fixupCloudPhotoLibraryAsset:(id)arg1 withMasterRecord:(id)arg2 inLibrary:(id)arg3;
+ (id)assetsWithCloudAssetUUIDs:(id)arg1 inLibrary:(id)arg2;
+ (id)assetsToUploadInitiallyInLibrary:(id)arg1 limit:(unsigned long long)arg2;
+ (int)largestNonJPEGThumbnailFormat;
+ (int)indexSheetUnbakedFormat;
+ (int)posterThumbnailFormat;
+ (int)fullSizeImageFormat;
+ (int)masterThumbnailFormat;
+ (id)bestCreationDateForAssetAtURL:(id)arg1 modificationDate:(id*)arg2 creationDateString:(id*)arg3;
+ (id)assetWithCloudAssetUUID:(id)arg1 inLibrary:(id)arg2;
+ (long long)adjustmentBaseVersionFromPFAdjustmentsBaseVersion:(long long)arg1;
+ (int)wildcatIndexSheetFormat;
+ (short)assetTypeFromUniformTypeIdentifier:(id)arg1;
+ (id)uniformTypeIdentifierFromPathExtension:(id)arg1 assetType:(short)arg2;
+ (id)assetsWithUUIDs:(id)arg1 inLibrary:(id)arg2;
+ (id)diagnosticFilePathForMainFilePath:(id)arg1;
+ (struct CGSize { double x1; double x2; })dimensionsForAVAsset:(id)arg1;
+ (id)_fakeGeo;
+ (id)baseSearchIndexPredicate;
+ (int)indexSheetBakedFormat;
+ (id)URLForMetadataWithExtension:(id)arg1 forMediaInMainDirectory:(id)arg2 withFilename:(id)arg3;
+ (id)insertAssetIntoPhotoLibrary:(id)arg1 mainFileURL:(id)arg2 savedAssetType:(short)arg3 replacementUUID:(id)arg4 imageSource:(struct CGImageSource {}**)arg5 imageData:(id*)arg6;
+ (id)insertInManagedObjectContext:(id)arg1;
+ (id)assetWithUUID:(id)arg1 inLibrary:(id)arg2;
+ (id)insertAssetIntoPhotoLibrary:(id)arg1 mainFileURL:(id)arg2 savedAssetType:(short)arg3 replacementUUID:(id)arg4 imageSource:(struct CGImageSource {}**)arg5 imageData:(id*)arg6 isPlaceholder:(bool)arg7;
+ (id)photoFromAssetURL:(id)arg1 photoLibrary:(id)arg2;
+ (id)entityInManagedObjectContext:(id)arg1;
+ (id)assetWithUUID:(id)arg1 inManagedObjectContext:(id)arg2;
+ (unsigned long long)countUsedAssetsWithKind:(short)arg1 inManagedObjectContext:(id)arg2;
+ (id)extensionForMediumThumbnailFile;
+ (id)extensionForLargeThumbnailFile;
+ (id)sortedCloudSharedAssetsWithPlaceholderKind:(short)arg1 ascending:(bool)arg2 inLibrary:(id)arg3;
+ (id)persistedRecentlyUsedGUIDS;
+ (id)preferredFileExtensionForType:(id)arg1;
+ (int)wildcatStackFormat;
+ (int)thumbnailFormat;
+ (id)entityName;
+ (id)pl_PHAssetsForManagedAssets:(id)arg1;

- (void)didSetCustomLocation;
- (void)didSetCustomDateCreated;
- (bool)isCloudPhotoLibraryAsset;
- (id)managedAssetForPhotoLibrary:(id)arg1;
- (long long)originalImageOrientation;
- (id)debugFilename;
- (bool)isPartOfBurst;
- (long long)cloudSharedAssetPlaceholderKind;
- (id)userAddCloudSharedCommentWithText:(id)arg1;
- (void)setUserCloudSharedLiked:(bool)arg1;
- (void)userDeleteCloudSharedComment:(id)arg1;
- (void)writeXMPWithProperties:(id)arg1 orientation:(int)arg2;
- (bool)allowsWallpaperEditing;
- (id)newFullSizeImage;
- (id)cachedNonPersistedVideoPlaybackURLError;
- (id)pathForTrimmedVideoFile;
- (id)pathForPrebakedPortraitScrubberThumbnails;
- (id)pathForPrebakedLandscapeScrubberThumbnails;
- (id)cachedNonPersistedVideoPlaybackURL;
- (id)pathToOriginalVideoFile;
- (bool)isHDVideo;
- (bool)isPhoto;
- (void)userReadAllCloudSharedComments;
- (bool)cloudHasSameOwnerAsAsset:(id)arg1;
- (int)cloudCommentsStatusForOwnedAsset:(bool)arg1;
- (void)addComment:(id)arg1;
- (bool)userCloudSharedLiked;
- (void)deleteComment:(id)arg1;
- (unsigned long long)totalCommentsCount;
- (long long)orderInAlbumCloudUuid:(id)arg1 fromRelations:(id)arg2;
- (long long)_plAdjustmentBaseVersionFromCPLAdjustmentSourceType:(unsigned long long)arg1;
- (short)_plAssetSubtypeFromCPLAssetSubtype:(unsigned long long)arg1;
- (int)_avalancheTypeFromCplBurstFlags:(unsigned long long)arg1;
- (bool)_location:(id)arg1 isEqualToLocationForUpdating:(id)arg2;
- (void)_applyPropertiesFromCloudMaster:(id)arg1;
- (void)_createCloudMasterFromMasterChange:(id)arg1;
- (id)cplRelationsForAsset;
- (void)applyResourceChangeToCPLAsset:(id)arg1 withIdentifier:(id)arg2 forChangeType:(unsigned long long)arg3;
- (void)applyPropertiesChangeToCPLAssetChange:(id)arg1 withMasterID:(id)arg2;
- (id)_createVideoResourceFromVideoURL:(id)arg1 withResourceType:(unsigned long long)arg2 itemIdentifier:(id)arg3 applyVideoAdjustments:(bool)arg4;
- (id)_generatePosterFrameForVideoAtURL:(id)arg1 withResourceType:(unsigned long long)arg2 itemIdentifier:(id)arg3;
- (unsigned long long)_cplAdjustmentSourceTypeFromPLAdjustmentBaseVersion:(long long)arg1;
- (void)_debugPrintAdjustmentState;
- (id)cloudResources;
- (unsigned long long)_cplAssetSubtypeFromPLAssetSubtype:(short)arg1;
- (unsigned long long)originalResourceChoice;
- (unsigned long long)_cplBurstFlagsForAsset;
- (id)_itemIdentifier;
- (id)utiForResourceType:(unsigned long long)arg1;
- (id)_fileNameFormatForResourceType:(unsigned long long)arg1;
- (struct CGSize { double x1; double x2; })_targetSizeForInputSize:(struct CGSize { double x1; double x2; })arg1 maxPixelSize:(unsigned long long)arg2;
- (void)_createResourcesFromExistingCloudResources:(id)arg1 withItemIdentifier:(id)arg2 fileURLToGenerateDerivatives:(id)arg3 applyAdjustment:(bool)arg4 validResources:(id)arg5 invalidResources:(id)arg6;
- (void)_migrateResourcePathForMaster:(id)arg1;
- (id)_generateVideoResourcesFromURL:(id)arg1 withIdentifier:(id)arg2 shouldGenerateVideoDerivatives:(bool)arg3;
- (id)_createImageResourceForResourceType:(unsigned long long)arg1 withPreviewImagePath:(id)arg2 itemIdentifier:(id)arg3;
- (void)setOriginalResourceChoice:(unsigned long long)arg1;
- (id)_createCPLResourceFromResourcePath:(id)arg1 withResourceType:(unsigned long long)arg2 uniformTypeIdentifier:(id)arg3 itemIdentifier:(id)arg4 imageSize:(struct CGSize { double x1; double x2; })arg5;
- (struct CGSize { double x1; double x2; })_sizeOfImageAtURL:(id)arg1;
- (void)setCloudMaster:(id)arg1;
- (void)setCloudResources:(id)arg1;
- (bool)canGenerateDerivatives;
- (void)setUploadAttempts:(short)arg1;
- (void)setLocationHash:(int)arg1;
- (int)locationHash;
- (void)setEmbeddedThumbnailHeight:(short)arg1;
- (void)setEmbeddedThumbnailWidth:(short)arg1;
- (void)setEmbeddedThumbnailLength:(int)arg1;
- (void)setEmbeddedThumbnailOffset:(int)arg1;
- (id)embeddedThumbnailData;
- (bool)hasEmbeddedThumbnail;
- (id)editorBundleID;
- (int)embeddedThumbnailLength;
- (short)embeddedThumbnailHeight;
- (short)embeddedThumbnailWidth;
- (void)_computePreCropThumbnailSize:(struct CGSize { double x1; double x2; }*)arg1 andPostCropSize:(struct CGSize { double x1; double x2; }*)arg2 forOrientedOriginalSize:(struct CGSize { double x1; double x2; })arg3 andCroppedSize:(struct CGSize { double x1; double x2; })arg4 isLargeThumbnail:(bool)arg5;
- (void)_writeXMPSidecarWithProperties:(id)arg1 orientation:(int)arg2;
- (bool)_writeXMPHeaderWithProperties:(id)arg1 orientation:(int)arg2;
- (bool)disableFileSystemPersistency;
- (void)setDisableDupeAnalysis:(bool)arg1;
- (bool)disableDupeAnalysis;
- (bool)needsMomentUpdate;
- (void)setCachedNonPersistedVideoPlaybackURLError:(id)arg1;
- (void)setCachedNonPersistedVideoPlaybackURLExpiration:(id)arg1;
- (void)setCachedNonPersistedVideoPlaybackURL:(id)arg1;
- (id)shortenedFilePath;
- (id)wallpaperFullScreenImage;
- (id)textBadgeString;
- (id)newLowResolutionFullScreenImage;
- (id)imageWithFormat:(int)arg1 outImageProperties:(const struct __CFDictionary {}**)arg2;
- (id)pathForXMPFile;
- (id)pathForPrebakedWildcatThumbnailsFile;
- (id)pathForSideCarImageFile;
- (id)pathForSmallVideoFile;
- (id)pathForMediumVideoFile;
- (bool)migrateLegacyAdjustments;
- (unsigned long long)CPLResourceTypeFromVideoFormat:(int)arg1;
- (unsigned long long)CPLResourceTypeFromImageFormat:(int)arg1;
- (id)allFileURLs;
- (id)filePathsWithoutThumbs;
- (bool)isSavedPhotosAsset;
- (bool)couldBeStoredInDCIM;
- (id)mutableSidecarFiles;
- (bool)hasJustBeenHidden;
- (bool)hasJustBeenShown;
- (bool)isIncludedInCloudFeeds;
- (bool)isIncludedInMoments;
- (bool)isPanorama;
- (bool)isUsedByiPhoto;
- (void)setGpsCoordinate:(struct { double x1; double x2; })arg1;
- (struct { double x1; double x2; })gpsCoordinate;
- (void)setHDRFlagFromImageProperties:(id)arg1;
- (id)pictureTransferProtocolInformationWithAlbumsObjectIDs:(id)arg1;
- (id)faceWithIdentifier:(short)arg1;
- (void)setCustomMetadataWithPersistedFileSystemAttributes;
- (void)synchronizeWithPersistedFileSystemAttributes;
- (id)_prettyDescription;
- (id)_compactDebugDescription;
- (bool)_isValidUTI:(id)arg1 forService:(id)arg2;
- (bool)hasGPS;
- (id)mutableAlbumsBeingCustomKeyAssetFor;
- (void)removeLegacyAdjustments;
- (void)deleteFromDatabaseOnly;
- (bool)isLocatedAtHome;
- (id)reverseGeoDescription;
- (id)avalanchePickDescription;
- (bool)isLocatedAtCoordinates:(struct { double x1; double x2; })arg1;
- (id)fileURLForFullsizeRenderImage;
- (id)fileURLForFullsizeRenderVideo;
- (id)assetsLibraryURL;
- (id)uniqueObjectID;
- (void)setReverseLocationDataIsValid:(bool)arg1;
- (bool)reverseLocationDataIsValid;
- (void)setReverseLocationData:(id)arg1;
- (id)globalUUID;
- (bool)visibilityStateIsEqualToState:(short)arg1;
- (long long)compareToAsset:(id)arg1;
- (bool)isInterestingForAvalanche;
- (id)pasteBoardRepresentation;
- (id)fileExtension;
- (id)assetURLForSidecarFile:(id)arg1;
- (id)allFileExtensions;
- (id)largestAvailableDataRepresentationAndType:(id*)arg1;
- (void)_getLargestAvailableDataRepresentation:(id*)arg1 type:(id*)arg2;
- (id)newFullScreenImage:(const struct __CFDictionary {}**)arg1;
- (id)inflightImage;
- (bool)isMogul;
- (void)synchronouslyFetchAdjustmentDataWithCompletionHandler:(id)arg1;
- (void)_asyncGenerateRenderImageFileWithSize:(struct CGSize { double x1; double x2; })arg1 formatIdentifier:(id)arg2 formatVersion:(id)arg3 adjustmentDataBlob:(id)arg4 originalImageFilePath:(id)arg5 originalImageEXIFOrientation:(long long)arg6 renderedImageFilePath:(id)arg7 completionHandler:(id)arg8;
- (id)calculateReturnPathForForceLarge:(bool)arg1 forceUpgradeFromSubstandardIfNecessary:(bool)arg2 outImageType:(long long*)arg3;
- (void)synchronouslyGenerateFullsizeRenderImageIfNecessaryAtPath:(id)arg1 withCompletionHandler:(id)arg2;
- (id)sortedSidecarFiles;
- (id)fileURLForMetadataWithExtension:(id)arg1;
- (id)pathForMetadataWithExtension:(id)arg1;
- (bool)_migrateKeyedArchiverAdjustmentsToPropertyListSerializationFormat;
- (bool)_migrateLegacySLMAdjustments;
- (bool)_setDefaultSlowMotionAdjustments;
- (void)markCloudResourceOfType:(unsigned long long)arg1 asLocallyAvailable:(bool)arg2;
- (id)pathForAdjustmentDirectory;
- (bool)_isResourceAvailableForResourceType:(unsigned long long)arg1;
- (id)pathForLegacySlalomRegionsArchive;
- (id)fileURLForPrebakedPortraitScrubberThumbnails;
- (id)fileURLForPrebakedLandscapeScrubberThumbnails;
- (id)fileURLForLargeThumbnailFile;
- (id)fileURLForMediumThumbnailFile;
- (id)pathForMutationsDirectory;
- (long long)externalUsageIntent;
- (id)pathForMediumThumbnailFile;
- (id)pathForFullsizeImageFile;
- (id)pathForSubstandardFullsizeRenderImageFile;
- (void)generateThumbnailsWithImageSource:(struct CGImageSource { }*)arg1 imageData:(id)arg2 updateExistingLargePreview:(bool)arg3 allowMediumPreview:(bool)arg4 outSmallThumbnail:(id*)arg5 outLargeThumbnail:(id*)arg6;
- (id)_imageDataForThumbGeneration;
- (void)setLocationFromCoordinate:(struct { double x1; double x2; })arg1;
- (void)setOriginalHeight:(short)arg1;
- (void)setOriginalWidth:(short)arg1;
- (void)setOriginalOrientation:(short)arg1;
- (id)pathForAdjustmentFile;
- (bool)isAudio;
- (int)embeddedThumbnailOffset;
- (void)setOriginalPath:(id)arg1;
- (id)originalPath;
- (void)setSavedAssetTypeFromImageProperties:(id)arg1;
- (void)setOriginalSizeAndOrientationFromImageProperties:(id)arg1;
- (void)setSizeAndOrientationFromImageProperties:(id)arg1;
- (void)updateAssetKindFromUniformTypeIdentifier;
- (void)setCustomMomentUUID:(id)arg1;
- (void)setCustomMomentName:(id)arg1;
- (void)setCustomCollectionUUID:(id)arg1;
- (void)setCustomCollectionName:(id)arg1;
- (bool)_isSavedAssetTypeValid:(short)arg1;
- (id)creatorBundleID;
- (bool)isValidTypeForPersistence;
- (bool)hasOriginalFile;
- (id)_highDynamicRangeTypeDescription;
- (id)_savedAssetTypeDescription;
- (id)_kindDescription;
- (id)filteredImage:(id)arg1 withCIContext:(id)arg2;
- (id)pathForLargeDisplayableImageFile;
- (id)inflightMetadata;
- (id)inflightIndexSheetImage;
- (id)inflightImagePath;
- (id)inflightImageInMemory;
- (void)setInflightIndexSheetImage:(id)arg1;
- (void)setInflightImagePath:(id)arg1;
- (id)cachedNonPersistedVideoPlaybackURLExpiration;
- (void)setOriginalAssetsUUID:(id)arg1;
- (id)originalAssetsUUID;
- (void)updateAdjustmentsWithFiltersAndIdentifiers:(id)arg1;
- (void)setEditorBundleID:(id)arg1;
- (id)addAdjustment;
- (id)_settingsDictionaryFromFilters:(id)arg1 inputImageExtent:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_settingsDictionaryFromFilter:(id)arg1;
- (id)_serializedPropertyDataFromFilter:(id)arg1;
- (id)mutableAdjustments;
- (id)addedDateData;
- (id)dateCreatedData;
- (void)updatePanoramosity;
- (bool)_hasPanoramaDimensions;
- (bool)isDeletableFromAssetsLibrary;
- (void)_loadReverseGeoIfNeeded;
- (id)locationFromFileURL:(id)arg1;
- (id)locationMergedWithAssetMetadataIfCompact:(bool)arg1;
- (void)setIsInFlight:(bool)arg1;
- (void)unregisterForChanges;
- (void)registerForChanges;
- (id)mutableAlbumsBeingTertiaryKeyAssetFor;
- (id)mutableAlbumsBeingSecondaryKeyAssetFor;
- (id)mutableAlbumsBeingKeyAssetFor;
- (void)updateAssetAlbumRelation:(id)arg1 inLibrary:(id)arg2;
- (void)applyResourcesFromMasterChange:(id)arg1;
- (void)applyResourcesFromAssetChange:(id)arg1;
- (void)applyPropertiesFromAssetChange:(id)arg1;
- (id)pathForFullsizeRenderVideoFile;
- (id)pathForFullsizeRenderImageFile;
- (bool)isTimelapsePlaceholder;
- (bool)supportsCloudUpload;
- (short)uploadAttempts;
- (void)incrementUploadAttempts;
- (id)cplAssetChangeWithMasterID:(id)arg1 withChangeType:(unsigned long long)arg2;
- (id)cloudMaster;
- (id)cplMasterChange;
- (id)existingCloudMaster;
- (id)cplResourceForResourceType:(unsigned long long)arg1;
- (bool)isCloudPlaceholder;
- (bool)isStreamedVideo;
- (id)thumbnailIdentifier;
- (id)indexSheetImage;
- (bool)isInFlight;
- (bool)isJPEG;
- (id)reservedPathForLargeDisplayableImageFileForceLarge:(bool)arg1 forceUpgradeFromSubstandardIfNecessary:(bool)arg2 outImageType:(long long*)arg3;
- (id)pathForPenultimateFullsizeRenderImageFile;
- (bool)hasLegacyAdjustments;
- (id)pl_photoLibrary;
- (id)imageWithFormat:(int)arg1;
- (short)originalOrientation;
- (id)customMomentUUID;
- (id)customCollectionUUID;
- (id)customCollectionName;
- (void)setInflightMetadata:(id)arg1;
- (void)setInflightImageInMemory:(id)arg1;
- (void)setUniformTypeIdentifierFromPathExtension:(id)arg1;
- (id)cloudResourceForResourceType:(unsigned long long)arg1;
- (bool)setDefaultAdjustmentsIfNecessary;
- (void)setAdjustmentDataBlob:(id)arg1 formatIdentifier:(id)arg2 formatVersion:(id)arg3 baseVersion:(long long)arg4 editorBundleID:(id)arg5 renderedContentURL:(id)arg6 penultimateRenderedJPEGData:(id)arg7;
- (bool)setVideoInfoFromFileAtURL:(id)arg1 fullSizeRenderURL:(id)arg2 overwriteOriginalProperties:(bool)arg3;
- (void)generateLargeThumbnailFileIfNecessary;
- (void)setAdjustmentDataBlob:(id)arg1 formatIdentifier:(id)arg2 formatVersion:(id)arg3 baseVersion:(long long)arg4 editorBundleID:(id)arg5 renderedContentURL:(id)arg6 penultimateRenderedJPEGData:(id)arg7 isSubstandardRender:(bool)arg8 fullSizeRenderSize:(struct CGSize { double x1; double x2; })arg9;
- (short)originalHeight;
- (short)originalWidth;
- (void)setNeedsMomentUpdate:(bool)arg1;
- (void)setOriginalHash:(id)arg1;
- (id)pathForVideoFile;
- (void)setSearchCategoryData:(id)arg1;
- (id)searchCategoryData;
- (void)setSearchDataValid:(bool)arg1;
- (bool)isSearchDataValid;
- (id)_searchDataCreateIfNeeded;
- (void)getSearchIndexContents:(id)arg1 dateFormatter:(id)arg2 keywords:(id)arg3;
- (id)customMomentName;
- (id)reverseLocationData;
- (void)_appendDateCreatedToAsset:(id)arg1 dateFormatter:(id)arg2;
- (void)_appendAssetTextDataToAsset:(id)arg1;
- (void)_appendKeywords:(id)arg1 toAsset:(id)arg2;
- (void)_appendGEODataToAsset:(id)arg1;
- (unsigned long long)effectiveThumbnailIndex;
- (id)addFaceWithRelativeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 identifier:(short)arg2 albumUUID:(id)arg3;
- (void)persistMetadataToFilesystem;
- (bool)avalanchePickTypeIsVisible;
- (void)generateAndUpdateThumbnailsWithPreviewImage:(id)arg1 thumbnailImage:(id)arg2 fromImageSource:(struct CGImageSource { }*)arg3 imageData:(id)arg4 thumbnailDataByFormatID:(struct __CFDictionary { }*)arg5 updateExistingLargePreview:(bool)arg6;
- (void)setPublicGlobalUUID:(id)arg1;
- (void)setDisableFileSystemPersistency:(bool)arg1;
- (void)updateAdjustmentsWithAdjustmentMetadata:(id)arg1;
- (id)fileURLForSidecarFile:(id)arg1;
- (id)originalFilename;
- (void)setOriginalFilename:(id)arg1;
- (void)setOriginalAsset:(id)arg1;
- (void)setCreatorBundleID:(id)arg1;
- (bool)setAttributesFromMainFileURL:(id)arg1 fullSizeRenderURL:(id)arg2 savedAssetType:(short)arg3 isPlaceholder:(bool)arg4 overwriteOriginalProperties:(bool)arg5 imageSource:(struct CGImageSource {}**)arg6 imageData:(id*)arg7;
- (void)setLocationFromImageProperties:(id)arg1;
- (void)setThumbnailDataFromImageProperties:(id)arg1;
- (void)setOriginalFilesize:(int)arg1;
- (void)revertToOriginal;
- (id)mainFileURL;
- (void)setEffectiveThumbnailIndex:(unsigned long long)arg1;
- (id)pathForLargeThumbnailFile;
- (id)fileURLForThumbnailFile;
- (id)pathForVideoPreviewFile;
- (id)pathForMetadataDirectory;
- (id)pathForDiagnosticFile;
- (id)assetURL;
- (id)assetURLWithExtension:(id)arg1;
- (id)originalHash;
- (id)publicGlobalUUID;
- (bool)isAvalanchePhoto;
- (bool)isAvalancheStackPhoto;
- (bool)isPhotoStreamPhoto;
- (void)applyTrashedState:(short)arg1;
- (bool)canMoveToTrash;
- (bool)canPerformEditOperation:(unsigned long long)arg1;
- (void)setImportSessionID:(id)arg1;
- (id)importSessionID;
- (bool)isInTrash;
- (id)cloudOwnerEmail;
- (id)cloudOwnerFullName;
- (id)cloudOwnerLastName;
- (id)cloudOwnerFirstName;
- (id)cloudShareAlbum;
- (int)originalFilesize;
- (bool)isCloudSharedAsset;
- (id)pathForOriginalFile;
- (bool)hasLegacyRequiredResourcesLocallyAvailable;
- (id)adjustmentsXMPRepresentation;
- (void)setExternalUsageIntent:(long long)arg1;
- (bool)isEditableFromAssetsLibrary;
- (id)originalAsset;
- (id)allUniformTypeIdentifiers;
- (double)aspectRatio;
- (void)setImageSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)isFavorite;
- (void)setLongDescription:(id)arg1;
- (void)delete;
- (id)longDescription;
- (id)location;
- (bool)validateForUpdate:(id*)arg1;
- (bool)validateForInsert:(id*)arg1;
- (void)didSave;
- (void)willSave;
- (void)prepareForDeletion;
- (void)awakeFromSnapshotEvents:(unsigned long long)arg1;
- (void)awakeFromInsert;
- (void)didTurnIntoFault;
- (void)willTurnIntoFault;
- (void)awakeFromFetch;
- (bool)isEditable;
- (void)setTitle:(id)arg1;
- (id)title;
- (bool)isVideo;
- (struct CGSize { double x1; double x2; })imageSize;
- (void)setLocation:(id)arg1;
- (void)dealloc;
- (id)activityViewController:(id)arg1 itemForActivityType:(id)arg2;
- (id)activityViewControllerPlaceholderItem:(id)arg1;
- (id)pl_PHAsset;

@end

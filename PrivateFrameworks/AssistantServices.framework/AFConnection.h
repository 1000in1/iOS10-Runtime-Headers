/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices
 */

@class NSString, NSArray, NSXPCConnection, NSMutableDictionary, <AFAssistantUIService>, <AFSpeechDelegate>;

@interface AFConnection : NSObject  {
    NSXPCConnection *_connection;
    NSString *_outstandingRequestClass;
    NSArray *_cachedBulletins;
    bool_hasActiveRequest;
    bool_hasActiveTimeout;
    NSMutableDictionary *_replyHandlerForAceId;
    unsigned int _stateInSync : 1;
    unsigned int _shouldSpeak : 1;
    unsigned int _isCapturingSpeech : 1;
    unsigned int _hasOutstandingRequest : 1;
    unsigned int _audioSessionID;
    float _averagePower;
    float _peakPower;
    unsigned int _clientStateIsInSync : 1;
    unsigned int _voiceOverIsActive : 1;
    <AFAssistantUIService> *_delegate;
    <AFSpeechDelegate> *_speechDelegate;
}

@property <AFAssistantUIService> * delegate;
@property <AFSpeechDelegate> * speechDelegate;
@property(readonly) bool isRecording;

+ (void)defrost;
+ (bool)isReadyForLanguageCode:(id)arg1;
+ (bool)userDataSyncNeeded;
+ (void)stopMonitoringAvailability;
+ (bool)assistantIsSupported;
+ (bool)assistantIsSupportedForLanguageCode:(id)arg1 error:(id*)arg2;
+ (void)preheatWithStyle:(long long)arg1;
+ (id)outputVoice;
+ (void)beginMonitoringAvailability;
+ (bool)isAvailable;
+ (id)currentLanguageCode;
+ (void)initialize;
+ (void)preheat;

- (void)_clearAssistantInfoForAccountWithIdentifier:(id)arg1;
- (void)_barrier;
- (id)_clientServiceWithErrorHandler:(id)arg1;
- (void)startSpeechRequestWithSpeechFileAtURL:(id)arg1;
- (void)startSpeechRequestWithSpeechFileAtURL:(id)arg1 isNarrowBand:(bool)arg2;
- (id)_cachedBulletins;
- (void)setSpeechDelegate:(id)arg1;
- (id)speechDelegate;
- (void)usefulUserResultWillPresent;
- (void)setAlertContextWithBulletins:(id)arg1;
- (void)sendReplyCommand:(id)arg1;
- (void)sendGenericAceCommand:(id)arg1;
- (float)peakPower;
- (unsigned int)audioSessionID;
- (void)startRequestWithCorrectedText:(id)arg1 forSpeechIdentifier:(id)arg2;
- (void)stopSpeech;
- (void)startAcousticIDRequestWithOptions:(id)arg1;
- (void)startDirectActionRequestWithString:(id)arg1;
- (void)startRequestWithText:(id)arg1;
- (void)setLockState:(bool)arg1 screenLocked:(bool)arg2;
- (void)_extendExistingRequestTimeout;
- (void)_tellSpeechDelegateRecognitionDidFail:(id)arg1;
- (void)_tellSpeechDelegateSpeechRecognizedPartialResult:(id)arg1;
- (void)_tellSpeechDelegateSpeechRecognized:(id)arg1;
- (void)_tellSpeechDelegateRecordingDidCancel;
- (void)_tellSpeechDelegateRecordingDidEnd;
- (void)_tellSpeechDelegateRecordingDidChangeAVRecordRoute:(id)arg1;
- (void)_tellSpeechDelegateRecordingDidBeginOnAVRecordRoute:(id)arg1;
- (void)_tellSpeechDelegateRecordingWillBegin;
- (void)_tellDelegateDidFinishAcousticIDRequestWithSuccess:(bool)arg1;
- (void)_tellDelegateDidDetectMusic;
- (void)_tellDelegateWillStartAcousticIDRequest;
- (void)_tellDelegateRequestFinished;
- (void)_speechRecordingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2;
- (void)_doCommand:(id)arg1 reply:(id)arg2;
- (void)telephonyRequestCompleted;
- (void)prepareForPhoneCall;
- (void)setOverriddenApplicationContext:(id)arg1 withSMSContext:(id)arg2;
- (void)setApplicationContextForApplicationInfos:(id)arg1;
- (void)clearContext;
- (void)sendGenericAceCommand:(id)arg1 conflictHandler:(id)arg2;
- (void)rollbackRequest;
- (void)rollbackClearContext;
- (void)recordMetrics:(id)arg1;
- (void)updateSpeechOptions:(id)arg1;
- (void)startSpeechPronunciationRequestWithOptions:(id)arg1 pronunciationContext:(id)arg2;
- (void)startSpeechRequestWithOptions:(id)arg1;
- (void)_checkAndSetIsCapturingSpeech:(bool)arg1;
- (void)startContinuationRequestWithUserInfo:(id)arg1;
- (void)_requestWillBeginWithRequestClass:(id)arg1 isSpeechRequest:(bool)arg2;
- (void)setIsStark:(bool)arg1;
- (void)forceAudioSessionActive;
- (void)preheatWithStyle:(long long)arg1;
- (void)_willCancelRequest;
- (void)setVoiceOverIsActive:(bool)arg1;
- (void)_setAudioSessionID:(unsigned int)arg1;
- (void)_setShouldSpeak:(bool)arg1;
- (void)_extendRequestTimeout;
- (id)_clientService;
- (void)_invokeRequestTimeout;
- (void)_updateClientState;
- (void)_connectionInterrupted;
- (void)_tellDelegateRequestFailed:(id)arg1 requestClass:(id)arg2;
- (void)_requestDidEnd;
- (void)_tellSpeechDelegateRecordingDidFail:(id)arg1;
- (void)_willFailRequestWithError:(id)arg1;
- (void)_willCompleteRequest;
- (void)_tellDelegateAudioSessionIDChanged:(unsigned int)arg1;
- (void)_tellDelegateShouldSpeakChanged:(bool)arg1;
- (bool)shouldSpeak;
- (void)_cancelRequestTimeout;
- (void)_scheduleRequestTimeout;
- (void)_tellDelegateRequestWillStart;
- (void)_willStartRequestForSpeech:(bool)arg1;
- (void)_requestWillBeginWithRequestClass:(id)arg1 isSpeechRequest:(bool)arg2 isBackgroundRequest:(bool)arg3;
- (void)_clearConnection;
- (void)cancelRequest;
- (bool)isRecording;
- (id)init;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (void).cxx_destruct;
- (id)_connection;
- (void)preheat;
- (void)stopSpeechWithOptions:(id)arg1;
- (void)cancelSpeech;
- (void)endSession;
- (float)averagePower;
- (void)_updateState;

@end

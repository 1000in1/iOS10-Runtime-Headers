/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/FaceCore.framework/FaceCore
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSObject;

@interface FCRFaceDetector : NSObject  {
    void *api;
    NSObject *lock;
}

+ (id)keypointTrackingDetector;
+ (id)standardTrackingDetector;
+ (id)preciseFaceDetector;
+ (id)fastFaceDetector;
+ (id)faceDetector;
+ (id)faceDetectorWithOptions:(id)arg1;
+ (int)findProfileInParameters:(id)arg1;

- (id)detectFacesInCGImage:(struct CGImage { }*)arg1 options:(id)arg2 error:(id*)arg3;
- (float)compareFace:(id)arg1 toFace:(id)arg2 error:(id*)arg3;
- (id)extractDetailsForFaces:(id)arg1 inCGImage:(struct CGImage { }*)arg2 options:(id)arg3 error:(id*)arg4;
- (id)transformROIs:(id)arg1 image:(id)arg2 usingBlock:(id)arg3;
- (id)parseNumericOrBoolValue:(id)arg1;
- (id)parseOption:(id)arg1 value:(id)arg2;
- (void)addLandmarkOfType:(id)arg1 fromMesh:(struct vector<vision::lib::coord, std::allocator<vision::lib::coord> > { struct _Vector_impl { struct coord {} *x_1_1_1; struct coord {} *x_1_1_2; struct coord {} *x_1_1_3; } x1; }*)arg2 indexes:(id)arg3 to:(id)arg4 image:(id)arg5;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })makeYFlippedRectFromRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 image:(id)arg2;
- (struct CGPoint { float x1; float x2; })makeYFlippedPointFromCoord:(struct coord { int x1; int x2; }*)arg1 image:(id)arg2;
- (float)interpretAsFloat:(id)arg1 withDefault:(float)arg2;
- (struct coord { int x1; int x2; })makeYFlippedCoordFromPoint:(struct CGPoint { float x1; float x2; })arg1 image:(id)arg2;
- (void)updateFCRFace:(id)arg1 from:(struct face { int x1; struct coord { int x_2_1_1; int x_2_1_2; } x2; struct coord { int x_3_1_1; int x_3_1_2; } x3; struct coord { int x_4_1_1; int x_4_1_2; } x4; struct coord { int x_5_1_1; int x_5_1_2; } x5; float x6; int x7; int x8; struct vector<double, std::allocator<double> > { struct _Vector_impl { double *x_1_2_1; double *x_1_2_2; double *x_1_2_3; } x_9_1_1; } x9; int x10; struct vector<vision::lib::coord, std::allocator<vision::lib::coord> > { struct _Vector_impl { struct coord {} *x_1_2_1; struct coord {} *x_1_2_2; struct coord {} *x_1_2_3; } x_11_1_1; } x11; int x12; boolx13; boolx14; float x15; float x16; boolx17; float x18; boolx19; float x20; }*)arg2 image:(id)arg3;
- (struct face { int x1; struct coord { int x_2_1_1; int x_2_1_2; } x2; struct coord { int x_3_1_1; int x_3_1_2; } x3; struct coord { int x_4_1_1; int x_4_1_2; } x4; struct coord { int x_5_1_1; int x_5_1_2; } x5; float x6; int x7; int x8; struct vector<double, std::allocator<double> > { struct _Vector_impl { double *x_1_2_1; double *x_1_2_2; double *x_1_2_3; } x_9_1_1; } x9; int x10; struct vector<vision::lib::coord, std::allocator<vision::lib::coord> > { struct _Vector_impl { struct coord {} *x_1_2_1; struct coord {} *x_1_2_2; struct coord {} *x_1_2_3; } x_11_1_1; } x11; int x12; boolx13; boolx14; float x15; float x16; boolx17; float x18; boolx19; float x20; })createFace:(id)arg1 image:(id)arg2;
- (struct image { char *x1; int x2; int x3; })createImage:(id)arg1;
- (void)updateExtractionParamsValues:(id)arg1;
- (id)extractDetailsForFaces:(id)arg1 inImage:(id)arg2 options:(id)arg3 error:(id*)arg4;
- (id)createFCRImage:(struct CGImage { }*)arg1;
- (id)createFCRFace:(struct face { int x1; struct coord { int x_2_1_1; int x_2_1_2; } x2; struct coord { int x_3_1_1; int x_3_1_2; } x3; struct coord { int x_4_1_1; int x_4_1_2; } x4; struct coord { int x_5_1_1; int x_5_1_2; } x5; float x6; int x7; int x8; struct vector<double, std::allocator<double> > { struct _Vector_impl { double *x_1_2_1; double *x_1_2_2; double *x_1_2_3; } x_9_1_1; } x9; int x10; struct vector<vision::lib::coord, std::allocator<vision::lib::coord> > { struct _Vector_impl { struct coord {} *x_1_2_1; struct coord {} *x_1_2_2; struct coord {} *x_1_2_3; } x_11_1_1; } x11; int x12; boolx13; boolx14; float x15; float x16; boolx17; float x18; boolx19; float x20; }*)arg1 image:(id)arg2;
- (void)updateDetectionParamsValues:(id)arg1 image:(id)arg2;
- (id)convertRectsToString:(id)arg1;
- (id)parseRegionOfInterestParam:(id)arg1;
- (void)setParam:(id)arg1 toValue:(id)arg2 withDefaultValue:(id)arg3 usingApi:(struct FaceCoreAPI { int (**x1)(); struct FaceCoreAPIInternal {} *x2; struct FaceCoreContext {} *x3; void *x4; }*)arg4;
- (id)detectFacesInImage:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (void)createFaceCoreLightApiWithProfile:(int)arg1 parameters:(id)arg2;
- (id)initWithProfile:(int)arg1 parameters:(id)arg2;
- (id)extractDetailsForFaces:(id)arg1 inData:(id)arg2 width:(unsigned int)arg3 height:(unsigned int)arg4 bytesPerRow:(unsigned int)arg5 options:(id)arg6 error:(id*)arg7;
- (id)detectFacesInData:(id)arg1 width:(unsigned int)arg2 height:(unsigned int)arg3 bytesPerRow:(unsigned int)arg4 options:(id)arg5 error:(id*)arg6;
- (void)dealloc;
- (id)version;
- (id)initWithOptions:(id)arg1;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

@class NSDictionary, NSArray, NSString;

@interface FigCaptureSourceFormat : NSObject <FigXPCCoding> {
    NSDictionary *_formatDictionary;
    bool_isMultiStreamFormat;
    struct opaqueCMFormatDescription { } *_formatDescription;
}

@property(readonly) unsigned int mediaType;
@property(readonly) struct opaqueCMFormatDescription { }* formatDescription;
@property(getter=isExperimental,readonly) bool experimental;
@property(getter=isDefaultActiveFormat,readonly) bool defaultActiveFormat;
@property(readonly) int videoFormatIndex;
@property(readonly) unsigned int videoFormat;
@property(readonly) struct { int x1; int x2; } videoDimensions;
@property(readonly) struct { int x1; int x2; } sensorDimensions;
@property(readonly) float videoMinSupportedFrameRate;
@property(readonly) float videoMaxSupportedFrameRate;
@property(readonly) float videoDefaultMinFrameRate;
@property(readonly) float videoDefaultMaxFrameRate;
@property(readonly) float videoFieldOfView;
@property(getter=isVideoBinned,readonly) bool videoBinned;
@property(getter=isVideoZoomSupported,readonly) bool videoZoomSupported;
@property(readonly) float videoMaxZoomFactor;
@property(readonly) float videoZoomFactorUpscaleThreshold;
@property(getter=isVideoZoomDynamicSensorCropSupported,readonly) bool videoZoomDynamicSensorCropSupported;
@property(getter=isVideoLowLightBinningSwitchSupported,readonly) bool videoLowLightBinningSwitchSupported;
@property(readonly) int videoRawBitDepth;
@property(readonly) int temporalNoiseReductionMode;
@property(readonly) bool ispChromaNoiseReduction;
@property(readonly) float minISO;
@property(readonly) float maxISO;
@property(readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } minExposureDuration;
@property(readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } maxExposureDuration;
@property(readonly) float aeMaxGain;
@property(readonly) int maxIntegrationTimeOverride;
@property(readonly) int video999;
@property(getter=isMultiStreamFormat,readonly) bool multiStreamFormat;
@property(readonly) bool hasFrontEndScalerCompanionIndex;
@property(readonly) int frontEndScalerCompanionIndex;
@property(readonly) struct { int x1; int x2; } sensorCropDimensions;
@property(readonly) struct { int x1; int x2; } sourceCropAspectRatio;
@property(readonly) bool hasVideoFeature1Thingie;
@property(readonly) int videoFeature1Thingie;
@property(readonly) bool prefersVideoFeature1Enabled;
@property(getter=isPhotoFormat,readonly) bool photoFormat;
@property(getter=isHighResPhotoFormat,readonly) bool highResPhotoFormat;
@property(readonly) bool needsPreviewDPCC;
@property(getter=isStillImageStabilizationSupported,readonly) bool stillImageStabilizationSupported;
@property(getter=isHDRSupported,readonly) bool hdrSupported;
@property(getter=isStillFeature2Supported,readonly) bool stillFeature2Supported;
@property(readonly) struct { int x1; int x2; } stillFeature2Shenanigans;
@property(getter=isHighProfileH264Supported,readonly) bool highProfileH264Supported;
@property(readonly) NSArray * AVCaptureSessionPresets;
@property(readonly) float videoScaleFactor;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;

+ (void)initialize;

- (int)videoFeature1Thingie;
- (int)frontEndScalerCompanionIndex;
- (bool)isMultiStreamFormat;
- (int)maxIntegrationTimeOverride;
- (bool)ispChromaNoiseReduction;
- (int)temporalNoiseReductionMode;
- (float)videoScaleFactor;
- (id)copyWithNewVideoPixelFormat:(unsigned int)arg1;
- (bool)isFeature0ModeSupported:(int)arg1;
- (struct { int x1; int x2; })sourceCropAspectRatio;
- (struct { int x1; int x2; })sensorCropDimensions;
- (struct { int x1; int x2; })_maxUseableSensorDimensions;
- (bool)isStillFeature2Supported;
- (bool)hasFrontEndScalerCompanionIndex;
- (float)videoMinSupportedFrameRate;
- (float)aeMaxGain;
- (float)minISO;
- (struct { int x1; int x2; })_luckyNumbersForBool:(bool)arg1;
- (bool)isVideoZoomSupported;
- (float)videoMaxSupportedFrameRate;
- (struct { int x1; int x2; })sensorDimensions;
- (float)videoDefaultMaxFrameRate;
- (struct { int x1; int x2; })_outputDimensions;
- (id)initWithFigCaptureStreamFormatDictionary:(id)arg1;
- (int)videoFormatIndex;
- (struct { int x1; int x2; })videoDimensions;
- (unsigned int)videoFormat;
- (struct opaqueCMFormatDescription { }*)formatDescription;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (int)video999;
- (float)videoDefaultMinFrameRate;
- (bool)needsPreviewDPCC;
- (bool)isHighProfileH264Supported;
- (int)videoRawBitDepth;
- (bool)isVideoZoomDynamicSensorCropSupported;
- (bool)isVideoLowLightBinningSwitchSupported;
- (bool)prefersVideoFeature1Enabled;
- (struct { int x1; int x2; })stillFeature2Shenanigans;
- (bool)hasVideoFeature1Thingie;
- (bool)isHighResPhotoFormat;
- (bool)isExperimental;
- (float)videoZoomFactorUpscaleThreshold;
- (bool)isVideoBinned;
- (float)videoFieldOfView;
- (bool)isStillImageStabilizationSupported;
- (float)maxISO;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })maxExposureDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })minExposureDuration;
- (id)AVCaptureSessionPresets;
- (bool)isDefaultActiveFormat;
- (bool)isHDRSupported;
- (bool)isPhotoFormat;
- (float)videoMaxZoomFactor;
- (unsigned int)mediaType;
- (bool)isEqual:(id)arg1;
- (void)dealloc;
- (id)description;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@class PCPersistentTimer, NSString, SBFPasscodeLockDisableAssertion, SBFPasscodeLockAssertionManager;

@interface SBFDeviceLockController : NSObject  {
    int _lockState;
    bool_isBlockedForThermalCondition;
    double _lastLockDate;
    bool_isPermanentlyBlocked;
    double _deviceLockUnblockTime;
    PCPersistentTimer *_deviceLockUnblockTimer;
    bool_cachedPasscodeLockedOrBlocked;
    bool_hasBeenUnlockedOnceSinceBoot;
    SBFPasscodeLockAssertionManager *_assertionManager;
    SBFPasscodeLockDisableAssertion *_transientPasscodeCheckingAssertion;
    bool_okToSendNotifications;
    NSString *_lastIncorrectPasscodeAttempt;
    bool_shouldFetchPasscodeLockState;
    bool_lastPasscodeLockStateWasLocked;
    struct __CFRunLoopObserver { } *_runLoopObserver;
}

+ (id)_lockStateDefaults;

- (void)_uncachePasscodeIfNecessary;
- (void)_cachePassword:(id)arg1;
- (void)_removeDeviceLockDisableAssertion:(id)arg1;
- (void)_addDeviceLockDisableAssertion:(id)arg1;
- (void)_notifyOfFirstUnlock;
- (void)enablePasscodeLockImmediately;
- (bool)deviceHasBeenPasscodeUnlockedOnceSinceBoot;
- (bool)isPasscodeLockedCached;
- (void)_setupRunLoopObserverIfNecessary;
- (bool)isPermanentlyBlocked:(double*)arg1;
- (void)setBlockedForThermalCondition:(bool)arg1;
- (void)_sendBlockStateChangeNotification;
- (bool)isBlockedForThermalCondition;
- (id)lastLockDate;
- (bool)attemptDeviceUnlockWithPassword:(id)arg1 appRequested:(bool)arg2;
- (void)_wipeDevice;
- (void)_lockStateChangedFrom:(int)arg1 to:(int)arg2;
- (void)_setLockState:(int)arg1;
- (void)_enablePasscodeLockImmediately:(bool)arg1;
- (bool)_shouldLockDeviceNow;
- (bool)isPasscodeLockedOrBlocked;
- (bool)isPasscodeLocked;
- (void)_scheduleUnblockTimer;
- (void)_unblockTimerFired;
- (bool)_temporarilyBlocked;
- (void)_noteBlockedReasonsMayHaveChanged;
- (void)_clearUnblockTimer;
- (void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(bool)arg1;
- (void)_updateDeviceLockedState;
- (bool)_shouldSuppressLockOnInit;
- (bool)deviceHasPasscodeSet;
- (void)_setDeviceLockUnblockTime:(double)arg1;
- (void)_clearBlockedState;
- (bool)isBlocked;
- (id)init;
- (void)synchronize;
- (void)dealloc;
- (id)description;

@end

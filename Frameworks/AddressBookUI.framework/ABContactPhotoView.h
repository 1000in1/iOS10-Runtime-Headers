/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/AddressBookUI.framework/AddressBookUI
 */

@class UIGestureRecognizer, UIImage, <ABPresenterDelegate>, UIImageView, CNContact, NSDictionary, UILabel, <ABContactPhotoViewDelegate>;

@interface ABContactPhotoView : UIControl <UINavigationControllerDelegate, UIImagePickerControllerDelegate, QLPreviewControllerDelegate, QLPreviewControllerDataSource> {
    bool_editing;
    bool_modified;
    bool_isAnimatingBounce;
    CNContact *_contact;
    <ABPresenterDelegate> *_delegate;
    <ABContactPhotoViewDelegate> *_photoViewDelegate;
    NSDictionary *_photoPickerInfo;
    UIImage *_currentThumbnailImage;
    UIImage *_currentImage;
    UIImageView *_contactImageView;
    UILabel *_addPhotoLabel;
    UILabel *_editPhotoLabel;
    UIImageView *_attributionImageView;
    UIGestureRecognizer *_tapGesture;
}

@property(retain) CNContact * contact;
@property(getter=isEditing) bool editing;
@property bool modified;
@property <ABPresenterDelegate> * delegate;
@property <ABContactPhotoViewDelegate> * photoViewDelegate;
@property(retain) NSDictionary * photoPickerInfo;
@property(retain) UIImage * currentThumbnailImage;
@property(retain) UIImage * currentImage;
@property(retain) UIImageView * contactImageView;
@property(retain) UILabel * addPhotoLabel;
@property(retain) UILabel * editPhotoLabel;
@property(retain) UIImageView * attributionImageView;
@property bool isAnimatingBounce;
@property(retain) UIGestureRecognizer * tapGesture;

+ (id)supportedPasteboardTypes;

- (void)setTapGesture:(id)arg1;
- (void)setEditPhotoLabel:(id)arg1;
- (void)setAddPhotoLabel:(id)arg1;
- (void)setContactImageView:(id)arg1;
- (void)setIsAnimatingBounce:(bool)arg1;
- (bool)isAnimatingBounce;
- (id)previewPath;
- (void)_bounceSmallPhoto;
- (void)_presentFullScreenPhoto:(id)arg1;
- (id)_createImagePickerForEditingImageData:(id)arg1 withCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_createImagePicker;
- (void)setAttributionImageView:(id)arg1;
- (id)photoViewDelegate;
- (void)updateAttributionBadge;
- (void)updatePhotoWithImage:(id)arg1;
- (void)updatePhoto;
- (void)setModified:(bool)arg1;
- (void)setPhotoPickerInfo:(id)arg1;
- (void)setCurrentImage:(id)arg1;
- (void)setHighlightedFrame:(bool)arg1;
- (void)_zoomContactPhoto;
- (void)_presentPhotoEditingSheet;
- (id)currentImageData;
- (void)setCurrentThumbnailImage:(id)arg1;
- (id)photoPickerInfo;
- (id)currentThumbnailImage;
- (id)currentImageDataAndCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (id)attributionImageView;
- (id)contactImageView;
- (id)addPhotoLabel;
- (id)editPhotoLabel;
- (void)longPressGesture:(id)arg1;
- (id)tapGesture;
- (void)tapGesture:(id)arg1;
- (void)setPhotoViewDelegate:(id)arg1;
- (void)disablePhotoTapGesture;
- (void)menuWillHide:(id)arg1;
- (void)updateFontSizes;
- (void)saveEdits;
- (void)reloadPhoto;
- (id)initWithContact:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)modified;
- (void)setContact:(id)arg1;
- (id)contact;
- (bool)hasPhoto;
- (bool)isEditing;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (id)previewController:(id)arg1 previewItemAtIndex:(long long)arg2;
- (long long)numberOfPreviewItemsInPreviewController:(id)arg1;
- (id)previewController:(id)arg1 transitionImageForPreviewItem:(id)arg2 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (void)previewControllerDidDismiss:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })previewController:(id)arg1 frameForPreviewItem:(id)arg2 inSourceView:(id*)arg3;
- (void)imagePickerController:(id)arg1 didFinishPickingMediaWithInfo:(id)arg2;
- (void)imagePickerControllerDidCancel:(id)arg1;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (id)currentImage;
- (void)setEditing:(bool)arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)tintColorDidChange;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)layoutSubviews;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@class NSString, NSArray, NSURL, NSDate, MPMediaItemArtwork;

@interface MPMediaItem : MPMediaEntity  {
}

@property(readonly) bool mediaTypeCanSeedGenius;
@property(readonly) unsigned long long persistentID;
@property(readonly) unsigned long long mediaType;
@property(readonly) NSString * title;
@property(readonly) NSString * albumTitle;
@property(readonly) unsigned long long albumPersistentID;
@property(readonly) NSString * artist;
@property(readonly) unsigned long long artistPersistentID;
@property(readonly) NSString * albumArtist;
@property(readonly) unsigned long long albumArtistPersistentID;
@property(readonly) NSString * genre;
@property(readonly) unsigned long long genrePersistentID;
@property(readonly) NSString * composer;
@property(readonly) unsigned long long composerPersistentID;
@property(readonly) double playbackDuration;
@property(readonly) unsigned long long albumTrackNumber;
@property(readonly) unsigned long long albumTrackCount;
@property(readonly) unsigned long long discNumber;
@property(readonly) unsigned long long discCount;
@property(readonly) MPMediaItemArtwork * artwork;
@property(readonly) NSString * lyrics;
@property(getter=isCompilation,readonly) bool compilation;
@property(readonly) NSDate * releaseDate;
@property(readonly) unsigned long long beatsPerMinute;
@property(readonly) NSString * comments;
@property(readonly) NSURL * assetURL;
@property(getter=isCloudItem,readonly) bool cloudItem;
@property(readonly) NSString * podcastTitle;
@property(readonly) unsigned long long podcastPersistentID;
@property(readonly) unsigned long long playCount;
@property(readonly) unsigned long long skipCount;
@property(readonly) unsigned long long rating;
@property(copy) NSDate * lastPlayedDate;
@property(readonly) NSString * userGrouping;
@property(readonly) double bookmarkTime;
@property(readonly) bool isRental;
@property(readonly) bool isITunesU;
@property(readonly) double startTime;
@property(readonly) double stopTime;
@property(readonly) unsigned long long year;
@property unsigned long long skipCountSinceSync;
@property unsigned long long playCountSinceSync;
@property(copy) NSDate * lastSkippedDate;
@property(copy) NSDate * dateAccessed;
@property bool hasBeenPlayed;
@property(readonly) bool rememberBookmarkTime;
@property(readonly) double effectiveStopTime;
@property(readonly) NSString * effectiveAlbumArtist;
@property(readonly) bool isUsableAsRepresentativeItem;
@property(readonly) NSArray * chapters;

+ (id)MPSD_mediaItemPropertiesForDownloadability;
+ (id)dynamicProperties;
+ (id)fallbackTitlePropertyForGroupingType:(long long)arg1;
+ (id)titlePropertyForGroupingType:(long long)arg1;
+ (bool)_isValidItemProperty:(id)arg1;
+ (id)persistentIDPropertyForGroupingType:(long long)arg1;
+ (bool)canFilterByProperty:(id)arg1;
+ (void)_createFilterableDictionary;
+ (id)screenshotArtworkCatalogCacheProperties;
+ (id)artworkCatalogCacheProperties;

- (id)comments;
- (id)assetURL;
- (id)lastPlayedDate;
- (bool)isRental;
- (id)genre;
- (id)releaseDate;
- (bool)isCompilation;
- (id)multiverseIdentifier;
- (void)populateLocationPropertiesWithPath:(id)arg1;
- (id)chapters;
- (unsigned long long)beatsPerMinute;
- (bool)existsInLibrary;
- (unsigned long long)rating;
- (void)setRating:(unsigned long long)arg1;
- (bool)MPSD_isDownloadInProgress;
- (bool)mediaTypeCanSeedGenius;
- (bool)MPSD_isDownloadable;
- (bool)isUsableAsRepresentativeItem;
- (void)gaplessHeuristicInfo:(unsigned int*)arg1 durationInSamples:(unsigned long long*)arg2 lastPacketsResync:(unsigned long long*)arg3 encodingDelay:(unsigned int*)arg4 encodingDrain:(unsigned int*)arg5;
- (unsigned long long)countOfChaptersOfType:(long long)arg1;
- (id)chapterOfType:(long long)arg1 atIndex:(unsigned long long)arg2;
- (id)userGrouping;
- (bool)rememberBookmarkTime;
- (void)setHasBeenPlayed:(bool)arg1;
- (bool)hasBeenPlayed;
- (void)setLastSkippedDate:(id)arg1;
- (id)lastSkippedDate;
- (void)setSkipCountSinceSync:(unsigned long long)arg1;
- (unsigned long long)skipCountSinceSync;
- (void)setSkipCount:(unsigned long long)arg1;
- (unsigned long long)skipCount;
- (void)setDateAccessed:(id)arg1;
- (id)dateAccessed;
- (void)setLastPlayedDate:(id)arg1;
- (void)setPlayCountSinceSync:(unsigned long long)arg1;
- (unsigned long long)playCountSinceSync;
- (void)setPlayCount:(unsigned long long)arg1;
- (unsigned long long)playCount;
- (id)predicateForProperty:(id)arg1;
- (unsigned long long)podcastPersistentID;
- (id)podcastTitle;
- (double)effectiveStopTime;
- (unsigned long long)genrePersistentID;
- (unsigned long long)composerPersistentID;
- (id)artwork;
- (unsigned long long)artistPersistentID;
- (id)albumTitle;
- (unsigned long long)albumArtistPersistentID;
- (unsigned long long)albumPersistentID;
- (id)effectiveAlbumArtist;
- (id)_bestStoreURL;
- (void)updateDateAccessedToCurrentDateWithWriteCompletionBlock:(id)arg1;
- (bool)incrementPlayCountForStopTime:(double)arg1;
- (void)incrementPlayCountForPlayingToEnd;
- (void)incrementSkipCount;
- (void)noteWasPlayedToTime:(double)arg1 skipped:(bool)arg2;
- (void)markNominalAmountHasBeenPlayed;
- (bool)didSkipWithPlayedToTime:(double)arg1;
- (id)valuesForProperties:(id)arg1;
- (Class)itemArrayCoderPIDDataCodingClass;
- (id)_libraryLinkPlaylistName;
- (id)_libraryLinkArtist;
- (id)_libraryLinkKind;
- (id)chaptersOfType:(long long)arg1;
- (double)playbackDuration;
- (id)_libraryLinkURL;
- (id)_directStoreURL;
- (id)representativeItem;
- (id)initWithPersistentID:(unsigned long long)arg1;
- (id)initWithMultiverseIdentifier:(id)arg1;
- (id)screenshotArtworkCatalog;
- (id)artworkCatalog;
- (id)chapterOfType:(long long)arg1 atTime:(double)arg2;
- (bool)isITunesU;
- (double)bookmarkTime;
- (bool)isCloudItem;
- (unsigned long long)discCount;
- (unsigned long long)discNumber;
- (id)composer;
- (unsigned long long)albumTrackCount;
- (unsigned long long)albumTrackNumber;
- (id)albumArtist;
- (id)artist;
- (double)stopTime;
- (id)lyrics;
- (unsigned long long)mediaType;
- (id)title;
- (unsigned long long)year;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)valueForProperty:(id)arg1;
- (double)startTime;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)didReceiveMemoryWarning;

@end

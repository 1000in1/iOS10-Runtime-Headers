/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@class <MPDetailScrubControllerDelegate>, UIControl<MPDetailedScrubbing>;

@interface MPDetailScrubController : NSObject  {
    bool_didBeginTracking;
    bool_needsCommit;
    float _accumulatedDelta;
    struct CGPoint { 
        double x; 
        double y; 
    } _previousLocationInView;
    struct CGPoint { 
        double x; 
        double y; 
    } _beginLocationInView;
    struct CGPoint { 
        double x; 
        double y; 
    } _lastCommittedLocationInView;
    float _currentValue;
    bool_detailedScrubbingEnabled;
    bool_isTracking;
    UIControl<MPDetailedScrubbing> *_scrubbingControl;
    <MPDetailScrubControllerDelegate> *_delegate;
    double _duration;
    double _scrubbingVerticalRange;
    long long _currentScrubSpeed;
}

@property UIControl<MPDetailedScrubbing> * scrubbingControl;
@property <MPDetailScrubControllerDelegate> * delegate;
@property double duration;
@property double scrubbingVerticalRange;
@property bool detailedScrubbingEnabled;
@property(readonly) bool durationAllowsForDetailedScrubbing;
@property(readonly) bool isTracking;
@property(readonly) long long currentScrubSpeed;


- (void)setScrubbingVerticalRange:(double)arg1;
- (double)scrubbingVerticalRange;
- (void)setScrubbingControl:(id)arg1;
- (id)scrubbingControl;
- (void)_endScrubbing;
- (void)_commitValue:(float)arg1;
- (float)_scaleForIdealValueForVerticalPosition:(double)arg1;
- (float)_minimumScale;
- (void)_beginScrubbing;
- (long long)currentScrubSpeed;
- (float)scaleForVerticalPosition:(double)arg1;
- (bool)durationAllowsForDetailedScrubbing;
- (bool)detailedScrubbingEnabled;
- (void)setDetailedScrubbingEnabled:(bool)arg1;
- (id)initWithScrubbingControl:(id)arg1;
- (void)setDuration:(double)arg1;
- (id)init;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void).cxx_destruct;
- (double)duration;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (bool)isTracking;

@end

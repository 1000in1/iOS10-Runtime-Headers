/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@class NSTimer, NSString, MPDetailScrubController, UIView, UIImageView, UILabel, <MPDetailSliderDelegate>;

@interface MPDetailSlider : UISlider <MPDetailedScrubbing, MPDetailScrubControllerDelegate> {
    UILabel *_currentTimeInverseLabel;
    UILabel *_currentTimeLabel;
    MPDetailScrubController *_scrubController;
    bool_allowsScrubbing;
    bool_autoscrubActive;
    NSTimer *_autoscrubTimer;
    bool_canCommit;
    double _currentTime;
    UIView *_downloadingTrackOverlay;
    UIImageView *_glowDetailScrubImageView;
    bool_isTracking;
    double _maxTrackWidth;
    struct CGPoint { 
        double x; 
        double y; 
    } _previousLocationInView;
    long long _style;
    UIImageView *_thumbImageView;
    double _trackInset;
    <MPDetailSliderDelegate> *_delegate;
    double _detailScrubbingVerticalRange;
    double _duration;
    double _availableDuration;
    long long _timeLabelStyle;
    double _minTimeLabelWidth;
}

@property <MPDetailSliderDelegate> * delegate;
@property bool allowsScrubbing;
@property bool allowsDetailScrubbing;
@property double detailScrubbingVerticalRange;
@property double duration;
@property double availableDuration;
@property(readonly) bool detailScrubbingAvailableForCurrentDuration;
@property long long timeLabelStyle;
@property double minTimeLabelWidth;
@property(readonly) NSString * localizedScrubSpeedText;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;

+ (Class)labelClass;

- (double)minTimeLabelWidth;
- (long long)timeLabelStyle;
- (double)availableDuration;
- (void)setDetailScrubbingVerticalRange:(double)arg1;
- (double)detailScrubbingVerticalRange;
- (void)setMinTimeLabelWidth:(double)arg1;
- (void)setAllowsScrubbing:(bool)arg1;
- (void)detailScrubController:(id)arg1 didChangeScrubSpeed:(long long)arg2;
- (void)detailScrubController:(id)arg1 didChangeValue:(float)arg2;
- (id)_stringForTime:(double)arg1;
- (id)_colorSliceImageWithColor:(id)arg1 height:(double)arg2;
- (id)_modernThumbImageWithColor:(id)arg1 height:(double)arg2 includeShadow:(bool)arg3;
- (bool)allowsScrubbing;
- (void)_updateTimeDisplayForTime:(double)arg1 force:(bool)arg2;
- (void)_resetScrubInfo;
- (void)_autoscrubTick:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbHitRect;
- (void)_commitValue;
- (void)_updateTimeDisplayForTime:(double)arg1;
- (void)_updateForAvailableDuraton;
- (void)_setValueWhileTracking:(float)arg1 duration:(double)arg2;
- (void)_updateTrackInset;
- (id)_stringForInverseCurrentTime:(double)arg1;
- (id)_stringForCurrentTime:(double)arg1;
- (id)timeLabelTextColorForStyle:(long long)arg1;
- (id)timeLabelFontForStyle:(long long)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 style:(long long)arg2 maxTrackWidth:(double)arg3;
- (void)_setupControlsForStyle;
- (void)setValue:(float)arg1 duration:(double)arg2;
- (void)cancelTracking;
- (void)setTimeLabelStyle:(long long)arg1;
- (void)setAvailableDuration:(double)arg1;
- (bool)detailScrubbingAvailableForCurrentDuration;
- (id)localizedScrubSpeedText;
- (bool)allowsDetailScrubbing;
- (void)setAllowsDetailScrubbing:(bool)arg1;
- (void)setDuration:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (void).cxx_destruct;
- (double)duration;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_thumbHitEdgeInsets;
- (void)setValue:(float)arg1 animated:(bool)arg2;
- (id)currentThumbImage;
- (id)createThumbView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 trackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 value:(float)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })trackRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)viewForBaselineLayout;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 style:(long long)arg2;
- (void)tintColorDidChange;
- (bool)isTracking;
- (void)layoutSubviews;

@end

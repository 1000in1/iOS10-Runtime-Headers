/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/MapKit.framework/MapKit
 */

@class UIColor, NSString, NSArray, CLLocationManager, MKMapItem, UIImageView, NSMutableArray, CLLocation, UILabel, <_MKResultViewDelegate>;

@interface _MKResultView : UIView <CLLocationManagerDelegate> {
    NSArray *_mapItems;
    CLLocation *_referenceLocation;
    bool_alwaysUsesBusinessLayout;
    int _layoutType;
    <_MKResultViewDelegate> *delegate;
    bool_selected;
    bool_showsDistance;
    NSMutableArray *_resultConstraints;
    double _expectedLabelsHeight;
    CLLocationManager *_locManager;
    NSString *_primaryLabelText;
    NSString *_secondaryLabelText;
    bool_useSpotlightVibrancy;
    UILabel *_nameLabel;
    UILabel *_secondaryLabel;
    UILabel *_tertiaryLabel;
    <_MKResultViewDelegate> *_delegate;
    double _fallbackDistance;
    UIColor *_primaryTextColor;
    UIColor *_secondaryTextColor;
    UIImageView *_imageView;
}

@property <_MKResultViewDelegate> * delegate;
@property(readonly) double preferredHeight;
@property(retain) UIColor * primaryTextColor;
@property(retain) UIColor * secondaryTextColor;
@property(retain) MKMapItem * mapItem;
@property(retain) NSString * primaryLabelText;
@property(retain) NSString * secondaryLabelText;
@property(retain) NSArray * mapItems;
@property(retain) CLLocation * referenceLocation;
@property bool selected;
@property bool showsDistance;
@property double fallbackDistance;
@property bool alwaysUsesBusinessLayout;
@property(retain) UIImageView * imageView;
@property(retain) UILabel * nameLabel;
@property(retain) UILabel * secondaryLabel;
@property(retain) UILabel * tertiaryLabel;
@property bool useSpotlightVibrancy;

+ (bool)requiresConstraintBasedLayout;

- (void)setFallbackDistance:(double)arg1;
- (void)setAlwaysUsesBusinessLayout:(bool)arg1;
- (bool)alwaysUsesBusinessLayout;
- (void)setTertiaryLabel:(id)arg1;
- (void)setSecondaryLabelText:(id)arg1;
- (id)secondaryLabelText;
- (id)primaryLabelText;
- (void)setShowsDistance:(bool)arg1;
- (id)initWithMapItems:(id)arg1 primaryLabelText:(id)arg2;
- (void)setReferenceLocation:(id)arg1;
- (void)_updateLayoutForBusinessOrCategory;
- (void)_updateLayoutForAddress;
- (double)fallbackDistance;
- (bool)showsDistance;
- (id)_defaultSecondaryCategoryLabel;
- (id)_defaultPrimaryCategoryLabel;
- (unsigned long long)_maxNameLengthForEndingString:(id)arg1;
- (unsigned long long)_maxSecondaryStringLengthForEndingString:(id)arg1;
- (void)addLabelIfNecessary:(id)arg1;
- (bool)useSpotlightVibrancy;
- (void)updateSubviews;
- (id)secondaryTextColor;
- (id)primaryTextColor;
- (void)_updateSecondaryColors;
- (void)_updatePrimaryColors;
- (void)_updateColors;
- (id)_labelWithFontSize:(double)arg1;
- (void)setUseSpotlightVibrancy:(bool)arg1;
- (id)tertiaryLabel;
- (void)setSecondaryTextColor:(id)arg1;
- (void)setPrimaryTextColor:(id)arg1;
- (void)_updateFontSizing;
- (void)_contentSizeCategoryDidChange;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 highlightsOnTouch:(bool)arg2;
- (void)setPrimaryLabelText:(id)arg1;
- (void)setMapItems:(id)arg1;
- (void)handleTap:(id)arg1;
- (id)mapItem;
- (void)setNameLabel:(id)arg1;
- (void)setMapItem:(id)arg1;
- (id)nameLabel;
- (id)initWithMapItem:(id)arg1;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (double)preferredHeight;
- (id)mapItems;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (void).cxx_destruct;
- (id)referenceLocation;
- (void)setSecondaryLabel:(id)arg1;
- (id)secondaryLabel;
- (void)commonInit;
- (bool)selected;
- (void)setImageView:(id)arg1;
- (id)imageView;
- (void)setSelected:(bool)arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)updateConstraints;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)layoutSubviews;

@end

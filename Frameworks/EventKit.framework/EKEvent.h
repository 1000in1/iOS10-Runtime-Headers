/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/Frameworks/EventKit.framework/EventKit
 */

@class NSArray, EKParticipant, EKCalendarDate, EKEventStore, NSString, NSURL, NSDate, NSNumber;

@interface EKEvent : EKCalendarItem  {
    BOOL _occurrenceIsAllDay;
    BOOL _requiresDetachDueToSnoozedAlarm;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    int _attendeeCount;
}

@property(readonly) NSString * eventIdentifier;
@property(getter=isAllDay) BOOL allDay;
@property(copy) NSDate * startDate;
@property(copy) NSDate * endDate;
@property(readonly) EKParticipant * organizer;
@property int availability;
@property(readonly) int status;
@property(readonly) BOOL isDetached;
@property(readonly) int birthdayPersonID;
@property(readonly) NSDate * occurrenceDate;
@property(readonly) int attendeeCount;
@property(readonly) NSString * UUID;
@property(readonly) NSURL * externalURL;
@property int participationStatus;
@property unsigned int invitationStatus;
@property(readonly) BOOL dateChanged;
@property(readonly) BOOL timeChanged;
@property(readonly) BOOL titleChanged;
@property(readonly) BOOL locationChanged;
@property(readonly) struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; } startDateGr;
@property(readonly) struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; } endDateGr;
@property(readonly) NSDate * initialStartDate;
@property(readonly) NSDate * initialEndDate;
@property(copy) NSString * responseComment;
@property(readonly) BOOL isEditable;
@property(readonly) BOOL isStatusDirty;
@property(readonly) BOOL isStartDateDirty;
@property(readonly) BOOL isEndDateDirty;
@property(readonly) BOOL isAllDayDirty;
@property(readonly) double duration;
@property(readonly) BOOL canBeRespondedTo;
@property(readonly) BOOL canSetAvailability;
@property(readonly) NSString * uniqueId;
@property(readonly) int pendingParticipationStatus;
@property(readonly) NSDate * participationStatusModifiedDate;
@property(readonly) BOOL canDetachSingleOccurrence;
@property(readonly) EKEventStore * eventStore;
@property(readonly) NSArray * attachments;
@property(readonly) EKCalendarDate * startCalendarDate;
@property(readonly) EKCalendarDate * endCalendarDate;
@property(readonly) BOOL responseMustApplyToAll;
@property(copy) EKCalendarDate * occurrenceStartDate;
@property(copy) EKCalendarDate * occurrenceEndDate;
@property BOOL occurrenceIsAllDay;
@property(copy) EKCalendarDate * originalOccurrenceStartDate;
@property(copy) EKCalendarDate * originalOccurrenceEndDate;
@property(copy) NSNumber * originalOccurrenceIsAllDay;
@property BOOL requiresDetachDueToSnoozedAlarm;

+ (id)eventWithEventStore:(id)arg1;

- (id)organizer;
- (BOOL)isAllDay;
- (int)attendeeCount;
- (id)_dateForNextOccurrence;
- (void)revert;
- (id)dirtyPropertiesToSkip;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (BOOL)canBeRespondedTo;
- (BOOL)hasSelfAttendee;
- (BOOL)changingAllDayPropertyIsAllowed;
- (BOOL)canDetachSingleOccurrence;
- (int)compareStartDateWithEvent:(id)arg1;
- (BOOL)isTentative;
- (BOOL)locationChanged;
- (BOOL)titleChanged;
- (BOOL)timeChanged;
- (BOOL)dateChanged;
- (void)setResponseComment:(id)arg1;
- (id)responseComment;
- (int)availability;
- (void)setRecurrenceRule:(id)arg1;
- (id)recurrenceRule;
- (int)_parentParticipationStatus;
- (BOOL)needsOccurrenceCacheUpdate;
- (id)initialEndDate;
- (id)occurrenceDate;
- (id)endCalendarDate;
- (BOOL)isEndDateDirty;
- (BOOL)isStartDateDirty;
- (BOOL)isStatusDirty;
- (BOOL)_deleteWithSpan:(int)arg1 error:(id*)arg2;
- (BOOL)_shouldDeclineInsteadOfDelete;
- (BOOL)_cancelWithSpan:(int)arg1 error:(id*)arg2;
- (BOOL)_shouldCancelInsteadOfDeleteWithSpan:(int)arg1;
- (void)_deleteThisOccurrence;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDatePinnedForAllDay;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDatePinnedForAllDay;
- (BOOL)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (BOOL)_checkStartDateConstraintAgainstDate:(struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })arg1 timeZone:(id)arg2 error:(id*)arg3;
- (id)originalOccurrenceIsAllDay;
- (BOOL)occurrenceIsAllDay;
- (void)setParticipationStatus:(int)arg1;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(BOOL)arg3;
- (BOOL)_isInitialOccurrenceDate:(id)arg1;
- (BOOL)requiresDetachDueToSnoozedAlarm;
- (BOOL)allowsRecurrenceModifications;
- (BOOL)_validateDatesAndRecurrencesGivenSpan:(int)arg1 error:(id*)arg2;
- (void)setRequiresDetachDueToSnoozedAlarm:(BOOL)arg1;
- (void)_sendModifiedNote;
- (BOOL)allowsAlarmModifications;
- (id)participationStatusModifiedDate;
- (int)pendingParticipationStatus;
- (BOOL)isAllDayDirty;
- (BOOL)requiresDetach;
- (BOOL)isDirtyIgnoringCalendar;
- (BOOL)responseMustApplyToAll;
- (BOOL)allowsCalendarModifications;
- (BOOL)isDetached;
- (BOOL)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)arg1;
- (BOOL)_validateDurationConstrainedToRecurrenceInterval;
- (BOOL)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3;
- (id)attendees;
- (int)participationStatus;
- (void)setNeedsOccurrenceCacheUpdate:(BOOL)arg1;
- (void)setAvailability:(int)arg1;
- (void)setModifiedProperties:(unsigned int)arg1;
- (unsigned int)modifiedProperties;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDateGr;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDateGr;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
- (id)_effectiveTimeZone;
- (void)setOriginalOccurrenceEndDate:(id)arg1;
- (id)occurrenceEndDate;
- (void)setOriginalOccurrenceStartDate:(id)arg1;
- (void)setEndDate:(id)arg1;
- (void)setStartDate:(id)arg1;
- (void)setOriginalOccurrenceIsAllDay:(id)arg1;
- (id)startCalendarDate;
- (id)initialStartDate;
- (int)birthdayPersonID;
- (id)committedValueForKey:(id)arg1;
- (id)originalOccurrenceEndDate;
- (id)occurrenceStartDate;
- (id)originalOccurrenceStartDate;
- (id)exportToICS;
- (id)externalURL;
- (id)eventIdentifier;
- (id)_persistentEvent;
- (void)setOccurrenceIsAllDay:(BOOL)arg1;
- (BOOL)_isAllDay;
- (void)setOccurrenceEndDate:(id)arg1;
- (void)setOccurrenceStartDate:(id)arg1;
- (id)initWithEventStore:(id)arg1;
- (id)endDate;
- (id)externalURI;
- (void)setInvitationStatus:(unsigned int)arg1;
- (unsigned int)invitationStatus;
- (void)clearInvitationStatus;
- (BOOL)removeWithSpan:(int)arg1 error:(id*)arg2;
- (BOOL)commitWithSpan:(int)arg1 error:(id*)arg2;
- (BOOL)validateWithSpan:(int)arg1 error:(id*)arg2;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (void)didCommit;
- (id)eventStore;
- (id)initWithPersistentObject:(id)arg1;
- (BOOL)canSetAvailability;
- (void)setAllDay:(BOOL)arg1;
- (void)rollback;
- (id)title;
- (id)attachments;
- (id)startDate;
- (BOOL)refresh;
- (int)status;
- (id)init;
- (void)setTimeZone:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned int)hash;
- (void)dealloc;
- (id)description;
- (id)uniqueId;
- (double)duration;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/WebKit.framework/WebKit
 */

@class NSURL, <WKHistoryDelegatePrivate>, <_WKFormDelegate>, WKBrowsingContextHandle, <WKNavigationDelegate>, UIScrollView, NSString, WKWebViewConfiguration, <_WKFindDelegate>, WKBackForwardList, NSArray, NSData, <WKUIDelegate>;

@interface WKWebView : UIView <UIScrollViewDelegate> {
    struct RetainPtr<WKWebViewConfiguration> { 
        void *m_ptr; 
    } _configuration;
    struct RefPtr<WebKit::WebPageProxy> { 
        struct WebPageProxy {} *m_ptr; 
    } _page;
    struct unique_ptr<WebKit::NavigationState, std::__1::default_delete<WebKit::NavigationState> > { 
        struct __compressed_pair<WebKit::NavigationState *, std::__1::default_delete<WebKit::NavigationState> > { 
            struct NavigationState {} *__first_; 
        } __ptr_; 
    } _navigationState;
    struct unique_ptr<WebKit::UIDelegate, std::__1::default_delete<WebKit::UIDelegate> > { 
        struct __compressed_pair<WebKit::UIDelegate *, std::__1::default_delete<WebKit::UIDelegate> > { 
            struct UIDelegate {} *__first_; 
        } __ptr_; 
    } _uiDelegate;
    struct RetainPtr<_WKRemoteObjectRegistry> { 
        void *m_ptr; 
    } _remoteObjectRegistry;
    unsigned long long _observedRenderingProgressEvents;
    struct WeakObjCPtr<id<_WKFormDelegate> > { 
        id m_weakReference; 
    } _formDelegate;
    struct RetainPtr<WKScrollView> { 
        void *m_ptr; 
    } _scrollView;
    struct RetainPtr<WKContentView> { 
        void *m_ptr; 
    } _contentView;
    bool_overridesMinimumLayoutSize;
    struct CGSize { 
        double width; 
        double height; 
    } _minimumLayoutSizeOverride;
    bool_overridesMinimumLayoutSizeForMinimalUI;
    struct CGSize { 
        double width; 
        double height; 
    } _minimumLayoutSizeOverrideForMinimalUI;
    bool_overridesMaximumUnobscuredSize;
    struct CGSize { 
        double width; 
        double height; 
    } _maximumUnobscuredSizeOverride;
    bool_usesMinimalUI;
    bool_needsToNotifyDelegateAboutMinimalUI;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _inputViewBounds;
    double _viewportMetaTagWidth;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _obscuredInsets;
    bool_isChangingObscuredInsetsInteractively;
    long long _interfaceOrientationOverride;
    bool_overridesInterfaceOrientation;
    bool_needsResetViewStateAfterCommitLoadForMainFrame;
    bool_isAnimatingResize;
    struct CATransform3D { 
        double m11; 
        double m12; 
        double m13; 
        double m14; 
        double m21; 
        double m22; 
        double m23; 
        double m24; 
        double m31; 
        double m32; 
        double m33; 
        double m34; 
        double m41; 
        double m42; 
        double m43; 
        double m44; 
    } _resizeAnimationTransformAdjustments;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _resizeAnimationView;
    double _lastAdjustmentForScroller;
    struct unique_ptr<WebKit::ViewGestureController, std::__1::default_delete<WebKit::ViewGestureController> > { 
        struct __compressed_pair<WebKit::ViewGestureController *, std::__1::default_delete<WebKit::ViewGestureController> > { 
            struct ViewGestureController {} *__first_; 
        } __ptr_; 
    } _gestureController;
    bool_allowsBackForwardNavigationGestures;
    struct RetainPtr<UIView<WKWebViewContentProvider> > { 
        void *m_ptr; 
    } _customContentView;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _customContentFixedOverlayView;
    struct Color { 
        unsigned int m_color; 
        boolm_valid; 
    } _scrollViewBackgroundColor;
    bool_delayUpdateVisibleContentRects;
    bool_hadDelayedUpdateVisibleContentRects;
    bool_pageIsPrintingToPDF;
    struct RetainPtr<CGPDFDocument *> { 
        void *m_ptr; 
    } _printedDocument;
}

@property(readonly) id _remoteObjectRegistry;
@property(readonly) WKBrowsingContextHandle * _handle;
@property(setter=_setObservedRenderingProgressEvents:) unsigned long long _observedRenderingProgressEvents;
@property(setter=_setHistoryDelegate:) <WKHistoryDelegatePrivate> * _historyDelegate;
@property(readonly) NSURL * _unreachableURL;
@property(readonly) NSArray * _certificateChain;
@property(readonly) NSURL * _committedURL;
@property(setter=_setApplicationNameForUserAgent:,copy) NSString * _applicationNameForUserAgent;
@property(setter=_setCustomUserAgent:,copy) NSString * _customUserAgent;
@property(readonly) int _webProcessIdentifier;
@property(readonly) NSData * _sessionState;
@property(setter=_setPrivateBrowsingEnabled:) bool _privateBrowsingEnabled;
@property(setter=_setAllowsRemoteInspection:) bool _allowsRemoteInspection;
@property(setter=_setAddsVisitedLinks:) bool _addsVisitedLinks;
@property(setter=_setMinimumLayoutSizeOverride:) struct CGSize { double x1; double x2; } _minimumLayoutSizeOverride;
@property(setter=_setMinimumLayoutSizeOverrideForMinimalUI:) struct CGSize { double x1; double x2; } _minimumLayoutSizeOverrideForMinimalUI;
@property(setter=_setMaximumUnobscuredSizeOverride:) struct CGSize { double x1; double x2; } _maximumUnobscuredSizeOverride;
@property(readonly) bool _usesMinimalUI;
@property(setter=_setObscuredInsets:) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _obscuredInsets;
@property(setter=_setInterfaceOrientationOverride:) long long _interfaceOrientationOverride;
@property(setter=_setBackgroundExtendsBeyondPage:) bool _backgroundExtendsBeyondPage;
@property(getter=_isDisplayingPDF,readonly) bool _displayingPDF;
@property(readonly) NSData * _dataForDisplayedPDF;
@property(readonly) NSString * _suggestedFilenameForDisplayedPDF;
@property(readonly) double _viewportMetaTagWidth;
@property(setter=_setPaginationMode:) long long _paginationMode;
@property(setter=_setPaginationBehavesLikeColumns:) bool _paginationBehavesLikeColumns;
@property(setter=_setPageLength:) double _pageLength;
@property(setter=_setGapBetweenPages:) double _gapBetweenPages;
@property(readonly) unsigned long long _pageCount;
@property(readonly) bool _supportsTextZoom;
@property(setter=_setTextZoomFactor:) double _textZoomFactor;
@property(setter=_setPageZoomFactor:) double _pageZoomFactor;
@property(setter=_setFindDelegate:) <_WKFindDelegate> * _findDelegate;
@property(setter=_setFormDelegate:) <_WKFormDelegate> * _formDelegate;
@property(setter=_setPrintedDocument:) struct CGPDFDocument { }* _printedDocument;
@property(readonly) WKWebViewConfiguration * configuration;
@property <WKNavigationDelegate> * navigationDelegate;
@property <WKUIDelegate> * UIDelegate;
@property(readonly) WKBackForwardList * backForwardList;
@property(readonly) NSString * title;
@property(readonly) NSURL * URL;
@property(getter=isLoading,readonly) bool loading;
@property(readonly) double estimatedProgress;
@property(readonly) bool hasOnlySecureContent;
@property(readonly) bool canGoBack;
@property(readonly) bool canGoForward;
@property bool allowsBackForwardNavigationGestures;
@property(readonly) UIScrollView * scrollView;
@property(setter=_setUsesMinimalUI:) bool _usesMinimalUI;


- (id)_reload;
- (id)_handle;
- (void)_setPrintedDocument:(struct CGPDFDocument { }*)arg1;
- (void)_endPrinting;
- (long long)_computePageCountAndStartDrawingToPDFWithPrintInfo:(const struct PrintInfo { float x1; float x2; float x3; }*)arg1 firstPage:(unsigned int)arg2 computedTotalScaleFactor:(double*)arg3;
- (id)_suggestedFilenameForDisplayedPDF;
- (id)_dataForDisplayedPDF;
- (id)_viewForFindUI;
- (void)_overrideLayoutParametersWithMinimumLayoutSize:(struct CGSize { double x1; double x2; })arg1 minimumLayoutSizeForMinimalUI:(struct CGSize { double x1; double x2; })arg2 maximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg3;
- (void)_snapshotRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 intoImageOfWidth:(double)arg2 completionHandler:(id)arg3;
- (void)_setOverlaidAccessoryViewsInset:(struct CGSize { double x1; double x2; })arg1;
- (void)_hideInspectorIndication;
- (void)_showInspectorIndication;
- (void)_endAnimatedResize;
- (void)_beginAnimatedResizeWithUpdates:(id)arg1;
- (void)_setInterfaceOrientationOverride:(long long)arg1;
- (void)_hideFindUI;
- (void)_findString:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (void)_countStringMatches:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (void)_setFindDelegate:(id)arg1;
- (id)_findDelegate;
- (void)_setPageZoomFactor:(double)arg1;
- (double)_pageZoomFactor;
- (void)_setTextZoomFactor:(double)arg1;
- (double)_textZoomFactor;
- (bool)_supportsTextZoom;
- (void)_getWebArchiveDataWithCompletionHandler:(id)arg1;
- (void)_runJavaScriptInMainFrame:(id)arg1;
- (void)_setObservedRenderingProgressEvents:(unsigned long long)arg1;
- (void)_setAddsVisitedLinks:(bool)arg1;
- (bool)_addsVisitedLinks;
- (void)_setAllowsRemoteInspection:(bool)arg1;
- (bool)_allowsRemoteInspection;
- (bool)_privateBrowsingEnabled;
- (void)_restoreFromSessionState:(id)arg1;
- (id)_sessionState;
- (void)_killWebContentProcess;
- (int)_webProcessIdentifier;
- (void)_setCustomUserAgent:(id)arg1;
- (id)_customUserAgent;
- (void)_setApplicationNameForUserAgent:(id)arg1;
- (id)_applicationNameForUserAgent;
- (id)_committedURL;
- (id)_certificateChain;
- (void)_loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;
- (void)_setHistoryDelegate:(id)arg1;
- (id)_historyDelegate;
- (bool)_isDisplayingPDF;
- (void)_setMaximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setMinimumLayoutSizeOverrideForMinimalUI:(struct CGSize { double x1; double x2; })arg1;
- (void)_setMinimumLayoutSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (struct CGPDFDocument { }*)_printedDocument;
- (long long)_interfaceOrientationOverride;
- (double)_viewportMetaTagWidth;
- (struct CGSize { double x1; double x2; })_maximumUnobscuredSizeOverride;
- (struct CGSize { double x1; double x2; })_minimumLayoutSizeOverrideForMinimalUI;
- (unsigned long long)_observedRenderingProgressEvents;
- (void)_zoomToFocusRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 selectionRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(bool)arg6 forceScroll:(bool)arg7;
- (void)_scrollToContentOffset:(struct FloatPoint { float x1; float x2; })arg1;
- (struct ViewSnapshot { unsigned int x1; struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x_1_2_1; } x_2_1_1; } x2; unsigned long long x3; float x4; struct IntSize { int x_5_1_1; int x_5_1_2; } x5; unsigned long long x6; })_takeViewSnapshot;
- (void)_dynamicViewportUpdateChangedTargetToScale:(double)arg1 position:(struct CGPoint { double x1; double x2; })arg2;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote>, 0, WTF::CrashOnOverflow> { struct RefPtr<WebKit::PlatformCALayerRemote> {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_3_1_1; } x3; struct Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties, 0, WTF::CrashOnOverflow> { struct LayerCreationProperties {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_5_1_1; unsigned int x_5_1_2; unsigned int x_5_1_3; } x5; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; struct IntSize { int x_8_1_1; int x_8_1_2; } x8; struct Color { unsigned int x_9_1_1; boolx_9_1_2; } x9; double x10; double x11; double x12; unsigned long long x13; unsigned long long x14; boolx15; boolx16; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_processDidExit;
- (bool)_usesMinimalUI;
- (void)_setUsesMinimalUI:(bool)arg1;
- (void)_didInvokeUIScrollViewDelegateCallback;
- (void)_willInvokeUIScrollViewDelegateCallback;
- (void)_setViewportMetaTagWidth:(float)arg1;
- (void)_didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg1 data:(id)arg2;
- (void)_setHasCustomContentView:(bool)arg1 loadedMIMEType:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg2;
- (bool)hasOnlySecureContent;
- (id)goToBackForwardListItem:(id)arg1;
- (void)setNavigationDelegate:(id)arg1;
- (id)navigationDelegate;
- (bool)usesStandardContentView;
- (void)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 atScale:(double)arg2 origin:(struct FloatPoint { float x1; float x2; })arg3;
- (bool)_scrollToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 origin:(struct FloatPoint { float x1; float x2; })arg2 minimumScrollDistance:(float)arg3;
- (void)_zoomToPoint:(struct FloatPoint { float x1; float x2; })arg1 atScale:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentRectForUserInteraction;
- (void)_updateScrollViewBackground;
- (id)_contentSizeCategory;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 configuration:(id)arg2;
- (bool)_backgroundExtendsBeyondPage;
- (void)_setBackgroundExtendsBeyondPage:(bool)arg1;
- (void)_endInteractiveObscuredInsetsChange;
- (void)_beginInteractiveObscuredInsetsChange;
- (void)_setObscuredInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (struct CGSize { double x1; double x2; })_minimumLayoutSizeOverride;
- (bool)allowsBackForwardNavigationGestures;
- (void)setAllowsBackForwardNavigationGestures:(bool)arg1;
- (void)_keyboardChangedWithInfo:(id)arg1 adjustScrollView:(bool)arg2;
- (void)_didFinishScrolling;
- (void)_updateVisibleContentRects;
- (id)browsingContextController;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_obscuredInsets;
- (id)_remoteObjectRegistry;
- (bool)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOrigin:(struct FloatPoint { float x1; float x2; })arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(float)arg6;
- (void)_zoomOutWithOrigin:(struct FloatPoint { float x1; float x2; })arg1;
- (id)reload;
- (id)backForwardList;
- (void)setUIDelegate:(id)arg1;
- (void)_setFormDelegate:(id)arg1;
- (id)_formDelegate;
- (id)reloadFromOrigin;
- (id)loadRequest:(id)arg1;
- (id)_unreachableURL;
- (double)estimatedProgress;
- (bool)isLoading;
- (id)UIDelegate;
- (id)goForward;
- (id)goBack;
- (void)_close;
- (id)title;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setPrivateBrowsingEnabled:(bool)arg1;
- (id)configuration;
- (id)initWithCoder:(id)arg1;
- (void)stopLoading;
- (id)URL;
- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)_windowDidRotate:(id)arg1;
- (void)_keyboardWillChangeFrame:(id)arg1;
- (void)_keyboardDidChangeFrame:(id)arg1;
- (unsigned long long)_pageCount;
- (void)_setGapBetweenPages:(double)arg1;
- (double)_gapBetweenPages;
- (void)_setPageLength:(double)arg1;
- (double)_pageLength;
- (void)_setPaginationBehavesLikeColumns:(bool)arg1;
- (bool)_paginationBehavesLikeColumns;
- (void)_setPaginationMode:(long long)arg1;
- (long long)_paginationMode;
- (void)_frameOrBoundsChanged;
- (bool)canGoForward;
- (bool)canGoBack;
- (Class)_printFormatterClass;
- (id)scrollView;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (struct CGSize { double x1; double x2; })scrollView:(id)arg1 contentSizeForZoomScale:(double)arg2 withProposedSize:(struct CGSize { double x1; double x2; })arg3;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (id)viewForZoomingInScrollView:(id)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)didMoveToWindow;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/AVKit.framework/AVKit
 */

@class NSError, AVPlayer;

@interface AVPlayerController : UIResponder  {
    AVPlayer *_player;
    long long _status;
    NSError *_error;
}

@property(getter=isPlayingOnSecondScreen) bool playingOnSecondScreen;
@property bool CALayerDestinationIsTVOut;
@property(readonly) AVPlayer * player;
@property(readonly) long long status;
@property(readonly) NSError * error;

+ (void)initialize;

- (id)initWithPlayer:(id)arg1;
- (bool)CALayerDestinationIsTVOut;
- (void)setCALayerDestinationIsTVOut:(bool)arg1;
- (bool)isPlayingOnSecondScreen;
- (bool)canSeekChapterBackward;
- (bool)canSeekChapterForward;
- (void)seekToChapter:(id)arg1;
- (id)contentChapters;
- (void)seekFrameBackward:(id)arg1;
- (bool)canSeekFrameBackward;
- (void)seekFrameForward:(id)arg1;
- (bool)canSeekFrameForward;
- (void)scanBackward:(id)arg1;
- (void)scanForward:(id)arg1;
- (void)seekByTimeInterval:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekByTimeInterval:(double)arg1;
- (bool)isSeeking;
- (bool)hasShareableContent;
- (bool)hasTrimmableContent;
- (bool)hasContentChapters;
- (void)toggleMuted:(id)arg1;
- (void)changeVolumeToMaximum:(id)arg1;
- (void)changeVolumeToMinimum:(id)arg1;
- (void)decreaseVolume:(id)arg1;
- (void)increaseVolume:(id)arg1;
- (void)setLooping:(bool)arg1;
- (bool)isLooping;
- (void)autoplay:(id)arg1;
- (void)setRateWithThrottling:(double)arg1;
- (void)setPlayingOnSecondScreen:(bool)arg1;
- (void)play:(id)arg1;
- (bool)isPlaying;
- (void)setRate:(double)arg1;
- (double)rate;
- (void)setVolume:(double)arg1;
- (double)volume;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (id)metadata;
- (long long)status;
- (id)externalPlaybackAirPlayDeviceLocalizedName;
- (id)loadedTimeRanges;
- (double)contentDurationWithinEndTimes;
- (void)setMaxTime:(double)arg1;
- (double)maxTime;
- (void)setMinTime:(double)arg1;
- (double)minTime;
- (bool)hasEnabledVideo;
- (bool)hasEnabledAudio;
- (struct CGSize { double x1; double x2; })contentDimensions;
- (void)setContentDuration:(double)arg1;
- (bool)canSeek;
- (bool)canTogglePlayback;
- (void)setCanPause:(bool)arg1;
- (bool)canPause;
- (bool)canScanBackward;
- (bool)isPlayingOnExternalScreen;
- (void)setCurrentLegibleMediaSelectionOption:(id)arg1;
- (id)currentLegibleMediaSelectionOption;
- (void)setCurrentAudioMediaSelectionOption:(id)arg1;
- (id)currentAudioMediaSelectionOption;
- (bool)hasMediaSelectionOptions;
- (void)seekChapterForward:(id)arg1;
- (bool)canSeekToEnd;
- (void)seekChapterBackward:(id)arg1;
- (bool)canSeekToBeginning;
- (void)endScanningBackward:(id)arg1;
- (void)beginScanningBackward:(id)arg1;
- (void)endScanningForward:(id)arg1;
- (void)beginScanningForward:(id)arg1;
- (bool)canScanForward;
- (void)gotoEndOfSeekableRanges:(id)arg1;
- (void)skipBackwardThirtySeconds:(id)arg1;
- (bool)hasLiveStreamingContent;
- (void)endScrubbing:(id)arg1;
- (void)beginScrubbing:(id)arg1;
- (void)setPlaying:(bool)arg1;
- (void)togglePlayback:(id)arg1;
- (void)pause:(id)arg1;
- (id)legibleMediaSelectionOptions;
- (id)audioMediaSelectionOptions;
- (bool)hasLegibleMediaSelectionOptions;
- (bool)hasAudioMediaSelectionOptions;
- (void)seekToEnd:(id)arg1;
- (void)seekToBeginning:(id)arg1;
- (bool)canPlay;
- (void)seekToTime:(double)arg1;
- (id)timing;
- (double)contentDuration;
- (id)player;
- (bool)allowsExternalPlayback;
- (bool)isExternalPlaybackActive;
- (id)seekableTimeRanges;
- (void)setAllowsExternalPlayback:(bool)arg1;
- (long long)externalPlaybackType;
- (id)error;
- (void).cxx_destruct;
- (bool)hasContent;

@end

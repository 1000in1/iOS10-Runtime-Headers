/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/Foundation.framework/Foundation
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, NSDictionary, NSURL, NSArray;

@interface NSError : NSObject <NSCopying, NSSecureCoding> {
    void *_reserved;
    long long _code;
    NSString *_domain;
    NSDictionary *_userInfo;
}

@property(getter=_mapkit_isCLDenied,readonly) bool _mapkit_CLDenied;
@property(getter=_mapkit_isCLLocationUnknown,readonly) bool _mapkit_CLLocationUnknown;
@property(getter=_mapkit_isCLHeadingFailure,readonly) bool _mapkit_CLHeadingFailure;
@property(getter=_mapkit_isCLErrorNetwork,readonly) bool _mapkit_CLErrorNetwork;
@property(retain,readonly) NSURL * _mapkit_locationErrorSettingsURL;
@property(copy,readonly) NSString * domain;
@property(readonly) long long code;
@property(copy,readonly) NSDictionary * userInfo;
@property(copy,readonly) NSString * localizedDescription;
@property(copy,readonly) NSString * localizedFailureReason;
@property(copy,readonly) NSString * localizedRecoverySuggestion;
@property(copy,readonly) NSArray * localizedRecoveryOptions;
@property(retain,readonly) id recoveryAttempter;
@property(copy,readonly) NSString * helpAnchor;

+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 userInfo:(id)arg3;
+ (id)_web_errorWithDomain:(id)arg1 code:(long long)arg2 URL:(id)arg3;
+ (id)_web_errorWithDomain:(id)arg1 code:(long long)arg2 failingURL:(id)arg3;
+ (void)_web_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2;
+ (void)_registerBuiltInFormatters;
+ (void)_registerFormatter:(int (*)())arg1 forErrorKey:(id)arg2 parameters:(const char *)arg3;
+ (bool)supportsSecureCoding;
+ (id)genericErrorWithFile:(const char *)arg1 function:(const char *)arg2 lineNumber:(long long)arg3;
+ (id)bs_timeoutError;
+ (void)_webkit_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2;
+ (id)_webKitErrorWithCode:(int)arg1 failingURL:(id)arg2;
+ (id)_webkit_errorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3;
+ (void)_registerWebKitErrors;
+ (id)_webKitErrorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3;
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 underlyingError:(id)arg4 errorType:(id)arg5;
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 errorType:(id)arg4;
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 suggestion:(id)arg4 USEnglishSuggestion:(id)arg5 underlyingError:(id)arg6 errorType:(id)arg7;
+ (id)MCErrorWithDomain:(id)arg1 code:(long long)arg2 descriptionArray:(id)arg3 errorType:(id)arg4;
+ (id)hs_cloudErrorWithCode:(long long)arg1 userInfo:(id)arg2;
+ (id)hs_homeSharingErrorWithCode:(long long)arg1 userInfo:(id)arg2;
+ (id)errorWithBTResult:(id)arg1;
+ (id)_geo_errorFromXPCData:(id)arg1;
+ (id)zilchDecoderErrorForNoSolution;
+ (id)errorWithCode:(int)arg1 description:(id)arg2;
+ (id)_defaultDescriptionForCode:(int)arg1;
+ (id)errorWithCADResult:(int)arg1 action:(id)arg2;
+ (id)errorWithCode:(int)arg1;
+ (id)errorWithCADResult:(int)arg1;
+ (id)errorFromErrno;
+ (id)errorWithPOSIXCode:(int)arg1;
+ (id)AVConferenceServiceError:(long long)arg1 detailCode:(long long)arg2 description:(id)arg3;
+ (id)AVConferenceServiceError:(long long)arg1 detailedCode:(long long)arg2 filePath:(id)arg3 description:(id)arg4 reason:(id)arg5;
+ (id)AVConferenceServiceError:(long long)arg1 detailedCode:(long long)arg2 returnCode:(long long)arg3 filePath:(id)arg4 description:(id)arg5 reason:(id)arg6;
+ (id)_gkUnauthenticatedError;
+ (id)userErrorForServerCode:(long long)arg1 reason:(id)arg2;
+ (id)serverErrorForCode:(long long)arg1 withUserInfo:(id)arg2;
+ (id)userErrorForServerError:(id)arg1;
+ (id)serverErrorForCode:(long long)arg1 withReason:(id)arg2;
+ (id)userErrorForCode:(long long)arg1 userInfo:(id)arg2;
+ (id)userErrorForCode:(long long)arg1 underlyingError:(id)arg2;
+ (id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 underlyingError:(id)arg4 additionalUserInfo:(id)arg5;
+ (id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 suggestion:(id)arg4;
+ (id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 underlyingError:(id)arg4;
+ (id)MSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3;
+ (id)MMCSErrorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3;
+ (id)errorFromTencentWeiboAPIResponseErrorWithType:(long long)arg1 code:(long long)arg2;
+ (id)APIGenericErrorFromErrorCode:(long long)arg1;
+ (id)APIFakeUserErrorFromErrorCode:(long long)arg1;
+ (id)APIUserErrorFromErrorCode:(long long)arg1;
+ (id)APIInternalServerErrorFromErrorCode:(long long)arg1;
+ (id)APIAuthorizationErrorFromErrorCode:(long long)arg1;
+ (id)APILimitErrorFromErrorCode:(long long)arg1;
+ (id)APIParameterErrorFromErrorCode:(long long)arg1;
+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 alertTitle:(id)arg3 alertMessage:(id)arg4;
+ (id)tsuErrorWithCode:(long long)arg1;
+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 alertTitle:(id)arg3 alertMessage:(id)arg4 userInfo:(id)arg5;
+ (id)errorWithDomain:(id)arg1 code:(long long)arg2 description:(id)arg3 recoverySuggestion:(id)arg4;

- (id)initWithDomain:(id)arg1 code:(long long)arg2 userInfo:(id)arg3;
- (unsigned long long)_cfTypeID;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)userInfo;
- (id)localizedRecoverySuggestion;
- (id)localizedFailureReason;
- (id)localizedDescription;
- (long long)code;
- (id)domain;
- (id)_web_initWithDomain_nowarn:(id)arg1 code:(long long)arg2 URL:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)finalize;
- (void)dealloc;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (id)_web_localizedDescription;
- (bool)_web_errorIsInDomain:(id)arg1;
- (id)_web_failingURL;
- (id)_web_initWithDomain:(id)arg1 code:(long long)arg2 failingURL:(id)arg3;
- (id)_cocoaErrorString:(id)arg1 fromBundle:(id)arg2 tableName:(id)arg3;
- (id)_formatCocoaErrorString:(id)arg1 parameters:(const char *)arg2 applicableFormatters:(struct { /* ? */ }**)arg3 count:(long long)arg4;
- (long long)_collectApplicableUserInfoFormatters:(struct { /* ? */ }**)arg1 max:(long long)arg2;
- (id)helpAnchor;
- (id)recoveryAttempter;
- (id)localizedRecoveryOptions;
- (struct __CFString { }*)_retainedUserInfoCallBackForKey:(id)arg1;
- (id)_cocoaErrorStringWithKind:(id)arg1;
- (id)_cocoaErrorStringWithKind:(id)arg1 variant:(id)arg2;
- (id)_cocoaErrorString:(id)arg1;
- (bool)bs_isTimeoutError;
- (bool)bs_isCancelledError;
- (id)ac_secureCodingError;
- (id)_webkit_initWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3;
- (id)_initWithPluginErrorCode:(int)arg1 contentURL:(id)arg2 pluginPageURL:(id)arg3 pluginName:(id)arg4 MIMEType:(id)arg5;
- (id)MCErrorType;
- (bool)MCContainsErrorDomain:(id)arg1 code:(long long)arg2;
- (id)MCCopyAsPrimaryError;
- (id)MCUSEnglishSuggestion;
- (id)MCUSEnglishDescription;
- (id)MCFindPrimaryError;
- (id)MCVerboseDescription;
- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;
- (bool)isFatalError;
- (bool)isEqual:(id)arg1 compareUserInfo:(bool)arg2;
- (id)errorBySettingFatalError:(bool)arg1;
- (id)_geo_newXPCData;
- (id)zilchDecoderTileLoadingError;
- (bool)isPOSIXErrorCode:(long long)arg1;
- (bool)CKIsNotFoundError;
- (id)CKClientSuitableError;
- (bool)_gkIsUnauthenticatedError;
- (id)DAExtendedDescription;
- (bool)mf_isMissingAccountCredentialError;
- (bool)mf_isInaccessibleAccountCredentialError;
- (bool)mf_shouldBeReportedToUser;
- (id)mf_moreInfo;
- (bool)mf_isUserCancelledError;
- (id)mf_shortDescription;
- (id)_mapkit_locationErrorSettingsURL;
- (bool)_mapkit_isCLErrorNetwork;
- (bool)_mapkit_isCLHeadingFailure;
- (bool)_mapkit_isCLLocationUnknown;
- (bool)_mapkit_isCLDenied;
- (id)_mapkit_error;
- (long long)_mapkit_underlyingGEOError;
- (long long)_mapkit_directionsErrorCode;
- (bool)_mapkit_isDirectionsError;
- (id)_mapkit_directionsErrorWithDetail:(struct { int x1; int x2; struct { unsigned int x_3_1_1 : 1; unsigned int x_3_1_2 : 1; } x3; }*)arg1;
- (bool)MSASStateMachineIsCanceledError;
- (id)MSMakePrimaryError;
- (bool)MSContainsErrorWithDomain:(id)arg1 code:(long long)arg2;
- (void)_MSApplyBlock:(id)arg1;
- (id)_MSVerboseDescriptionRecursionCount:(int)arg1;
- (id)MSFindPrimaryError;
- (bool)MSIsRegistrationError;
- (id)MSMMCSRetryAfterDate;
- (bool)MSIsAuthError;
- (bool)MSIsBadTokenError;
- (bool)MSIsFatal;
- (bool)MSCanBeIgnored;
- (bool)MSIsCounted;
- (bool)MSNeedsBackoff;
- (bool)MSIsQuotaError;
- (bool)MSIsTemporaryNetworkError;
- (id)MSVerboseDescription;
- (id)MMCSRetryAfterDate;
- (bool)MMCSIsCancelError;
- (int)MMCSErrorType;
- (void)_MMCSApplyBlock:(id)arg1;
- (bool)MMCSIsFatalError;
- (bool)MMCSIsNetworkConditionsError;
- (bool)MMCSIsAuthorizationError;
- (id)cplShortDomainDescription;
- (bool)isCPLErrorWithCode:(long long)arg1;
- (bool)isCPLError;
- (id)cplUnderlyingPOSIXError;
- (bool)isCPLOperationCancelledError;
- (id)encodeableError;
- (id)encodeableError;
- (id)encodeableError;
- (id)encodeableError;
- (bool)isCancelError;
- (bool)isOutOfSpaceError;
- (id)localizedAlertMessage;
- (id)localizedAlertTitle;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/Frameworks/Foundation.framework/Foundation
 */

@class NSHTTPCookieStorage, NSString, NSArray, NSDictionary, NSURLCache, NSURLCredentialStorage;

@interface NSURLSessionConfiguration : NSObject <NSCopying> {
    BOOL _allowsCellularAccess;
    BOOL _discretionary;
    BOOL _HTTPShouldUsePipelining;
    BOOL _HTTPShouldSetCookies;
    NSString *_identifier;
    unsigned int _requestCachePolicy;
    unsigned int _networkServiceType;
    NSDictionary *_connectionProxyDictionary;
    int _TLSMinimumSupportedProtocol;
    int _TLSMaximumSupportedProtocol;
    unsigned int _HTTPCookieAcceptPolicy;
    NSDictionary *_HTTPAdditionalHeaders;
    int _HTTPMaximumConnectionsPerHost;
    NSHTTPCookieStorage *_HTTPCookieStorage;
    NSURLCredentialStorage *_URLCredentialStorage;
    NSURLCache *_URLCache;
    NSArray *_protocolClasses;
    double _timeoutIntervalForRequest;
    double _timeoutIntervalForResource;
}

@property(readonly) NSString * identifier;
@property unsigned int requestCachePolicy;
@property double timeoutIntervalForRequest;
@property double timeoutIntervalForResource;
@property unsigned int networkServiceType;
@property BOOL allowsCellularAccess;
@property(getter=isDiscretionary) BOOL discretionary;
@property(copy) NSDictionary * connectionProxyDictionary;
@property int TLSMinimumSupportedProtocol;
@property int TLSMaximumSupportedProtocol;
@property BOOL HTTPShouldUsePipelining;
@property BOOL HTTPShouldSetCookies;
@property unsigned int HTTPCookieAcceptPolicy;
@property(copy) NSDictionary * HTTPAdditionalHeaders;
@property int HTTPMaximumConnectionsPerHost;
@property(retain) NSHTTPCookieStorage * HTTPCookieStorage;
@property(retain) NSURLCredentialStorage * URLCredentialStorage;
@property(retain) NSURLCache * URLCache;
@property(copy) NSArray * protocolClasses;

+ (void)initialize;

- (id)URLCredentialStorage;
- (id)URLCache;
- (void)setURLCredentialStorage:(id)arg1;
- (void)setURLCache:(id)arg1;
- (void)setHTTPCookieStorage:(id)arg1;
- (void)setProtocolClasses:(id)arg1;
- (id)protocolClasses;
- (void)setHTTPMaximumConnectionsPerHost:(int)arg1;
- (int)HTTPMaximumConnectionsPerHost;
- (void)setHTTPCookieAcceptPolicy:(unsigned int)arg1;
- (unsigned int)HTTPCookieAcceptPolicy;
- (void)setHTTPShouldSetCookies:(BOOL)arg1;
- (void)setHTTPShouldUsePipelining:(BOOL)arg1;
- (BOOL)HTTPShouldUsePipelining;
- (void)setTLSMaximumSupportedProtocol:(int)arg1;
- (int)TLSMaximumSupportedProtocol;
- (void)setTLSMinimumSupportedProtocol:(int)arg1;
- (int)TLSMinimumSupportedProtocol;
- (void)setConnectionProxyDictionary:(id)arg1;
- (id)connectionProxyDictionary;
- (void)setDiscretionary:(BOOL)arg1;
- (BOOL)isDiscretionary;
- (void)setAllowsCellularAccess:(BOOL)arg1;
- (BOOL)allowsCellularAccess;
- (void)setNetworkServiceType:(unsigned int)arg1;
- (unsigned int)networkServiceType;
- (void)setTimeoutIntervalForResource:(double)arg1;
- (void)setTimeoutIntervalForRequest:(double)arg1;
- (double)timeoutIntervalForRequest;
- (void)setRequestCachePolicy:(unsigned int)arg1;
- (unsigned int)requestCachePolicy;
- (BOOL)HTTPShouldSetCookies;
- (id)HTTPCookieStorage;
- (id)identifier;
- (void)setHTTPAdditionalHeaders:(id)arg1;
- (id)HTTPAdditionalHeaders;
- (double)timeoutIntervalForResource;

@end

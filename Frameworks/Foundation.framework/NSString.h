/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/Foundation.framework/Foundation
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSString, NSData;

@interface NSString : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, CKRecordValue, CKShortDescription, PQLBindable, PQLResultSetInitializer> {
}

@property(readonly) NSString * tsu_UTIFilenameExtension;
@property(readonly) NSString * tsu_pathUTI;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) NSData * _FTDataFromBase64String;
@property(readonly) NSData * _FTDataFromHexString;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) NSString * mobileMeDomain;
@property(readonly) bool hasMobileMeSuffix;
@property(readonly) NSString * stripMobileMSuffixIfPresent;
@property(copy,readonly) NSString * stringByRemovingPercentEncoding;
@property(readonly) unsigned long long length;

+ (id)stringWithContentsOfFile:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
+ (id)stringWithFormat:(id)arg1;
+ (id)stringWithUTF8String:(const char *)arg1;
+ (id)string;
+ (id)stringWithCString:(const char *)arg1 encoding:(unsigned long long)arg2;
+ (id)stringWithString:(id)arg1;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (void)initialize;
+ (unsigned long long)stringEncodingForData:(id)arg1 encodingOptions:(id)arg2 convertedString:(id*)arg3 usedLossyConversion:(bool*)arg4;
+ (id)_web_stringRepresentationForBytes:(long long)arg1;
+ (const unsigned long long*)availableStringEncodings;
+ (id)stringWithContentsOfFile:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
+ (id)stringWithContentsOfURL:(id)arg1;
+ (id)stringWithContentsOfFile:(id)arg1;
+ (id)stringWithFormat:(id)arg1 locale:(id)arg2;
+ (id)stringWithCString:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)stringWithCString:(const char *)arg1;
+ (id)stringWithBytes:(const void*)arg1 length:(unsigned long long)arg2 encoding:(unsigned long long)arg3;
+ (id)pathWithComponents:(id)arg1;
+ (id)stringWithCharacters:(const unsigned short*)arg1 length:(unsigned long long)arg2;
+ (id)localizedNameOfStringEncoding:(unsigned long long)arg1;
+ (id)localizedStringWithFormat:(id)arg1;
+ (bool)supportsSecureCoding;
+ (unsigned long long)defaultCStringEncoding;
+ (id)cutStringGUID;
+ (id)generatedRoomNameForGroupChat;
+ (id)randomString;
+ (id)stringGUIDForObject:(id)arg1;
+ (id)stringGUID;
+ (id)copyStringGUIDForObject:(id)arg1;
+ (id)copyStringGUID;
+ (struct USet { }*)_nonFullwidthLettersAndNumbersSet;
+ (struct USet { }*)_fullwidthLettersAndNumbersSet;
+ (struct USet { }*)_bopomofoToneSet;
+ (struct USet { }*)_bopomofoSet;
+ (struct USet { }*)_nonHiraganaKatakanaOrBopomofoSet;
+ (struct USet { }*)_nonKatakanaOrKanjiSet;
+ (struct USet { }*)_nonHiraganaOrKatakanaSet;
+ (struct USet { }*)_hiraganaSet;
+ (struct USet { }*)_japaneseLetterSet;
+ (struct USet { }*)_nonJapaneseLetterSet;
+ (struct USet { }*)_nonIdeographicCharacterSet;
+ (struct USet { }*)_ideographSet;
+ (id)_stringWithUnichar:(unsigned int)arg1;
+ (struct USet { }*)_characterSetWithPattern:(id)arg1;
+ (id)stringWithUnichar:(unsigned int)arg1;
+ (void)setHyphenationFactor:(float)arg1;
+ (bool)showsControlCharacters;
+ (void)setShowsControlCharacters:(bool)arg1;
+ (bool)showsInvisibleCharacters;
+ (void)setShowsInvisibleCharacters:(bool)arg1;
+ (void)setUsesScreenFonts:(bool)arg1;
+ (bool)usesScreenFonts;
+ (void)setTypesetterBehavior:(long long)arg1;
+ (void)setUsesFontLeading:(bool)arg1;
+ (bool)usesFontLeading;
+ (float)hyphenationFactor;
+ (long long)typesetterBehavior;
+ (double)defaultBaselineOffsetForFont:(id)arg1;
+ (double)defaultLineHeightForFont:(id)arg1;
+ (id)sbs_stringFromCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)_web_stringWithData:(id)arg1 textEncodingName:(id)arg2;
+ (id)_webkit_localCacheDirectoryWithBundleIdentifier:(id)arg1;
+ (id)MCMakeUUID;
+ (double)widthFittingMaximumInteger:(long long)arg1 withFont:(id)arg2;
+ (id)apsStringGUID;
+ (id)CDVPreconditionHeaderValueWithCTag:(id)arg1;
+ (id)CDVStringWithNumberOfSpaces:(unsigned long long)arg1;
+ (id)CDVPreconditionHeaderValueWithCTag:(id)arg1 pathTag:(id)arg2;
+ (id)CDVStringWithNameSpace:(id)arg1 andName:(id)arg2;
+ (id)gs_stringWithFileSystemRepresentation:(const char *)arg1;
+ (id)mf_formattedAddressWithName:(id)arg1 email:(id)arg2 useQuotes:(bool)arg3;
+ (id)mf_partialSurnames;
+ (id)mf_nameExtensions;
+ (id)mf_stringWithData:(id)arg1 encoding:(unsigned long long)arg2;
+ (id)new64ByteGUID;
+ (id)newGUID;
+ (id)mf_stringFromMimeEnrichedString:(id)arg1 asHTML:(bool)arg2;
+ (id)mf_stringFromMimeRichTextString:(id)arg1 asHTML:(bool)arg2;
+ (id)mf_stringForMimeTypeFromFileName:(id)arg1;
+ (id)mf_stringWithAttachmentCharacter;
+ (id)mf_UUID;
+ (id)mf_stringRepresentationForBytes:(long long)arg1;
+ (id)mf_messageIDStringWithDomainHint:(id)arg1;
+ (id)_mapkit_formattedStringForCoordinate:(struct { double x1; double x2; })arg1;
+ (id)_mapkit_voiceOverLocalizedDistanceStringWithMeters:(unsigned int)arg1 inMetric:(bool)arg2 displaysYardsForShortDistances:(bool)arg3 includeTrip:(bool)arg4;
+ (id)_mapkit_localizedDistanceStringWithMeters:(unsigned int)arg1 inMetric:(bool)arg2 displaysYardsForShortDistances:(bool)arg3 includeTrip:(bool)arg4;
+ (id)_mapkit_formattedStringForFloat:(double)arg1;
+ (id)_mapkit_formattedStringForInteger:(long long)arg1;
+ (id)_mapkit_formattedStringForFloatingPointNumber:(id)arg1;
+ (id)stringWithFileSystemRepresentation:(const char *)arg1;
+ (id)stringWithContentsOfFile:(id)arg1 usingEncoding:(unsigned long long)arg2;
+ (id)ellipsisString;
+ (id)_phoneURLScheme;
+ (id)stringForScoreAndPercentileWithRank:(float)arg1 totalScores:(float)arg2 formattedScore:(id)arg3;
+ (id)stringForRankAndPercentileWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForParanthenticalPercentileRankingWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)_gkUUIDString;
+ (id)stringForPercentileRankingWithRank:(float)arg1 totalScores:(float)arg2;
+ (id)stringForPercentileWithRank:(float)arg1 totalScores:(float)arg2 asPercentile:(bool)arg3 isTop:(bool*)arg4;
+ (id)mf_commaSeparatedRecipientListWithRecipientCount:(unsigned long long)arg1 prefixForRecipientAtIndex:(id)arg2 stringForRecipientAtIndex:(id)arg3 lengthValidationBlock:(id)arg4;
+ (id)MSStringWithBool:(bool)arg1;
+ (id)MSTempFilePath;
+ (id)MSMakeUUID;
+ (id)MSMSUserDirectory;
+ (id)ellipsisString;
+ (id)stringWithContentsOfFile:(id)arg1 usingEncoding:(unsigned long long)arg2;
+ (id)stringWithFileSystemRepresentation:(const char *)arg1;
+ (id)brc_pathWithDeviceID:(int)arg1 fileID:(unsigned long long)arg2;
+ (id)brc_representableHFSFileNameWithBase:(id)arg1 suffix:(id)arg2 extension:(id)arg3 makeDotFile:(bool)arg4;
+ (id)brc_pathWithFileSystemRepresentation:(const char *)arg1;
+ (id)brc_hexadecimalStringWithBytes:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)numberSymbols;
+ (id)stringWithFormat:(id)arg1 arguments:(struct __va_list_tag { unsigned int x1; unsigned int x2; void *x3; void *x4; }[1])arg2;
+ (id)stringByHexEncodingData:(id)arg1;
+ (id)stringWithXMLString:(const char *)arg1;
+ (id)stringWithHexFromBytes:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)stringByIndentingString:(id)arg1;
+ (id)stringWithUUID;
+ (id)stringByBase64EncodingBytes:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)stringByBase64EncodingBytes:(const char *)arg1 length:(unsigned long long)arg2 breakLines:(bool)arg3;
+ (id)stringByIndentingString:(id)arg1 times:(unsigned long long)arg2;
+ (id)listSeparator;
+ (id)customNumberFormatDecimalFormatStringWithDigits:(unsigned int)arg1 digitString:(id)arg2 includeDecimalSeparator:(bool)arg3;
+ (id)customNumberFormatDecimalTokenDisplayStringWithDigits:(unsigned long long)arg1 digitString:(id)arg2;
+ (id)customNumberFormatIntegerFormatStringWithDigits:(unsigned long long)arg1 digitString:(id)arg2;
+ (id)customNumberFormatIntegerTokenDisplayStringWithDigits:(unsigned int)arg1 separator:(bool)arg2 digitString:(id)arg3;
+ (id)customNumberFormatDecimalTokenRepresentedStringWithDigits:(unsigned long long)arg1 digitString:(id)arg2;
+ (id)customNumberFormatIntegerTokenRepresentedStringWithDigits:(unsigned long long)arg1 separator:(bool)arg2 digitString:(id)arg3;
+ (id)customNumberFormatTokenStringOfType:(int)arg1 content:(id)arg2;
+ (id)stringWithXmlString:(const char *)arg1;
+ (id)stringWithCsString:(const struct CsString { int (**x1)(); unsigned short *x2; unsigned int x3; unsigned int x4; }*)arg1;
+ (id)stringWithOcText:(const struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1;
+ (id)stringWithWideCString:(int*)arg1;
+ (bool)skipString:(id)arg1;
+ (id)mapString:(id)arg1;
+ (long long)ik_valueForBooleanAttribute:(id)arg1;
+ (id)WF_stringFromArray:(id)arg1;
+ (id)WF_ignorableCharacterSet;

- (long long)localizedStandardCompare:(id)arg1;
- (long long)localizedCaseInsensitiveCompare:(id)arg1;
- (long long)localizedCompare:(id)arg1;
- (unsigned long long)maximumLengthOfBytesUsingEncoding:(unsigned long long)arg1;
- (const char *)fileSystemRepresentation;
- (long long)caseInsensitiveCompare:(id)arg1;
- (id)substringFromIndex:(unsigned long long)arg1;
- (id)substringToIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1;
- (id)substringWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)initWithContentsOfURL:(id)arg1;
- (id)pathExtension;
- (id)_web_stringByExpandingTildeInPath;
- (id)stringByDeletingLastPathComponent;
- (id)initWithData:(id)arg1 encoding:(unsigned long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)stringByReplacingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (bool)containsString:(id)arg1;
- (id)stringByAddingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (id)pathComponents;
- (id)capitalizedString;
- (id)initWithContentsOfFile:(id)arg1;
- (bool)hasPrefix:(id)arg1;
- (id)stringByReplacingCharactersInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withString:(id)arg2;
- (id)stringByPaddingToLength:(unsigned long long)arg1 withString:(id)arg2 startingAtIndex:(unsigned long long)arg3;
- (id)init;
- (bool)getBytes:(void*)arg1 maxLength:(unsigned long long)arg2 usedLength:(unsigned long long*)arg3 encoding:(unsigned long long)arg4 options:(unsigned long long)arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7;
- (unsigned long long)length;
- (void)getCharacters:(unsigned short*)arg1;
- (id)_copyFormatStringWithConfiguration:(id)arg1;
- (id)formatConfiguration;
- (id)propertyList;
- (id)initWithString:(id)arg1;
- (id)_stringRepresentation;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 locale:(id)arg4;
- (unsigned char)_encodingCantBeStoredInEightBitCFString;
- (unsigned int)_fastestEncodingInCFStringEncoding;
- (unsigned int)_smallestEncodingInCFStringEncoding;
- (void)getParagraphStart:(unsigned long long*)arg1 end:(unsigned long long*)arg2 contentsEnd:(unsigned long long*)arg3 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (bool)_getCString:(char *)arg1 maxLength:(unsigned long long)arg2 encoding:(unsigned int)arg3;
- (id)_createSubstringWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (unsigned long long)_cfTypeID;
- (float)floatValue;
- (long long)longLongValue;
- (int)intValue;
- (void)getLineStart:(unsigned long long*)arg1 end:(unsigned long long*)arg2 contentsEnd:(unsigned long long*)arg3 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (bool)hasSuffix:(id)arg1;
- (bool)isEqualToString:(id)arg1;
- (bool)getCString:(char *)arg1 maxLength:(unsigned long long)arg2 encoding:(unsigned long long)arg3;
- (const char *)_fastCStringContents:(bool)arg1;
- (const unsigned short*)_fastCharacterContents;
- (void)getCharacters:(unsigned short*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (bool)isNSString__;
- (const char *)cStringUsingEncoding:(unsigned long long)arg1;
- (unsigned long long)cStringLength;
- (const char *)UTF8String;
- (const char *)cString;
- (double)doubleValue;
- (long long)compare:(id)arg1;
- (bool)boolValue;
- (bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)stringByAppendingPathExtension:(id)arg1;
- (id)stringByDeletingPathExtension;
- (bool)isAbsolutePath;
- (long long)integerValue;
- (id)initWithFormat:(id)arg1 arguments:(struct __va_list_tag { unsigned int x1; unsigned int x2; void *x3; void *x4; }[1])arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1 options:(unsigned long long)arg2;
- (bool)_web_isCaseInsensitiveEqualToString:(id)arg1;
- (id)stringByTrimmingCharactersInSet:(id)arg1;
- (id)componentsSeparatedByString:(id)arg1;
- (id)stringByAppendingString:(id)arg1;
- (id)stringByAppendingPathComponent:(id)arg1;
- (id)lastPathComponent;
- (id)lowercaseString;
- (id)initWithUTF8String:(const char *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)stringByAppendingFormat:(id)arg1;
- (id)description;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)enumerateLinguisticTagsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 scheme:(id)arg2 options:(unsigned long long)arg3 orthography:(id)arg4 usingBlock:(id)arg5;
- (id)linguisticTagsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 scheme:(id)arg2 options:(unsigned long long)arg3 orthography:(id)arg4 tokenRanges:(id*)arg5;
- (id)__escapeString5991;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })significantText;
- (bool)_getBytesAsData:(id*)arg1 maxLength:(unsigned long long)arg2 usedLength:(unsigned long long*)arg3 encoding:(unsigned long long)arg4 options:(unsigned long long)arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7;
- (id)_getCharactersAsStringInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (bool)_web_isJavaScriptURL;
- (id)_web_stringByReplacingValidPercentEscapes_nowarn;
- (id)_web_fileNameFromContentDispositionHeader_nowarn;
- (id)_web_characterSetFromContentTypeHeader_nowarn;
- (id)_web_mimeTypeFromContentTypeHeader_nowarn;
- (id)_web_parseAsKeyValuePair_nowarn;
- (id)_web_splitAtNonDateCommas_nowarn;
- (id)_web_parseAsKeyValuePairHandleQuotes_nowarn:(bool)arg1;
- (unsigned int)_web_extractFourCharCode;
- (id)_web_stringByCollapsingNonPrintingCharacters;
- (id)_web_URLFragment;
- (bool)_web_isFileURL;
- (bool)_web_looksLikeAbsoluteURL;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLHost;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLUserPasswordHostPort;
- (id)_web_fixedCarbonPOSIXPath;
- (id)_web_domainFromHost;
- (bool)_web_domainMatches:(id)arg1;
- (bool)_web_hasCaseInsensitivePrefix:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLScheme_nowarn;
- (id)_web_stringByTrimmingWhitespace;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_web_rangeOfURLResourceSpecifier_nowarn;
- (long long)_web_countOfString:(id)arg1;
- (bool)_web_hasCountryCodeTLD;
- (bool)_web_looksLikeIPAddress;
- (id)_web_filenameByFixingIllegalCharacters;
- (id)_web_HTTPStyleLanguageCodeWithoutRegion;
- (id)_web_HTTPStyleLanguageCode;
- (id)stringByRemovingPercentEncoding;
- (id)stringByAddingPercentEncodingWithAllowedCharacters:(id)arg1;
- (id)urlPathRelativeToPath:(id)arg1;
- (id)stringByRemovingPercentEscapes;
- (id)standardizedURLPath;
- (id)stringByAddingPercentEscapes;
- (id)dataUsingEncoding:(unsigned long long)arg1;
- (void)getCString:(char *)arg1;
- (void)getCString:(char *)arg1 maxLength:(unsigned long long)arg2;
- (void)getCString:(char *)arg1 maxLength:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4;
- (id)propertyListFromStringsFileFormat;
- (id)initWithFormat:(id)arg1 locale:(id)arg2;
- (bool)getExternalRepresentation:(id*)arg1 extendedAttributes:(id*)arg2 forWritingToURLOrPath:(id)arg3 usingEncoding:(unsigned long long)arg4 error:(id*)arg5;
- (id)displayableString;
- (void)enumerateLinesUsingBlock:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })paragraphRangeForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })lineRangeForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)stringByFoldingWithOptions:(unsigned long long)arg1 locale:(id)arg2;
- (bool)localizedCaseInsensitiveContainsString:(id)arg1;
- (id)componentsSeparatedByCharactersInSet:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfCharacterFromSet:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfCharacterFromSet:(id)arg1 options:(unsigned long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfComposedCharacterSequencesForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_initWithBytesOfUnknownEncoding:(char *)arg1 length:(unsigned long long)arg2 copy:(bool)arg3 usedEncoding:(unsigned long long*)arg4;
- (id)_initWithDataOfUnknownEncoding:(id)arg1;
- (void)enumerateSubstringsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 options:(unsigned long long)arg2 usingBlock:(id)arg3;
- (void)_getBlockStart:(unsigned long long*)arg1 end:(unsigned long long*)arg2 contentsEnd:(unsigned long long*)arg3 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 stopAtLineSeparators:(bool)arg5;
- (id)capitalizedStringWithLocale:(id)arg1;
- (id)lowercaseStringWithLocale:(id)arg1;
- (id)uppercaseStringWithLocale:(id)arg1;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2 options:(unsigned long long)arg3 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (id)_stringByReplacingOccurrencesOfRegularExpressionPattern:(id)arg1 withTemplate:(id)arg2 options:(unsigned long long)arg3 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 locale:(id)arg4;
- (void)_flushRegularExpressionCaches;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfRegularExpressionPattern:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 locale:(id)arg4;
- (id)initWithContentsOfFile:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
- (id)initWithContentsOfFile:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1 usedEncoding:(unsigned long long*)arg2 error:(id*)arg3;
- (id)initWithContentsOfURL:(id)arg1 encoding:(unsigned long long)arg2 error:(id*)arg3;
- (id)initWithCString:(const char *)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfCharacterFromSet:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfComposedCharacterSequenceAtIndex:(unsigned long long)arg1;
- (id)stringByConvertingURLToPath;
- (id)stringByConvertingPathToURL;
- (unsigned long long)completePathIntoString:(id*)arg1 caseSensitive:(bool)arg2 matchesIntoArray:(id*)arg3 filterTypes:(id)arg4;
- (id)stringsByAppendingPaths:(id)arg1;
- (id)stringByResolvingSymlinksInPath;
- (id)stringByExpandingTildeInPath;
- (id)stringByAbbreviatingWithTildeInPath;
- (id)_stringByStandardizingPathUsingCache:(bool)arg1;
- (id)initWithCStringNoCopy:(char *)arg1 length:(unsigned long long)arg2 freeWhenDone:(bool)arg3;
- (id)initWithFormat:(id)arg1 locale:(id)arg2 arguments:(struct __va_list_tag { unsigned int x1; unsigned int x2; void *x3; void *x4; }[1])arg3;
- (id)initWithCharacters:(const unsigned short*)arg1 length:(unsigned long long)arg2;
- (id)initWithCString:(const char *)arg1 length:(unsigned long long)arg2;
- (struct { unsigned int x1 : 8; unsigned int x2 : 4; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 18; unsigned short x6[8]; })decimalValue;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2;
- (id)stringByStandardizingPath;
- (id)stringByReplacingOccurrencesOfString:(id)arg1 withString:(id)arg2;
- (id)initWithFormat:(id)arg1;
- (id)quotedStringRepresentation;
- (id)dataUsingEncoding:(unsigned long long)arg1 allowLossyConversion:(bool)arg2;
- (bool)_allowsDirectEncoding;
- (const char *)lossyCString;
- (bool)canBeConvertedToEncoding:(unsigned long long)arg1;
- (id)precomposedStringWithCompatibilityMapping;
- (id)decomposedStringWithCompatibilityMapping;
- (id)precomposedStringWithCanonicalMapping;
- (id)decomposedStringWithCanonicalMapping;
- (id)uppercaseString;
- (bool)getBytes:(char *)arg1 maxLength:(unsigned long long)arg2 filledLength:(unsigned long long*)arg3 encoding:(unsigned long long)arg4 allowLossyConversion:(bool)arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg7;
- (unsigned long long)smallestEncoding;
- (unsigned long long)fastestEncoding;
- (bool)getFileSystemRepresentation:(char *)arg1 maxLength:(unsigned long long)arg2;
- (long long)compare:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (id)_stringByResolvingSymlinksInPathUsingCache:(bool)arg1;
- (bool)writeToURL:(id)arg1 atomically:(bool)arg2;
- (bool)writeToURL:(id)arg1 atomically:(bool)arg2 encoding:(unsigned long long)arg3 error:(id*)arg4;
- (bool)writeToFile:(id)arg1 atomically:(bool)arg2 encoding:(unsigned long long)arg3 error:(id*)arg4;
- (id)initWithCString:(const char *)arg1 encoding:(unsigned long long)arg2;
- (Class)classForCoder;
- (bool)writeToFile:(id)arg1 atomically:(bool)arg2;
- (id)_newSubstringWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 zone:(struct _NSZone { }*)arg2;
- (id)initWithBytesNoCopy:(void*)arg1 length:(unsigned long long)arg2 encoding:(unsigned long long)arg3 freeWhenDone:(bool)arg4;
- (id)initWithCharactersNoCopy:(unsigned short*)arg1 length:(unsigned long long)arg2 freeWhenDone:(bool)arg3;
- (unsigned long long)lengthOfBytesUsingEncoding:(unsigned long long)arg1;
- (bool)_isCString;
- (id)initWithData:(id)arg1 usedEncoding:(unsigned long long*)arg2;
- (id)commonPrefixWithString:(id)arg1 options:(unsigned long long)arg2;
- (id)LS_unescapedQueryValue;
- (id)queryToDict;
- (bool)LS_hasCaseInsensitivePrefix:(id)arg1;
- (id)urlEncodedString;
- (long long)_caseInsensitiveNumericCompare:(id)arg1;
- (id)cutStringByResolvingAndStandardizingPath;
- (long long)compareVersionString:(id)arg1;
- (bool)roomNameIsProbablyAutomaticallyGenerated;
- (id)stringWithLTREmbedding;
- (id)pathStringForDisplay;
- (id)__stringByStrippingControlCharacters;
- (id)uniqueSavePath;
- (id)stringByRemovingWhitespace;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })__rangeOfNewlineInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)stringByResolvingAndStandardizingPath;
- (id)_md5Hash;
- (id)_stripPotentialTokenURIWithToken:(id*)arg1;
- (id)_IDFromFZIDType:(long long)arg1;
- (id)_bestGuessURIFromCanicalizedID;
- (id)_bestGuessURI;
- (long long)_FZIDType;
- (id)urlFromString;
- (id)stringByAddingURLEscapes;
- (long long)localizedCompareToString:(id)arg1;
- (unsigned int)hexValue;
- (id)__stringByStrippingAttachmentAndControlCharacters;
- (id)stringByRemovingCharactersFromSet:(id)arg1;
- (id)_stripFZIDPrefix;
- (id)_FZIDFromEmail;
- (id)_FZIDFromPhoneNumber;
- (id)_URIFromDSID;
- (id)_URIFromEmail;
- (id)_URIFromPhoneNumber;
- (id)_URIFromCanonicalizedDSID;
- (id)_URIFromCanonicalizedEmail;
- (id)_URIFromCanonicalizedPhoneNumber;
- (bool)_appearsToBeDSID;
- (bool)_appearsToBeEmail;
- (bool)_appearsToBePhoneNumber;
- (id)_URIFromCanonicalizedFZIDType:(long long)arg1;
- (id)_URIFromFZIDType:(long long)arg1;
- (long long)_FZBestGuessFZIDType;
- (id)stringByRemovingURLEscapes;
- (id)trimmedString;
- (bool)isEqualToIgnoringCase:(id)arg1;
- (unsigned int)unsignedIntValue;
- (bool)isDirectory;
- (id)_imInitWithFormat:(id)arg1 arguments:(struct __va_list_tag { unsigned int x1; unsigned int x2; void *x3; void *x4; }[1])arg2;
- (id)mobileMeDomain;
- (id)stripMobileMSuffixIfPresent;
- (bool)hasMobileMeSuffix;
- (id)stringByEscapingXMLSpecialCharacters;
- (id)_initWithUTF8String:(const char *)arg1 maxLength:(unsigned long long)arg2;
- (unsigned long long)editDistanceFrom:(id)arg1;
- (bool)isNaturallyRTL;
- (bool)looksLikeURL;
- (bool)looksLikeNumberInput;
- (bool)looksLikeEmailAddress;
- (bool)isTripledPunctuation;
- (bool)isDelete;
- (bool)isNewlineOrReturn;
- (bool)isSpaceOrReturn;
- (bool)isSpace;
- (bool)isPlainSpace;
- (bool)isLeftAssociative;
- (bool)endsSentence;
- (id)stringByReplacingCharactersInSet:(struct __CFCharacterSet { }*)arg1 withCharacter:(unsigned int)arg2;
- (id)stringByTrimmingLastCharacter;
- (id)stringByTrimmingCharactersInCFCharacterSet:(struct __CFCharacterSet { }*)arg1;
- (id)_stringByTransliteratingToZhuyinAsFamilyName;
- (id)_stringByTransliteratingToPinyinAsFamilyName;
- (id)_stringByTransliteratingToPinyin;
- (id)_stringByConvertingFromFullWidthToHalfWidth;
- (id)_stringByConvertingFromHalfWidthToFullWidth;
- (bool)_shouldBePaddedWithSpaces;
- (bool)_containsFullwidthLettersAndNumbers;
- (bool)_containsFullwidthLettersAndNumbersOnly;
- (bool)_containsCJKSymbolsAndPunctuation;
- (bool)_containsEmoji;
- (bool)_containsHiraganaKatakanaOrBopomofo;
- (bool)_containsKatakanaOrKanji;
- (bool)_containsHiraganaOrKatakana;
- (bool)_containsIdeographicCharacters;
- (bool)_isModifierSymbol;
- (unsigned long long)_UTF8SizeOfRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfString:(id)arg1 fromLocation:(unsigned long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfBackwardDeletionClusterAtIndex:(unsigned long long)arg1;
- (unsigned long long)_editDistanceFrom:(id)arg1;
- (bool)_containsSubstring:(id)arg1;
- (bool)_isNaturallyRTL;
- (bool)_looksLikeURL;
- (bool)_looksLikeNumberInput;
- (bool)_looksLikeEmailAddress;
- (bool)_isDelete;
- (bool)_isNewlineOrReturn;
- (bool)_isSpaceOrReturn;
- (bool)_isSpace;
- (bool)_isPlainSpace;
- (bool)_isLeftAssociative;
- (bool)_endsSentence;
- (id)_stringByReplacingCharacter:(unsigned int)arg1 withCharacter:(unsigned int)arg2;
- (id)_stringByReplacingCharactersInSet:(struct __CFCharacterSet { }*)arg1 withCharacter:(unsigned int)arg2;
- (id)_stringByTrimmingLastCharacter;
- (id)_stringByTrimmingCharactersInCFCharacterSet:(struct __CFCharacterSet { }*)arg1;
- (id)_stringByTransliteratingToZhuyin:(bool)arg1;
- (id)_stringByTransliteratingToPinyin:(bool)arg1;
- (id)_stringByApplyingTransform:(id)arg1;
- (bool)_isOnlyIdeographs;
- (id)_stringByTranscribingUsingTokenizer:(struct __CFStringTokenizer { }*)arg1;
- (bool)_containsCJKScriptsOnly;
- (bool)_contentsExclusivelyInCharacterSet:(struct USet { }*)arg1;
- (unsigned int)_firstLongCharacter;
- (bool)_isTripledPunctuation;
- (bool)_containsJapanese;
- (id)_stringByTransliteratingToZhuyin;
- (id)_stringByTranscribingFromLanguage:(id)arg1;
- (bool)_containsHiraganaOnly;
- (bool)_containsCJScriptsOnly;
- (id)stringByReplacingCharacter:(unsigned int)arg1 withCharacter:(unsigned int)arg2;
- (bool)_containsJapaneseOnly;
- (id)_firstGrapheme;
- (bool)containsSubstring:(id)arg1;
- (unsigned short)_firstChar;
- (bool)_containsCJScripts;
- (unsigned long long)_graphemeCount;
- (bool)_isIdeographicGlyphs;
- (bool)_containsBopomofoToneOnly;
- (bool)_containsBopomofoOnly;
- (id)_lastGrapheme;
- (id)CAMLType;
- (void)encodeWithCAMLWriter:(id)arg1;
- (void)drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 withAttributes:(id)arg2;
- (void)drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withAttributes:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeWithAttributes:(id)arg1;
- (struct CGSize { double x1; double x2; })_sizeWithSize:(struct CGSize { double x1; double x2; })arg1 attributes:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectWithSize:(struct CGSize { double x1; double x2; })arg1 options:(long long)arg2 attributes:(id)arg3;
- (void)drawWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(long long)arg2 attributes:(id)arg3;
- (void)drawWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(long long)arg2 attributes:(id)arg3 context:(id)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectWithSize:(struct CGSize { double x1; double x2; })arg1 options:(long long)arg2 attributes:(id)arg3 context:(id)arg4;
- (id)stringByStrippingLeadingAndTrailingWhitespace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sbs_cgRectValue;
- (id)abVCardKoshify;
- (id)abStringByStrippingControlCharacters;
- (id)copyABVCardDataRepresentation;
- (id)abEscapeStringForUnichar:(unsigned short)arg1 and:(unsigned short)arg2 advance:(long long*)arg3;
- (id)abStringByRemovingCharactersFromSet:(id)arg1;
- (id)_webkit_stringByCollapsingWhitespaceCharacters;
- (id)_webkit_stringByCollapsingNonPrintingCharacters;
- (id)_webkit_stringByTrimmingWhitespace;
- (id)_webkit_filenameByFixingIllegalCharacters;
- (bool)_webkit_hasCaseInsensitiveSubstring:(id)arg1;
- (bool)_webkit_hasCaseInsensitiveSuffix:(id)arg1;
- (bool)_webkit_hasCaseInsensitivePrefix:(id)arg1;
- (id)_web_stringByStrippingReturnCharacters;
- (id)_web_stringByAbbreviatingWithTildeInPath;
- (bool)_webkit_isCaseInsensitiveEqualToString:(id)arg1;
- (id)_web_capitalizeRFC822HeaderFieldName;
- (id)_webkit_queryKeysAndValues;
- (id)_webkit_URLFragment;
- (id)_web_encodeHostName;
- (id)_web_encodeHostNameWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_web_decodeHostNameWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_web_hostNameNeedsEncodingWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_web_hostNameNeedsDecodingWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)_web_isUserVisibleURL;
- (id)_webkit_unescapedQueryValue;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_webkit_rangeOfURLScheme;
- (id)_webkit_stringByReplacingValidPercentEscapes;
- (bool)_webkit_isFTPDirectoryURL;
- (bool)_webkit_isFileURL;
- (id)_webkit_scriptIfJavaScriptURL;
- (bool)_webkit_isJavaScriptURL;
- (bool)_webkit_looksLikeAbsoluteURL;
- (id)_web_decodeHostName;
- (id)_web_bestURLForUserTypedString;
- (id)_web_possibleURLPrefixesForUserTypedString;
- (id)_web_possibleURLsForUserTypedString;
- (id)_web_possibleURLsForForUserTypedString:(bool)arg1;
- (id)stringWithIDSFormat;
- (bool)destinationIdIsPhoneNumber;
- (bool)destinationIdIsEmailAddress;
- (id)_initWithUTF8String:(const char *)arg1 maxLength:(unsigned long long)arg2;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 minFontSize:(double)arg2 actualFontSize:(double*)arg3 forWidth:(double)arg4 lineBreakMode:(long long)arg5;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7 includeEmoji:(bool)arg8;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6 includeEmoji:(bool)arg7;
- (struct CGSize { double x1; double x2; })_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6 truncationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg7;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6;
- (struct CGSize { double x1; double x2; })drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3 lineSpacing:(int)arg4;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5 includeEmoji:(bool)arg6;
- (struct CGSize { double x1; double x2; })drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5;
- (struct CGSize { double x1; double x2; })sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3 letterSpacing:(double)arg4;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7 includeEmoji:(bool)arg8;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6 includeEmoji:(bool)arg7;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6 truncationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg7;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5 includeEmoji:(bool)arg6;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4 lineSpacing:(int)arg5;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3 lineSpacing:(int)arg4;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5 includeEmoji:(bool)arg6;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4 letterSpacing:(double)arg5;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3 letterSpacing:(double)arg4;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 minFontSize:(double)arg4 actualFontSize:(double*)arg5 lineBreakMode:(long long)arg6 baselineAdjustment:(long long)arg7;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 fontSize:(double)arg4 lineBreakMode:(long long)arg5 baselineAdjustment:(long long)arg6;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 minFontSize:(double)arg2 actualFontSize:(double*)arg3 forWidth:(double)arg4 lineBreakMode:(long long)arg5;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3 alignment:(long long)arg4;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })_legacy_drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2 lineBreakMode:(long long)arg3;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 constrainedToSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 forWidth:(double)arg2 withFont:(id)arg3 lineBreakMode:(long long)arg4;
- (struct CGSize { double x1; double x2; })_legacy_drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 withFont:(id)arg2;
- (struct CGSize { double x1; double x2; })_legacy_sizeWithFont:(id)arg1 forWidth:(double)arg2 lineBreakMode:(long long)arg3;
- (id)stringByStandardizingWhitespace;
- (id)_adjustedFontFromFont:(id)arg1 withinFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 minimumSize:(double)arg3 textSize:(struct CGSize { double x1; double x2; }*)arg4;
- (struct CGSize { double x1; double x2; })_optimizedSizeWithFont:(id)arg1;
- (id)_uikit_unescapedQueryValue;
- (id)queryKeysAndValues;
- (id)_uikit_stringWithWritingDirection:(long long)arg1 asOverride:(bool)arg2;
- (id)_uikit_stringByTrimmingWhitespaceAndNewlines;
- (void)tryToColorizeWithTokens:(char **)arg1 nbTokens:(unsigned long long)arg2 ptr:(char *)arg3 text:(const char *)arg4 firstCharSet:(id)arg5 secondCharSet:(id)arg6 color:(id)arg7 font:(id)arg8 attributedString:(id)arg9;
- (id)colorizeWithKeywords:(id)arg1 classes:(id)arg2;
- (bool)hasSuffixInsensitive:(id)arg1;
- (id)MCSHA256DigestWithPasscodeSalt;
- (id)MCOldStyleSafeFilenameHash;
- (id)MCHashedFilenameWithExtension:(id)arg1;
- (unsigned int)MCHash;
- (id)MCOldStyleSafeFilenameHashWithExtension:(id)arg1;
- (id)MCSHA256DigestWithSalt:(id)arg1;
- (id)MCHashedFilenameWithPrefix:(id)arg1 extension:(id)arg2;
- (id)MCAppendDeviceName;
- (id)MCAppendGreenteaSuffix;
- (id)copyUTF8StringOfLength:(unsigned long long)arg1;
- (id)MLSortString;
- (id)copyWithoutInsignificantCharacters;
- (id)copyWithoutInsignificantPrefixAndCharacters;
- (id)_copyWithoutInsignificantPrefix:(bool)arg1 andCharacters:(bool)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeWithoutInsignificantPrefix:(bool)arg1 andCharacters:(bool)arg2;
- (id)sanitizedString;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt { }*)arg1 atPosition:(int)arg2;
- (id)ml_stringValueForSQL;
- (id)MPMediaLibraryDataProviderSystemML3CoercedString;
- (id)commonNonWordBreakingPrefixWithString:(id)arg1 options:(unsigned long long)arg2;
- (id)displayableStringByStrippingOffCommonPrefixWithString:(id)arg1;
- (id)displayableStringByTrimmingPrefixString:(id)arg1;
- (id)MP_attributedStringWithEmphasizedTextSeparator:(id)arg1 regularTextAttributes:(id)arg2 emphasizedTextAttributes:(id)arg3;
- (id)CKSafeHashStringForPathComponent;
- (id)CKSafeStringForPathComponent;
- (id)ckShortDescription;
- (id)CDVStringByXMLQuoting;
- (id)CDVStringByAddingPercentEscapesForUserOrPassword;
- (id)CDVStringByRemovingTerminatingSlashIfNeeded;
- (id)CDVStringByAddingPercentEscapesForHREF;
- (id)CDVStringByRemovingPercentEscapesForHREF;
- (id)CDVStringByAppendingSlashIfNeeded;
- (bool)CDVIsHTTPStatusLineWithStatusCode:(long long)arg1;
- (id)initWithCDVNameSpace:(id)arg1 andName:(id)arg2;
- (id)CDVStringByXMLUnquoting;
- (id)_ICSStringForParameterQuotedValue;
- (id)_ICSStringForParameterValue;
- (id)_ICSStringForProperyValue;
- (void)_ICSStringWithOptions:(unsigned long long)arg1 appendingToString:(id)arg2;
- (id)gs_issueReadExtensionIfNeededForPid:(int)arg1;
- (id)gs_issueExtension:(const char *)arg1 error:(id*)arg2;
- (bool)validateGSNameAllowingDot:(bool)arg1 error:(id*)arg2;
- (id)gs_stringByUpdatingPathExtensionWithPathOrURL:(id)arg1;
- (bool)validateGSName:(out id*)arg1;
- (void)chmod:(unsigned short)arg1;
- (bool)mf_hasSameNamesAs:(id)arg1;
- (void)mf_addressCommentFirstName:(id*)arg1 middleName:(id*)arg2 lastName:(id*)arg3 extension:(id*)arg4;
- (id)mf_copyIDNADecodedEmailAddress;
- (bool)mf_isEqualToAddress:(id)arg1;
- (bool)mf_isLegalCommentedEmailAddress;
- (id)mf_copyAddressComment;
- (bool)mf_appearsToBeAnInitial;
- (id)mf_trimCommasSpacesQuotes;
- (void)mf_firstName:(id*)arg1 middleName:(id*)arg2 lastName:(id*)arg3 extension:(id*)arg4;
- (id)mf_addressComment;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })mf_rangeOfAddressDomain;
- (id)mf_copyIDNAEncodedEmailAddress;
- (bool)mf_isLegalEmailAddress;
- (id)mf_uncommentedAddressRespectingGroups;
- (id)mf_uncommentedAddress;
- (id)mf_copyUncommentedAddress;
- (id)mf_addressDomain;
- (id)mf_bestMimeCharset;
- (id)_mf_bestMimeCharset:(id)arg1;
- (id)mf_bestMimeCharsetUsingHint:(unsigned int)arg1;
- (id)mf_bestMimeCharsetForMessageDeliveryUsingSubtype:(id)arg1;
- (id)mf_decodeMimeHeaderValueWithCharsetHint:(id)arg1;
- (id)mf_encodedHeaderDataWithEncodingHint:(unsigned int)arg1;
- (id)mf_decodeMimeHeaderValueWithEncodingHint:(unsigned int)arg1;
- (id)mf_copyStringByDecodingIDNA;
- (id)mf_messageIDSubstring;
- (id)mf_MD5Digest;
- (long long)mf_caseInsensitiveCompareExcludingXDash:(id)arg1;
- (id)mf_dataUsingEncoding:(unsigned long long)arg1 allowLossyConversion:(bool)arg2;
- (const void*)mf_lossyDefaultCStringBytes;
- (id)mf_copyStringByEncodingIDNAInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)mf_copyStringByDecodingIDNAInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)mf_dataUsingEncoding:(unsigned long long)arg1;
- (id)mf_copyStringByEncodingIDNA;
- (bool)red:(double*)arg1 green:(double*)arg2 blue:(double*)arg3 alpha:(double*)arg4;
- (double)colorInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_vk_internedString;
- (struct VKRasterTileKey { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; })rasterTileKeyValue;
- (bool)_webBookmarks_hasCaseInsensitivePrefix:(id)arg1;
- (id)stringByURLQuoting;
- (id)trimWhiteSpace;
- (id)stringByURLEscapingPathComponent;
- (id)stringByRemovingPercentEscapesForUsername;
- (id)stringByAddingPercentEscapesForUsername;
- (id)appendSlashIfNeeded;
- (id)removeSlashIfNeeded;
- (bool)hasPrefixCaseInsensitive:(id)arg1;
- (id)absoluteURLForChildLeastInfoRepresentationRelativeToParentURL:(id)arg1;
- (unsigned long long)mf_nextWordFromIndex:(unsigned long long)arg1 forward:(bool)arg2;
- (unsigned long long)mf_lineBreakBeforeIndex:(unsigned long long)arg1 withinRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)mf_convertFromFlowedText:(unsigned int)arg1;
- (bool)mf_containsSubstring:(id)arg1 options:(unsigned long long)arg2;
- (bool)mf_caseInsensitiveIsEqualToString:(id)arg1;
- (id)mf_stringByReplacingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (id)mf_stringByEscapingHTMLCodes;
- (id)mf_stringByEscapingForXML;
- (id)mf_uniqueFilenameWithRespectToFilenames:(id)arg1;
- (id)mf_fileSystemString;
- (unsigned int)mf_subjectPrefixLength;
- (id)mf_stringByLocalizingReOrFwdPrefix;
- (id)mf_stringWithNoExtraSpaces;
- (id)mf_stringByAddingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (bool)mf_makeDirectoryWithMode:(int)arg1;
- (bool)mf_isSubdirectoryOfPath:(id)arg1;
- (id)mf_stringByAbbreviatingSharedResourcesDirectoryWithTildeInPath;
- (id)mf_stringByReallyAbbreviatingSharedResourcesDirectoryWithTildeInPath;
- (id)mf_betterStringByResolvingSymlinksInPath;
- (id)mf_stringByExpandingTildeWithSharedResourcesDirectoryInPath;
- (long long)abCompare:(id)arg1;
- (bool)AB_shouldTransliterateToLatin;
- (id)AB_stringByTransliteratingToKana;
- (unsigned int)AB_firstUTF32Character;
- (bool)AB_containsEmojiCharacters;
- (bool)AB_containsNonLatinCharacters;
- (id)AB_stringByTransliteratingToPhoneticCharactersAsFamilyName:(bool)arg1;
- (bool)_mapkit_isCJK;
- (double)_mapkit_cgFloatValue;
- (id)_mapkit_sanitizedStringForDisplayInHTML;
- (id)_mapkit_stringByReplacingNewLinesWithString:(id)arg1;
- (id)_mapkit_stringByEscapingHTML;
- (id)trimWhiteSpace;
- (id)stringByURLQuoting;
- (id)appendSlashIfNeeded;
- (id)stringByRemovingCharactersInSet:(id)arg1;
- (id)stringByTrimmingWhitespaceAndRemovingNewlines;
- (id)CalSafeHFSPathComponentName;
- (id)removeSlashIfNeeded;
- (id)safeFilename;
- (id)searchAndReplaceString:(id)arg1 withString:(id)arg2;
- (id)unquote;
- (id)quote;
- (id)trimCommas;
- (id)trimChar:(unsigned short)arg1;
- (bool)isPathToICalTruthFile;
- (bool)isPathToICalBookmark;
- (bool)isPathToBackupFile;
- (bool)isPathToICalData;
- (bool)isPathToVCalData;
- (bool)isPathToAppleScript;
- (id)stringByDecodingSlashes;
- (id)stringByEncodingSlashes;
- (bool)isEqualAsURL:(id)arg1;
- (id)CalAddressComment;
- (id)CalUncommentedAddress;
- (id)phoneURL;
- (id)radarLink;
- (bool)isAddressBookURL;
- (bool)isMailURL;
- (id)stringRemovingMailto;
- (id)stringAddingMailto;
- (id)hostFromEmail;
- (id)userFromEmail;
- (bool)isEqualToStringCaseInsensitive:(id)arg1;
- (bool)containsCaseAndDiacriticInsensitive:(id)arg1;
- (bool)containsCaseInsensitive:(id)arg1;
- (bool)hasSuffixCaseInsensitive:(id)arg1;
- (id)stringByRemovingLastPathComponent;
- (id)stringByURLUnescapingAllReservedCharacters;
- (id)stringByURLEscapingAllReservedCharacters;
- (id)stringByURLQuotingPaths;
- (id)stringByReplacingCharactersInSet:(id)arg1 withString:(id)arg2;
- (id)trimFinalComma;
- (id)trimFirstComma;
- (id)trimFinalChar:(unsigned short)arg1;
- (id)trimFirstChar:(unsigned short)arg1;
- (id)stringByURLUnquoting;
- (id)_phoneNumberDetector;
- (bool)hasMailto;
- (bool)resemblesEmailAddress;
- (bool)hasPrefixCaseInsensitive:(id)arg1;
- (bool)isPhoneNumber;
- (id)stringByExpandingTildeToNonSandboxHome;
- (id)cr_lowercaseStringWithStandardLocale;
- (id)cr_uniqueFilenameWithRespectToFilenames:(id)arg1;
- (id)cr_copyIDNAEncodedEmailAddress;
- (id)cr_copyIDNADecodedEmailAddress;
- (id)cr_copyStringByEncodingIDNAInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)cr_copyStringByDecodingIDNAInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })cr_rangeOfAddressDomain;
- (id)_FTDataFromBase64String;
- (id)_FTDataFromHexString;
- (id)idsFormat;
- (id)cacheKeyRepresentation;
- (id)_gkMD5HashData;
- (id)_gkSHA1HashData;
- (id)_gkMD5HashString;
- (id)_gkSHA1HashString;
- (id)_gkStringByEscapingHTMLEntities;
- (id)stringByAddingPercentEscapesIncludingReservedCharacters;
- (id)_gkLocaleSensitiveUppercaseString;
- (id)_gkStringByQuotingWithFormat:(id)arg1;
- (id)_gkTruncationSymbolWithFormat:(id)arg1;
- (id)_gkStringByAddingBidiEmbeddingMarkers;
- (bool)_gkIsMixedDirection;
- (bool)_gkIsNaturallyRTL;
- (void)processUTF16CharactersForBidi:(id)arg1;
- (id)_gkStringByUnescapingFromURLQuery;
- (id)mf_decodedIMAPMailboxName;
- (id)mf_encodedIMAPMailboxName;
- (id)mf_horizontalSeparatorRegularExpression;
- (id)mf_signatureRegularExpression;
- (id)mf_forwardSeparatorRegularExpression;
- (id)mf_attributionPrefixRegularExpression;
- (id)mf_attributionRegularExpression;
- (id)mf_copyAttributionRegularExpressionForType:(int)arg1;
- (bool)mf_isHorizontalSeparator;
- (bool)mf_isSignature;
- (bool)mf_isAttributionPrefix;
- (bool)mf_isWhitespace;
- (bool)mf_isForwardSeparator;
- (bool)mf_isAttribution;
- (id)mf_copyDisplayableAddressComment;
- (id)mf_substringTruncatedToIndex:(unsigned long long)arg1;
- (id)mf_substringTruncatedInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_gkAttributedStringByApplyingStylesForTags:(id)arg1 untaggedStyle:(id)arg2;
- (id)_gkAttributedStringByApplyingStyle:(id)arg1;
- (bool)isNewline;
- (bool)isSingleCharacterAndMemberOfSet:(id)arg1;
- (unsigned long long)MSUniqueID;
- (id)MSHexData;
- (id)initWithCPLArchiver:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
- (bool)isWeiboDuplicatePostError;
- (unsigned long long)SLWeiboCharacterCountWithShortenedURLLength:(unsigned long long)arg1;
- (bool)isTwitterDuplicatePostError;
- (unsigned long long)SLTwitterCharacterCountWithShortenedURLLength:(unsigned long long)arg1;
- (bool)isTencentWeiboDuplicatePostError;
- (unsigned long long)SLTencentWeiboCharacterCountWithShortenedURLLength:(unsigned long long)arg1;
- (bool)hasCaseInsensitiveSuffix:(id)arg1;
- (id)urlEncodedString;
- (id)stringByDecodingSlashes;
- (id)stringByEncodingSlashes;
- (id)trimWhiteSpace;
- (id)appendSlashIfNeeded;
- (id)removeSlashIfNeeded;
- (id)safeFilename;
- (id)searchAndReplaceString:(id)arg1 withString:(id)arg2;
- (id)unquote;
- (id)quote;
- (id)trimCommas;
- (id)trimChar:(unsigned short)arg1;
- (id)trimFinalComma;
- (id)trimFirstComma;
- (id)trimFinalChar:(unsigned short)arg1;
- (id)trimFirstChar:(unsigned short)arg1;
- (id)stringByXMLUnquoting;
- (id)stringByURLQuoting;
- (id)stringByURLQuotingPaths;
- (id)stringByURLUnquoting;
- (id)brc_stringByDeletingPathBounceNo:(unsigned long long*)arg1;
- (bool)brc_isSideFaultName;
- (bool)brc_isEqualToStringForHFS:(id)arg1 isCaseSensitive:(bool)arg2;
- (long long)brc_compareToStringForHFS:(id)arg1 isCaseSensitive:(bool)arg2;
- (id)brc_representableDirectoryExtension;
- (id)brc_sideFaultName;
- (id)brc_representableHFSFileNameWithNumber:(id)arg1 addedExtension:(id)arg2 makeDotFile:(bool)arg3;
- (bool)brc_nameIsRepresentableOnHFS;
- (id)brc_realpath;
- (id)brc_realpathKeepingLastSymlink;
- (const char *)brc_fileSystemRepresentation;
- (bool)brc_isAbsolutePath;
- (id)brc_pathRelativeToPath:(id)arg1;
- (id)brc_pathRelativeToPackageRoot;
- (id)brc_pathOfPackageRoot;
- (bool)brc_isPackageRoot;
- (bool)brc_isInPackage;
- (bool)brc_isExcludedWithMaximumDepth:(unsigned int)arg1;
- (id)brc_stringByDeletingPathBounceNo:(unsigned long long*)arg1 andPathExtension:(id*)arg2;
- (id)brc_representableHFSFileNameWithSuffix:(id)arg1 addedExtension:(id)arg2 makeDotFile:(bool)arg3;
- (id)brc_stringByDeletingPathExtension;
- (id)brc_pathExtension;
- (id)brc_stringByBackslashEscapingCharactersInString:(id)arg1;
- (id)brc_SHA1WithSalt:(id)arg1;
- (id)brc_SHA256;
- (void)sqliteBind:(struct sqlite3_stmt { }*)arg1 index:(int)arg2;
- (id)initFromPQLResultSet:(id)arg1 error:(id*)arg2;
- (id)CKDPIdentifier_Raw;
- (id)_CKDPIdentifierWithType:(int)arg1;
- (id)CKDPIdentifier_ShareId;
- (id)CKDPIdentifier_Zone;
- (id)CKDPIdentifier_User;
- (id)CKDPIdentifier_CommentId;
- (id)CKDPIdentifier_Record;
- (id)CKDPIdentifier_Subscription;
- (id)CKDPIdentifier_Device;
- (long long)traditionalChineseZhuyinCompare:(id)arg1;
- (long long)traditionalChinesePinyinCompare:(id)arg1;
- (long long)simplifiedChineseCompare:(id)arg1;
- (id)stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber:(unsigned long long)arg1;
- (id)strokeStringFromNumberString;
- (id)toneFromPinyinSyllableWithNumber;
- (id)stringByStrippingDiacritics;
- (id)zhuyinSyllableFromPinyinSyllable;
- (id)pinyinStringFromPinyinWithToneNumber;
- (id)componentsByLanguage:(int)arg1;
- (id)firstCharacter;
- (id)stringValue;
- (id)copyCsvRows:(unsigned long long*)arg1;
- (id)_copyCsvRows:(unsigned long long*)arg1 usingDelimiter:(id)arg2 columnCountIsConstant:(bool*)arg3;
- (double)oi_sizeWithFontName:(id)arg1 size:(int)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })oi_rangeOfCharactersFromSet:(id)arg1 index:(int)arg2;
- (double)oi_sizeWithFontName:(id)arg1 size:(int)arg2 bold:(bool)arg3 italic:(bool)arg4;
- (id)stringByReplacing4DigitYearStringWith2DigitYearString;
- (id)stringByReplacing2DigitYearStringWith4DigitYearString;
- (id)prefixOfNumberFormatSubpattern;
- (id)suffixOfNumberFormatSubpattern;
- (id)numberPortionOfNumberFormatSubpattern;
- (id)negativeSubpatternOfNumberFormatPattern;
- (id)positiveSubpatternOfNumberFormatPattern;
- (bool)isNumberFormatPattern;
- (id)newStringBySubstitutingCharactersCFNumberFormatterDoesntUnderstand;
- (unsigned long long)indexOfLastNonSuffixCharacterInNumberFormatSubpattern;
- (unsigned long long)indexOfFirstNonPrefixCharacterInNumberFormatSubpattern;
- (unsigned long long)indexOfNumberFormatSubpatternSeparator;
- (id)newRangesOfEscapedCharactersInNumberFormatPattern;
- (id)stringByRemovingEscapedCharactersFromNumberFormatPattern;
- (id)escapeXML;
- (id)substringWithComposedCharacterSequencesToIndex:(unsigned long long)arg1;
- (id)tolerantStringByAppendingPathExtension:(id)arg1;
- (void)enumerateRangesOfCharactersInSet:(id)arg1 usingBlock:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfString:(id)arg1 options:(unsigned long long)arg2 updatingSearchRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (bool)containsOnlyCharactersFromSet:(id)arg1;
- (id)unescapeXML;
- (id)stringByMakingFirstCharacterUppercase;
- (id)stringByMakingFirstCharacterLowercase;
- (id)encodeStringBase64;
- (id)stringByTrimmingCharactersInSetFromFront:(id)arg1;
- (id)stringWithPathRelativeTo:(id)arg1 allowBacktracking:(bool)arg2;
- (id)substringWithComposedCharacterSequencesToFileSystemLength:(unsigned long long)arg1;
- (id)stringWithRealpath;
- (bool)isChildOfPath:(id)arg1;
- (bool)isDescendantOfPath:(id)arg1;
- (id)escapeForIcuRegex;
- (unsigned long long)countInstancesOfString:(id)arg1 options:(unsigned long long)arg2;
- (id)stringByReplacingInstancesOfCharactersInSet:(id)arg1 withString:(id)arg2;
- (id)md5Hash;
- (id)stringByFixingBrokenSurrogatePairs;
- (id)stringByUniquingPathInsideDirectory:(id)arg1;
- (id)stringByAppendingSeparator:(id)arg1 format:(id)arg2;
- (id)stringByExpandingTableFormatting;
- (id)stringWithPathRelativeTo:(id)arg1;
- (id)stringByRemovingCharactersInSet:(id)arg1 options:(unsigned int)arg2;
- (id)stringByUniquingPathInsideDirectory:(id)arg1 withFormat:(id)arg2;
- (id)stringQuotedIfContainsCharacterSet:(id)arg1;
- (id)stringByAddingCSVEscapes;
- (id)stringByRemovingCharactersInSet:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })range;
- (bool)containsSubstring:(id)arg1;
- (bool)isLegalEmailAddress;
- (id)uncommentedAddressRespectingGroups;
- (id)uncommentedAddress;
- (id)sha256HexHashString;
- (long long)compareToVersionString:(id)arg1;
- (unsigned long long)numberOfKeysInKeyPath;
- (id)lastKey;
- (id)keyPathByAppendingKey:(id)arg1;
- (id)keyPathByPrependingKey:(id)arg1;
- (id)keyPathByRemovingFirstKey;
- (id)keyPathByRemovingLastKey;
- (id)firstKey;
- (unsigned short)spaceCharacterInCustomNumberFormatSpaceToken;
- (unsigned short)scaleCharacterInCustomNumberFormatScaleToken;
- (id)formatStringFromCustomNumberFormatScaleToken;
- (int)fractionAccuracyFromCustomNumberFormatFractionToken;
- (id)currencyCodeFromCustomNumberFormatCurrencyToken;
- (id)digitPlaceholderStringInDigitToken;
- (unsigned long long)numberOfDigitsInCustomNumberFormatDecimalToken;
- (id)stringByInsertingFormatGroupingSeparators;
- (bool)customFormatIntegerTokenUsesSeparator;
- (unsigned int)numberOfDigitsInCustomNumberFormatIntegerToken;
- (bool)isSpecialCustomNumberFormatToken;
- (bool)isSpecialCustomNumberFormatTokenOfType:(int)arg1;
- (id)stringByPercentEscaping;
- (bool)containsPercentEscapes;
- (void)appendJsonStringToString:(id)arg1;
- (bool)tsu_pathConformsToUTI:(id)arg1;
- (id)tsu_UTIFilenameExtension;
- (bool)tsu_conformsToAnyUTI:(id)arg1;
- (bool)tsu_conformsToUTI:(id)arg1;
- (bool)tsu_pathExtensionConformsToUTI:(id)arg1;
- (id)tsu_pathUTI;
- (bool)doesURLHostContainWhitespace;
- (bool)startsWithString:(id)arg1;
- (id)stringByFixingCharactersWithLatinFontFamilyName:(id)arg1 symbolFontFamilyName:(id)arg2;
- (id)initWithXmlString:(const char *)arg1;
- (const char *)xmlString;
- (id)initWithContentOfXmlNode:(struct _xmlNode { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1;
- (id)initWithValueOfXmlAttribute:(struct _xmlAttr { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlAttr {} *x7; struct _xmlAttr {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; int x11; void *x12; }*)arg1;
- (bool)isEqualToXmlString:(const char *)arg1;
- (id)componentsSeparatedByWhitespace;
- (id)initFromXmlNode:(struct _xmlNode { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1 nsWithFallbackNs:(id)arg2 attributeName:(const char *)arg3;
- (id)initFromXmlNode:(struct _xmlNode { void *x1; int x2; char *x3; struct _xmlNode {} *x4; struct _xmlNode {} *x5; struct _xmlNode {} *x6; struct _xmlNode {} *x7; struct _xmlNode {} *x8; struct _xmlDoc {} *x9; struct _xmlNs {} *x10; char *x11; struct _xmlAttr {} *x12; struct _xmlNs {} *x13; void *x14; unsigned short x15; unsigned short x16; }*)arg1 ns:(const char *)arg2 attributeName:(const char *)arg3;
- (void)copyToOcText:(struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1;
- (void)copyToCsString:(struct CsString { int (**x1)(); unsigned short *x2; unsigned int x3; unsigned int x4; }*)arg1;
- (id)dataUsingWordEncoding:(int)arg1;
- (id)initWithOcText:(const struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1;
- (void)copyToOcText:(struct OcText { int (**x1)(); int x2; unsigned int x3; unsigned int x4; unsigned int x5; char *x6; char *x7; boolx8; }*)arg1 encoding:(int)arg2;
- (id)initWithCsString:(const struct CsString { int (**x1)(); unsigned short *x2; unsigned int x3; unsigned int x4; }*)arg1;
- (int*)cWideString;
- (id)initWithWideCString:(int*)arg1;
- (id)initialsFromAuthorName;
- (int)languageTypeAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)getDataUsingOfficeCryptographicEncoding;
- (int)fontTypeAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 forXML:(bool)arg3;
- (int)fontTypeForCharacter:(unsigned short)arg1 isControl:(bool*)arg2;
- (id)prs_stringEncodedAsURLQueryParameter;
- (bool)ik_attributeBoolValue;
- (id)WF_stringWithMostSignificatDomainPart;
- (id)WF_stringByProperlyFixingPercentEscapesUsingEncoding:(unsigned long long)arg1;
- (long long)WF_numericCompare:(id)arg1;
- (id)WF_fuzzyStringWithWordLength:(int)arg1;
- (id)WF_stringByConvertingSpacesInHTMLSpaces;
- (id)WF_stringByEscapingPrintfArguments;
- (id)WF_stringByRemovingWord:(id)arg1;
- (bool)WF_containsWord:(id)arg1;
- (bool)WF_containsString:(id)arg1;
- (bool)_isIPv4DomainAddress;
- (id)WF_stringByReplacingString:(id)arg1 withString:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })WF_rangeOfWord:(id)arg1;
- (bool)WF_containsString:(id)arg1 options:(unsigned long long)arg2;

@end

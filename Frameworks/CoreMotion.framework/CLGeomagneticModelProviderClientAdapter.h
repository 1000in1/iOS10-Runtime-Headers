/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

@interface CLGeomagneticModelProviderClientAdapter : CLNotifierServiceAdapter <CLGeomagneticModelProviderClientProtocol>

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic) bool valid;

+ (void)becameFatallyBlocked:(id)arg1;
+ (id)getSilo;
+ (bool)isSupported;
+ (void)performSyncOnSilo:(id)arg1 invoker:(id /* block */)arg2;

- (struct CLGeomagneticModelProviderClient { int (**x1)(); struct BasicMutex { int (**x_2_1_1)(); struct MutexInfo {} *x_2_1_2; } x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; id x4; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > > { struct __tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_6_1_1; } x6; int x7; bool x8; struct CLConnectionClient {} *x9; id x10; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x11; id x12; void*x13; void*x14; const void*x15; out void*x16; void*x17; void*x18; void*x19; void*x20; const void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; union x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; const void*x40; void*x41; void*x42; void*x43; void*x44; in void*x45; void*x46; void*x47; void x48; void*x49; int x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; int x58; void*x59; out void*x60; in void*x61; void*x62; void*x63; const void*x64; out void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; BOOL x78; void*x79; void*x80; void*x81; short x82; void*x83; void*x84; void*x85; const void*x86; void*x87; void*x88; BOOL x89; void*x90; void*x91; void*x92; void*x93; void*x94; unsigned int x95/* : ? */; void*x96; void*x97; void*x98; short x99; void*x100; int x101; void*x102; BOOL x103; void*x104; void*x105; void*x106; short x107; void*x108; void*x109; void*x110; const void*x111; int x112; void*x113; in void*x114; void*x115; void*x116; void*x117; void*x118; BOOL x119; void*x120; void*x121; void*x122; void*x123; void*x124; const void*x125; void*x126; void*x127; void*x128; void*x129; short x130; void*x131; void*x132; void*x133; double x134; void*x135; SEL x136; void*x137; SEL x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; SEL x146; void*x147; SEL x148; void*x149; BOOL x150; void*x151; void*x152; void*x153; void*x154; void*x155; const void*x156; void*x157; void*x158; void*x159; void*x160; const void*x161; void*x162; void*x163; int x164; void*x165; void*x166; void*x167; short x168; void*x169; void*x170; void*x171; BOOL x172; void*x173; void*x174; void*x175; void*x176; void*x177; const void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; short x185; void*x186; void*x187; void*x188; double x189; void*x190; SEL x191; void*x192; SEL x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; SEL x201; void*x202; SEL x203; void*x204; void*x205; void*x206; long x207; void*x208; long x209; void*x210; out void*x211; BOOL x212; void*x213; void*x214; void*x215; void*x216; void*x217; out void*x218; const void*x219; void*x220; void*x221; BOOL x222; void*x223; void*x224; void*x225; void*x226; void*x227; const void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; struct x237; void*x238; void*x239; void*x240; short x241; void*x242; void*x243; void*x244; const void*x245; void*x246; void*x247; BOOL x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; BOOL x258; void*x259; out void*x260; void*x261; void*x262; void*x263; void*x264; const void*x265; void*x266; void*x267; short x268; void*x269; short x270; void*x271; void*x272; void*x273; double x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; int x282; void*x283; const void*x284; void*x285; void*x286; short x287; void*x288; void*x289; void*x290; double x291; void*x292; SEL x293; void*x294; SEL x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; SEL x303; void*x304; SEL x305; void*x306; unsigned int x307/* : ? */; void*x308; void*x309; void*x310; short x311; void*x312; int x313; void*x314; BOOL x315; void*x316; void*x317; void*x318; short x319; void*x320; void*x321; void*x322; const void*x323; int x324; void*x325; in void*x326; void*x327; void*x328; void*x329; void*x330; BOOL x331; void*x332; void*x333; void*x334; void*x335; void*x336; const void*x337; void*x338; void*x339; void*x340; void*x341; short x342; void*x343; void*x344; void*x345; double x346; void*x347; SEL x348; void*x349; SEL x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; SEL x358; void*x359; SEL x360; void*x361; BOOL x362; void*x363; void*x364; void*x365; void*x366; void*x367; const void*x368; void*x369; void*x370; void*x371; void*x372; const void*x373; void*x374; void*x375; int x376; void*x377; void*x378; void*x379; short x380; void*x381; void*x382; void*x383; BOOL x384; void*x385; void*x386; void*x387; void*x388; void*x389; const void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; short x397; void*x398; void*x399; void*x400; double x401; void*x402; SEL x403; void*x404; SEL x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; SEL x413; void*x414; SEL x415; void*x416; void*x417; void*x418; long x419; void*x420; long x421; void*x422; out void*x423; BOOL x424; void*x425; void*x426; void*x427; void*x428; void*x429; out void*x430; const void*x431; void*x432; void*x433; BOOL x434; void*x435; void*x436; void*x437; void*x438; void*x439; const void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; SEL x447; void*x448; SEL x449; void*x450; void*x451; void*x452; void*x453; void*x454; const void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; short x464; void*x465; void*x466; void*x467; double x468; void*x469; SEL x470; void*x471; SEL x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; SEL x480; void*x481; SEL x482; void*x483; void*x484; void*x485; long x486; void*x487; long x488; void*x489; out void*x490; BOOL x491; void*x492; void*x493; void*x494; void*x495; void*x496; out void*x497; const void*x498; void*x499; void*x500; BOOL x501; void*x502; void*x503; void*x504; void*x505; void*x506; const void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; struct x516; void*x517; void*x518; void*x519; short x520; void*x521; void*x522; void*x523; const void*x524; void*x525; void*x526; BOOL x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; const void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; struct x544; void*x545; void*x546; void*x547; void*x548; void*x549; in void*x550; int x551; void*x552; out void*x553; in void*x554; void*x555; void*x556; struct x557; void*x558; void*x559; void*x560; short x561; void*x562; void*x563; void*x564; const void*x565; void*x566; void*x567; BOOL x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; long x578; void*x579; out void*x580; in void*x581; void*x582; void*x583; void*x584; void*x585; struct x586; void*x587; void*x588; void*x589; BOOL x590; void*x591; void*x592; void*x593; void*x594; void*x595; const void*x596; void*x597; void*x598; char *x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; void*x618; void*x619; void*x620; in void*x621; short x622; void*x623; int x624; void*x625; void*x626; void*x627; in void*x628; void*x629; void*x630; double x631; void*x632; void*x633; void*x634; long x635; void*x636; out void*x637; in void*x638; void*x639; void*x640; void*x641; void*x642; long x643; void*x644; out void*x645; in void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; void*x655; void*x656; void*x657; void*x658; void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; in void*x671; short x672; void*x673; int x674; void*x675; void*x676; void*x677; in void*x678; void*x679; void*x680; double x681; void*x682; void*x683; void*x684; long x685; void*x686; out void*x687; in void*x688; void*x689; void*x690; void*x691; void*x692; long x693; void*x694; out void*x695; in void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; void*x716; void*x717; void*x718; }*)adaptee;
- (void)beginService;
- (void)doAsync:(id /* block */)arg1;
- (void)doAsync:(id /* block */)arg1 withReply:(id /* block */)arg2;
- (void)endService;
- (id)initInSilo:(id)arg1;
- (bool)syncgetDoSync:(id /* block */)arg1;

@end

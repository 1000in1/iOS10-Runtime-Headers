/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIKeyboardTaskQueue, UITextInputTraits, UITouch, NSMutableArray, UIKBScreenTraits;

@interface UIKeyboardLayout : UIView  {
    UITextInputTraits *_inputTraits;
    UIKBScreenTraits *_screenTraits;
    NSMutableArray *_uncommittedTouches;
    UITouch *_activeTouch;
    UITouch *_shiftKeyTouch;
    UIKeyboardTaskQueue *_taskQueue;
}

@property(retain) UIKeyboardTaskQueue * taskQueue;
@property(retain) UITouch * activeTouch;
@property(retain) UITouch * shiftKeyTouch;
@property(readonly) int orientation;


- (id)initWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isAlphabeticPlane;
- (BOOL)canMultitap;
- (BOOL)hasAccentKey;
- (void)dealloc;
- (id)shiftKeyTouch;
- (BOOL)acceptsDirectionInput;
- (float)flickDistance;
- (void)physicalKeyUpWithEvent:(id)arg1;
- (void)physicalKeyDownWithEvent:(id)arg1;
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)arg1 clearingDimming:(BOOL)arg2;
- (BOOL)performSpaceAction;
- (void)commitTouches:(id)arg1 executionContext:(id)arg2;
- (void)forceUpdatesForCommittedTouch;
- (void)touchCancelled:(id)arg1;
- (void)touchUp:(id)arg1;
- (BOOL)canForceTouchCommit:(id)arg1;
- (void)touchDragged:(id)arg1;
- (void)touchDown:(id)arg1;
- (void)commitTouches:(id)arg1;
- (id)touchesToCommitBeforeTouch:(id)arg1;
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;
- (id)activeTouch;
- (void)touchUp:(id)arg1 executionContext:(id)arg2;
- (void)didCommitTouch:(id)arg1;
- (void)clearShiftIfNecessaryForEndedTouch:(id)arg1;
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;
- (void)touchDown:(id)arg1 executionContext:(id)arg2;
- (void)setShiftKeyTouch:(id)arg1;
- (void)setActiveTouch:(id)arg1;
- (SEL)handlerForNotification:(id)arg1;
- (void)addWipeRecognizer;
- (void)wipeGestureRecognized:(id)arg1;
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint { float x1; float x2; })arg2 shouldTypeVariants:(BOOL)arg3 baseKeyForVariants:(BOOL)arg4;
- (id)simulateTouch:(struct CGPoint { float x1; float x2; })arg1;
- (void)changeToKeyplane:(id)arg1;
- (id)keyplaneNamed:(id)arg1;
- (id)keyplaneForKey:(id)arg1;
- (id)baseKeyForString:(id)arg1;
- (void)setLayoutTag:(id)arg1;
- (void)updateLocalizedKeys:(BOOL)arg1;
- (BOOL)isShiftKeyBeingHeld;
- (BOOL)isShiftKeyPlaneChooser;
- (BOOL)ignoresShiftState;
- (void)setReturnKeyEnabled:(BOOL)arg1 withDisplayName:(id)arg2 withType:(int)arg3;
- (float)hitBuffer;
- (BOOL)canProduceString:(id)arg1;
- (void)longPressAction;
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setAction:(SEL)arg1 forKey:(id)arg2;
- (void)setTarget:(id)arg1 forKey:(id)arg2;
- (void)restoreDefaultsForKey:(id)arg1;
- (void)restoreDefaultsForAllKeys;
- (void)didClearInput;
- (BOOL)usesAutoShift;
- (void)fadeWithInvocation:(id)arg1;
- (BOOL)shouldFadeToLayout;
- (BOOL)shouldFadeFromLayout;
- (void)setTaskQueue:(id)arg1;
- (void)setAutoshift:(BOOL)arg1;
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;
- (id)currentKeyplane;
- (BOOL)performReturnAction;
- (id)taskQueue;
- (id)activationIndicatorView;
- (BOOL)shouldShowIndicator;
- (struct CGSize { float x1; float x2; })dragGestureSize;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (void)deactivateActiveKeys;
- (BOOL)hasCandidateKeys;
- (void)clearUnusedObjects:(BOOL)arg1;
- (id)candidateList;
- (void)setRenderConfig:(id)arg1;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (int)orientation;
- (void)setShift:(BOOL)arg1;

@end

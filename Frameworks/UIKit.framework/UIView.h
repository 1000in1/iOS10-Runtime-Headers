/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIViewController, NSISEngine, CALayer, UIView, NSMutableArray, NSString, UIPresentationController, UIColor, UIKBRenderConfig, UITraitCollection, NSArray, MKMapView, NSISVariable, MPArtworkCatalog;

@interface UIView : UIResponder <_UIScrollNotification, UITextEffectsOrdering, NSISVariableDelegate, NSLayoutItem, NSISEngineDelegate, _UITraitEnvironmentInternal, NSCoding, UIAppearance, UIAppearanceContainer, UIDynamicItem, UITraitEnvironment, UICoordinateSpace, MKStackingViewControllerSizableView> {
    CALayer *_layer;
    id _gestureInfo;
    NSMutableArray *_gestureRecognizers;
    NSArray *_subviewCache;
    float _charge;
    long long _tag;
    UIViewController *_viewDelegate;
    NSString *_backgroundColorSystemColorName;
    unsigned long long _countOfMotionEffectsInSubtree;
    struct { 
        unsigned int userInteractionDisabled : 1; 
        unsigned int implementsDrawRect : 1; 
        unsigned int implementsDidScroll : 1; 
        unsigned int implementsMouseTracking : 1; 
        unsigned int implementsIntrinsicContentSize : 1; 
        unsigned int hasBackgroundColor : 1; 
        unsigned int isOpaque : 1; 
        unsigned int becomeFirstResponderWhenCapable : 1; 
        unsigned int interceptMouseEvent : 1; 
        unsigned int deallocating : 1; 
        unsigned int debugFlash : 1; 
        unsigned int debugSkippedSetNeedsDisplay : 1; 
        unsigned int debugScheduledDisplayIsRequired : 1; 
        unsigned int isInAWindow : 1; 
        unsigned int isAncestorOfFirstResponder : 1; 
        unsigned int dontAutoresizeSubviews : 1; 
        unsigned int autoresizeMask : 6; 
        unsigned int patternBackground : 1; 
        unsigned int fixedBackgroundPattern : 1; 
        unsigned int dontAnimate : 1; 
        unsigned int superLayerIsView : 1; 
        unsigned int layerKitPatternDrawing : 1; 
        unsigned int multipleTouchEnabled : 1; 
        unsigned int exclusiveTouch : 1; 
        unsigned int hasViewController : 1; 
        unsigned int needsDidAppearOrDisappear : 1; 
        unsigned int gesturesEnabled : 1; 
        unsigned int deliversTouchesForGesturesToSuperview : 1; 
        unsigned int chargeEnabled : 1; 
        unsigned int skipsSubviewEnumeration : 1; 
        unsigned int needsDisplayOnBoundsChange : 1; 
        unsigned int hasTiledLayer : 1; 
        unsigned int hasLargeContent : 1; 
        unsigned int unused : 1; 
        unsigned int traversalMark : 1; 
        unsigned int appearanceIsInvalid : 1; 
        unsigned int monitorsSubtree : 1; 
        unsigned int hostsAutolayoutEngine : 1; 
        unsigned int constraintsAreClean : 1; 
        unsigned int subviewLayoutConstraintsAreClean : 1; 
        unsigned int intrinsicContentSizeConstraintsAreClean : 1; 
        unsigned int potentiallyHasDanglyConstraints : 1; 
        unsigned int doesNotTranslateAutoresizingMaskIntoConstraints : 1; 
        unsigned int autolayoutIsClean : 1; 
        unsigned int layoutFlushingDisabled : 1; 
        unsigned int layingOutFromConstraints : 1; 
        unsigned int wantsAutolayout : 1; 
        unsigned int subviewWantsAutolayout : 1; 
        unsigned int isApplyingValuesFromEngine : 1; 
        unsigned int isInAutolayout : 1; 
        unsigned int isUpdatingAutoresizingConstraints : 1; 
        unsigned int isUpdatingConstraints : 1; 
        unsigned int isHostingUpdateConstraintsPassDuringLayout : 1; 
        unsigned int isRunningEngineLevelConstraintsPass : 1; 
        unsigned int systemLayoutFittingSizeNeedsUpdate : 1; 
        unsigned int systemLayoutFittingSizeNeedsUpdateInWholeSubtree : 1; 
        unsigned int isCalculatingSystemLayoutFittingSize : 1; 
        unsigned int stayHiddenAwaitingReuse : 1; 
        unsigned int stayHiddenAfterReuse : 1; 
        unsigned int skippedLayoutWhileHiddenForReuse : 1; 
        unsigned int hasMaskView : 1; 
        unsigned int hasVisualAltitude : 1; 
        unsigned int hasBackdropMaskViews : 1; 
        unsigned int backdropMaskViewFlags : 5; 
        unsigned int delaysTouchesForSystemGestures : 1; 
        unsigned int subclassShouldDelayTouchForSystemGestures : 1; 
        unsigned int hasMotionEffects : 1; 
        unsigned int backdropOverlayMode : 2; 
        unsigned int tintAdjustmentMode : 2; 
        unsigned int isReferenceView : 1; 
        unsigned int focusState : 2; 
        unsigned int hasUserInterfaceIdiom : 1; 
        unsigned int userInterfaceIdiom : 3; 
        unsigned int ancestorDefinesTintColor : 1; 
        unsigned int ancestorDefinesTintAdjustmentMode : 1; 
        unsigned int needsTraitCollectionDidChange : 1; 
        unsigned int coloredViewBounds : 1; 
        unsigned int coloredAlignmentRects : 1; 
        unsigned int preservesSuperviewMargins : 1; 
        unsigned int hasGeometryObservers : 1; 
        unsigned int wantsGeometryChanges : 1; 
    } _viewFlags;
    long long _retainCount;
    long long _tintAdjustmentDimmingCount;
    bool_shouldArchiveUIAppearanceTags;
    UIColor *_interactionTintColor;
    NSISVariable *_minXVariable;
    NSISVariable *_minYVariable;
    NSISVariable *_boundsWidthVariable;
    NSISVariable *_boundsHeightVariable;
    NSISEngine *_layoutEngine;
    NSString *_layoutDebuggingIdentifier;
    NSMutableArray *_internalConstraints;
    NSArray *_constraintsExceptingSubviewAutoresizingConstraints;
    UIPresentationController *__presentationControllerToNotifyOnLayoutSubviews;
}

@property int action;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(retain,readonly) CALayer * _mapkit_currentLayer;
@property(retain,readonly) MKMapView * _mapKit_mapView;
@property(readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _mapkit_doubleFrame;
@property struct CGPoint { double x1; double x2; } integralCenter;
@property(readonly) MPArtworkCatalog * artworkCatalog;
@property bool skipsSubviewEnumeration;
@property bool viewTraversalMark;
@property(getter=_viewDelegate,setter=_setViewDelegate:) UIViewController * viewDelegate;
@property(getter=_monitorsSubtree,setter=_setMonitorsSubtree:) bool monitorsSubtree;
@property(getter=_backgroundColorSystemColorName,setter=_setBackgroundColorSystemColorName:,retain) NSString * backgroundColorSystemColorName;
@property(getter=_currentScreenScale,readonly) double currentScreenScale;
@property(getter=_maskView,setter=_setMaskView:,retain) UIView * maskView;
@property(getter=_userInterfaceIdiom,setter=_setUserInterfaceIdiom:) long long _userInterfaceIdiom;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property bool gesturesEnabled;
@property bool deliversTouchesForGesturesToSuperview;
@property(readonly) UIKBRenderConfig * _inheritedRenderConfig;
@property(readonly) bool _lightStyleRenderConfig;
@property(setter=_setAccessoryViewFrame:) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _accessoryViewFrame;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(getter=isUserInteractionEnabled) bool userInteractionEnabled;
@property long long tag;
@property(retain,readonly) CALayer * layer;
@property(retain) UIColor * interactionTintColor;
@property(setter=_setLayoutDebuggingIdentifier:,copy) NSString * _layoutDebuggingIdentifier;
@property unsigned long long _countOfMotionEffectsInSubtree;
@property(setter=_setMaskView:,retain) UIView * _maskView;
@property(getter=_ancestorDefinesTintColor,setter=_setAncestorDefinesTintColor:) bool _ancestorDefinesTintColor;
@property(getter=_ancestorDefinesTintAdjustmentMode,setter=_setAncestorDefinesTintAdjustmentMode:) bool _ancestorDefinesTintAdjustmentMode;
@property(getter=_presentationControllerToNotifyOnLayoutSubviews,setter=_setPresentationControllerToNotifyOnLayoutSubviews:,retain) UIPresentationController * _presentationControllerToNotifyOnLayoutSubviews;
@property(setter=_setLayoutEngine:,retain) NSISEngine * _layoutEngine;
@property(retain,readonly) NSISVariable * _boundsWidthVariable;
@property(retain,readonly) NSISVariable * _boundsHeightVariable;
@property(retain,readonly) NSISVariable * _minXVariable;
@property(retain,readonly) NSISVariable * _minYVariable;
@property(setter=_setInternalConstraints:,retain) NSMutableArray * _internalConstraints;
@property(retain,readonly) NSArray * _constraintsExceptingSubviewAutoresizingConstraints;
@property(setter=_setShouldArchiveUIAppearanceTags:) bool _shouldArchiveUIAppearanceTags;
@property(setter=_setInteractionTintColor:,retain) UIColor * _interactionTintColor;
@property(readonly) UIView * _backdropMaskViewForGrayscaleTint;
@property(readonly) UIView * _backdropMaskViewForColorTint;
@property(readonly) UIView * _backdropMaskViewForFilters;
@property(readonly) NSArray * _backdropMaskViews;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property(readonly) UITraitCollection * traitCollection;
@property struct CGPoint { double x1; double x2; } center;
@property(readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transform;

+ (void)setAnimationDuration:(double)arg1;
+ (void)flush;
+ (void)_enableToolsDebugAlignmentRects:(bool)arg1;
+ (void)_enableToolsDebugColorViewBounds:(bool)arg1;
+ (id)_viewWithLayoutConstraints;
+ (id)_tintColorForStyle:(int)arg1;
+ (void)_animateUsingDefaultTimingWithOptions:(unsigned long long)arg1 animations:(id)arg2 completion:(id)arg3;
+ (double)_durationOfSpringAnimationWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3 velocity:(double)arg4;
+ (bool)_isAddingResponderToTree;
+ (void)_performInitializationForIdiomIfNeccessary:(long long)arg1;
+ (void)_transitionFromView:(id)arg1 toView:(id)arg2 duration:(double)arg3 options:(unsigned long long)arg4 animations:(id)arg5 completion:(id)arg6;
+ (bool)_invalidatesViewUponCreation;
+ (void)_setInvalidatesViewUponCreation:(bool)arg1;
+ (id)_disabledColorForTintColor:(id)arg1;
+ (void)_animateUsingDefaultDampedSpringWithDelay:(double)arg1 initialSpringVelocity:(double)arg2 options:(unsigned long long)arg3 animations:(id)arg4 start:(id)arg5 completion:(id)arg6;
+ (void)_animateUsingSpringWithDuration:(double)arg1 delay:(double)arg2 options:(unsigned long long)arg3 mass:(double)arg4 stiffness:(double)arg5 damping:(double)arg6 initialVelocity:(double)arg7 animations:(id)arg8 completion:(id)arg9;
+ (void)_animateUsingDefaultDampedSpringWithDelay:(double)arg1 initialSpringVelocity:(double)arg2 options:(unsigned long long)arg3 animations:(id)arg4 completion:(id)arg5;
+ (void)_animateUsingSpringWithDuration:(double)arg1 delay:(double)arg2 options:(unsigned long long)arg3 mass:(double)arg4 stiffness:(double)arg5 damping:(double)arg6 initialVelocity:(double)arg7 animations:(id)arg8 start:(id)arg9 completion:(id)arg10;
+ (bool)_toolsDebugColorViewBounds;
+ (bool)_toolsDebugAlignmentRects;
+ (void)_endDisablingPromoteDescendantToFirstResponder;
+ (void)_beginDisablingPromoteDescendantToFirstResponder;
+ (void)_registerClassForIdiomInitializationIfNeccessary;
+ (void)_initializeForIdiom:(long long)arg1;
+ (bool)requiresConstraintBasedLayout;
+ (void)setAnimationTransition:(long long)arg1 forView:(id)arg2;
+ (void)animateKeyframesWithDuration:(double)arg1 delay:(double)arg2 options:(unsigned long long)arg3 animations:(id)arg4 completion:(id)arg5;
+ (void)performSystemAnimation:(unsigned long long)arg1 onViews:(id)arg2 options:(unsigned long long)arg3 animations:(id)arg4 completion:(id)arg5;
+ (void)transitionFromView:(id)arg1 toView:(id)arg2 duration:(double)arg3 options:(unsigned long long)arg4 completion:(id)arg5;
+ (void)transitionWithView:(id)arg1 duration:(double)arg2 options:(unsigned long long)arg3 animations:(id)arg4 completion:(id)arg5;
+ (void)animateWithDuration:(double)arg1 animations:(id)arg2;
+ (void)_animateWithDuration:(double)arg1 delay:(double)arg2 options:(unsigned long long)arg3 animations:(id)arg4 start:(id)arg5 completion:(id)arg6;
+ (void)_animateWithDuration:(double)arg1 delay:(double)arg2 options:(unsigned long long)arg3 factory:(id)arg4 animations:(id)arg5 completion:(id)arg6;
+ (void)_setupAnimationWithDuration:(double)arg1 delay:(double)arg2 view:(id)arg3 options:(unsigned long long)arg4 animations:(id)arg5 start:(id)arg6 completion:(id)arg7;
+ (void)animateWithDuration:(double)arg1 delay:(double)arg2 usingSpringWithDamping:(double)arg3 initialSpringVelocity:(double)arg4 options:(unsigned long long)arg5 animations:(id)arg6 completion:(id)arg7;
+ (void)_setupAnimationWithDuration:(double)arg1 delay:(double)arg2 view:(id)arg3 options:(unsigned long long)arg4 factory:(id)arg5 animations:(id)arg6 start:(id)arg7 animationStateGenerator:(id)arg8 completion:(id)arg9;
+ (double)_durationForRotationFromInterfaceOrientation:(long long)arg1 toInterfaceOrientation:(long long)arg2;
+ (void)_setAnimationFilterValue:(float)arg1;
+ (void)_setAnimationFilter:(int)arg1 forView:(id)arg2;
+ (void)setAnimationWillStartSelector:(SEL)arg1;
+ (void)setAnimationTransition:(long long)arg1 forView:(id)arg2 cache:(bool)arg3;
+ (void)setAnimationRoundsToInteger:(bool)arg1;
+ (void)setAnimationFromCurrentState:(bool)arg1;
+ (void)setAnimationAutoreverses:(bool)arg1;
+ (void)setAnimationRepeatCount:(float)arg1;
+ (void)setAnimationPreventsAdditive:(bool)arg1;
+ (void)setAnimationStartTime:(double)arg1;
+ (void)setAnimationStartDate:(id)arg1;
+ (void)setAnimationFrameInterval:(double)arg1;
+ (void)_inheritAnimationParameters;
+ (void)_finalizeStoppedAnimationWithUUID:(id)arg1 reverseAnimation:(bool)arg2;
+ (void)_stopAnimationWithUUID:(id)arg1;
+ (void)_reverseAnimationWithUUID:(id)arg1 duration:(double)arg2 curve:(long long)arg3;
+ (bool)_addCompletion:(id)arg1;
+ (void)_disableAnimationTracking:(id)arg1;
+ (id)_performWithAnimationTracking:(id)arg1;
+ (void)enableAnimation;
+ (void)disableAnimation;
+ (void)setAnimationPosition:(struct CGPoint { double x1; double x2; })arg1;
+ (long long)_currentAnimationCurve;
+ (void)commitAnimations;
+ (void)_animateWithAttributes:(id)arg1 animations:(id)arg2 completion:(id)arg3;
+ (id)_defaultUIViewAnimationForLayer:(id)arg1 forKey:(id)arg2;
+ (void)setAnimationRepeatAutoreverses:(bool)arg1;
+ (bool)areAnimationsEnabled;
+ (void)_completeAnimationWithUUID:(id)arg1 duration:(double)arg2 curve:(long long)arg3 reverse:(bool)arg4;
+ (void)_finishAnimationTracking;
+ (id)_startAnimationTracking;
+ (id)_enableAnimationTracking;
+ (void)_setAnimationAttributes:(id)arg1 skipDelegateAssignment:(bool)arg2;
+ (bool)_hasActiveAnimationContext;
+ (void)throttledFlush;
+ (void)_setShouldEnableUIKitParallaxEffects:(bool)arg1;
+ (void)_recenterMotionEffects;
+ (id)_motionEffectEngine;
+ (void)_setAnimatedPropertiesEnabled:(bool)arg1;
+ (bool)_preventsAppearanceProxyCustomization;
+ (id)appearanceForTraitCollection:(id)arg1 whenContainedIn:(Class)arg2;
+ (id)appearanceForTraitCollection:(id)arg1;
+ (id)appearanceMatchingProperties:(id)arg1 whenContainedIn:(Class)arg2;
+ (id)_appearanceRecorderWhenContainedIn:(Class)arg1;
+ (id)appearanceWhenContainedIn:(Class)arg1;
+ (id)_appearanceRecorder;
+ (id)appearance;
+ (bool)_motionEffectsEnabled;
+ (bool)_motionEffectsSupported;
+ (id)_defaultInteractionTintColorForIdiom:(long long)arg1;
+ (void)_setTintColorUpdating:(bool)arg1;
+ (bool)_tintColorUpdating;
+ (id)_appearanceWhenContainedIn:(id)arg1;
+ (void)_removeHierarchyTrackingVisitor:(id)arg1;
+ (void)_addHierarchyTrackingVisitor:(id)arg1;
+ (void)addKeyframeWithRelativeStartTime:(double)arg1 relativeDuration:(double)arg2 animations:(id)arg3;
+ (void)_setAnimationAttributes:(id)arg1;
+ (id)_alongsideAnimations;
+ (void)_disableAnimationTracking:(id)arg1 clearTrackedAnimations:(bool)arg2;
+ (void)_setAlongsideAnimations:(id)arg1;
+ (bool)_isAnimationTracking;
+ (Class)layerClass;
+ (id)_topMostView:(id)arg1 reverse:(bool)arg2;
+ (void)_setIsResponderAncestorOfFirstResponder:(bool)arg1 startingAtFirstResponder:(id)arg2;
+ (void)setAnimationDelegate:(id)arg1;
+ (void)setAnimationDidStopSelector:(SEL)arg1;
+ (void)beginAnimations:(id)arg1 context:(void*)arg2;
+ (int)_degreesToRotateFromInterfaceOrientation:(long long)arg1 toInterfaceOrientation:(long long)arg2;
+ (double)_durationForRotationFromInterfaceOrientation:(long long)arg1 toInterfaceOrientation:(long long)arg2 withBaseDuration:(double)arg3;
+ (void)setAnimationDelay:(double)arg1;
+ (void)setAnimationCurve:(long long)arg1;
+ (void)setAnimationsEnabled:(bool)arg1;
+ (bool)_retroactivelyRequiresConstraintBasedLayout;
+ (id)_defaultUIViewActionForLayer:(id)arg1 forKey:(id)arg2;
+ (void)_performWithoutAnimation:(id)arg1;
+ (void)endAnimations;
+ (void)setAnimationBeginsFromCurrentState:(bool)arg1;
+ (void)beginAnimations:(id)arg1;
+ (double)_currentAnimationDuration;
+ (bool)_isInAnimationBlock;
+ (void)animateWithDuration:(double)arg1 animations:(id)arg2 completion:(id)arg3;
+ (id)_currentAnimationAttributes;
+ (bool)_shouldEnableUIKitDefaultParallaxEffects;
+ (void)_endSuspendingMotionEffectsForReason:(id)arg1;
+ (void)_beginSuspendingMotionEffectsForReason:(id)arg1;
+ (void)animateWithDuration:(double)arg1 delay:(double)arg2 options:(unsigned long long)arg3 animations:(id)arg4 completion:(id)arg5;
+ (void)_performBlockwithAutomaticAppearanceDisabled:(id)arg1;
+ (void)performWithoutAnimation:(id)arg1;
+ (void)_performCustomizableAppearanceModifications:(id)arg1;
+ (id)_gkStandardBackdropView;
+ (id)_mapkit_currentAnimationTimingFunction;
+ (bool)_mapkit_shouldAdoptImplicitAnimationParameters;
+ (void)pkui_animateUsingOptions:(unsigned long long)arg1 animations:(id)arg2 completion:(id)arg3;
+ (void)_pkui_animateUsingFactory:(id)arg1 withDelay:(double)arg2 options:(unsigned long long)arg3 animations:(id)arg4 completion:(id)arg5;
+ (void)pkui_animateUsingOptions:(unsigned long long)arg1 delay:(double)arg2 velocity:(double)arg3 animations:(id)arg4 completion:(id)arg5;
+ (void)pkui_animateUsingOptions:(unsigned long long)arg1 delay:(double)arg2 animations:(id)arg3 completion:(id)arg4;
+ (double)cam_setHiddenAnimationDuration;
+ (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })cam_transformForDeviceOrientation:(long long)arg1;
+ (double)pl_setHiddenAnimationDuration;
+ (id)pl_videoOverlayButtonWithStyle:(long long)arg1;

- (void)setHidden:(bool)arg1;
- (void)setClearsContext:(bool)arg1;
- (void)setNeedsDisplayOnBoundsChange:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (bool)isEnabled;
- (void)setCharge:(float)arg1;
- (float)charge;
- (void)willRemoveSubview:(id)arg1;
- (bool)isHiddenOrHasHiddenAncestor;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toView:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromView:(id)arg2;
- (bool)becomeFirstResponder;
- (id)nextResponder;
- (void)addSubview:(id)arg1;
- (void)setOpaque:(bool)arg1;
- (id)subviews;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromView:(id)arg2;
- (void)setAutoresizingMask:(unsigned long long)arg1;
- (long long)tag;
- (void)layoutSublayersOfLayer:(id)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (bool)isOpaque;
- (id)backgroundColor;
- (void)layoutIfNeeded;
- (bool)isHidden;
- (bool)needsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)setPosition:(struct CGPoint { double x1; double x2; })arg1;
- (bool)needsDisplayOnBoundsChange;
- (void)setNeedsDisplay;
- (void)setNeedsLayout;
- (void)setTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;
- (id)layer;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extent;
- (struct CGPoint { double x1; double x2; })center;
- (double)alpha;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)removeFromSuperview;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toView:(id)arg2;
- (id)superview;
- (id)window;
- (id)init;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (bool)_isDeallocating;
- (bool)_tryRetain;
- (void)dealloc;
- (unsigned long long)retainCount;
- (oneway void)release;
- (id)retain;
- (id)description;
- (bool)nsli_descriptionIncludesPointer;
- (bool)nsli_lowerAttribute:(int)arg1 intoExpression:(id)arg2 withCoefficient:(double)arg3 container:(id)arg4;
- (bool)nsli_lowerAttribute:(int)arg1 intoExpression:(id)arg2 withCoefficient:(double)arg3 forConstraint:(id)arg4;
- (unsigned long long)nsli_autoresizingMask;
- (id)_layoutEngine;
- (bool)nsli_removeConstraint:(id)arg1;
- (void)nsli_addConstraint:(id)arg1;
- (struct CGSize { double x1; double x2; })nsli_convertSizeFromEngineSpace:(struct CGSize { double x1; double x2; })arg1;
- (double)nsli_marginOffsetForAttribute:(long long)arg1;
- (bool)nsli_isFlipped;
- (id)nsli_description;
- (id)nsli_superitem;
- (bool)nsli_resolvedValue:(double*)arg1 forSymbolicConstant:(id)arg2 inConstraint:(id)arg3 error:(id*)arg4;
- (id)nsli_layoutEngine;
- (id)constraints;
- (void)constraintsDidChangeInEngine:(id)arg1;
- (void)engine:(id)arg1 willBreakConstraint:(id)arg2 dueToMutuallyExclusiveConstraints:(id)arg3;
- (id)engine:(id)arg1 markerForConstraintToBreakAmongConstraints:(id)arg2;
- (bool)nsis_valueOfVariableIsUserObservable:(id)arg1;
- (bool)nsis_shouldIntegralizeVariable:(id)arg1;
- (id)nsis_descriptionOfVariable:(id)arg1;
- (void)nsis_valueOfVariable:(id)arg1 didChangeInEngine:(id)arg2;
- (struct CGSize { double x1; double x2; })size;
- (struct CGPoint { double x1; double x2; })position;
- (id)_lowerExpressionOneLevelWithCurrentXExpression:(id)arg1 YExpression:(id)arg2 vertical:(bool)arg3 container:(id)arg4;
- (void)_addCenterExpressionToExpression:(id)arg1 isVertical:(bool)arg2;
- (id)_dimensionExpressionInContainer:(id)arg1 vertical:(bool)arg2 useContentVariables:(bool)arg3;
- (id)_edgeExpressionInContainer:(id)arg1 vertical:(bool)arg2 max:(bool)arg3 contentInsetScale:(double)arg4;
- (id)_centerExpressionInContainer:(id)arg1 vertical:(bool)arg2 contentInsetScale:(double)arg3;
- (id)_scrollViewWantingUpdateInConstraint:(id)arg1;
- (void)_didRemoveDependentConstraint:(id)arg1;
- (void)_didAddDependentConstraint:(id)arg1;
- (id)_representationOfHierarchyForXcode;
- (id)_hierarchyRepresentation;
- (bool)_hasCustomAutolayoutNeighborSpacing;
- (double)_autolayoutSpacingAtEdge:(int)arg1 nextToNeighbor:(id)arg2;
- (double)_autolayoutSpacingAtEdge:(int)arg1 inContainer:(id)arg2;
- (struct CGSize { double x1; double x2; })nsli_convertSizeToEngineSpace:(struct CGSize { double x1; double x2; })arg1;
- (void)_uiib_setHostsLayoutEngine:(bool)arg1;
- (bool)_uiib_hostsLayoutEngine;
- (bool)_is_needsLayout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsForAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_potentiallyHasDanglyConstraints;
- (void)_applyISEngineLayoutToSubviewsSkippingSubview:(id)arg1;
- (id)_allLayoutEngines;
- (id)_autolayoutTrace;
- (id)_constraintsValidityDescription;
- (id)_layoutDescriptionIfDifferentFromDefault;
- (id)_viewForBaselineLayout;
- (bool)_old_nsli_lowerAttribute:(int)arg1 intoExpression:(id)arg2 withCoefficient:(double)arg3 forConstraint:(id)arg4;
- (struct CGSize { double x1; double x2; })nsli_engineToUserScalingCoefficientsInEngine:(id)arg1;
- (void)_updateConstraintsIfNeeded;
- (void)_internalUpdateConstraintsIfNeededAccumulatingViewsNeedingSecondPassAndViewsNeedingBaselineUpdate:(id)arg1;
- (void)_updateConstraintsIfNeededAccumulatingViewsNeedingSecondPassAndViewsNeedingBaselineUpdate:(id)arg1;
- (void)_accumulateViewConstraintsIntoArray:(id)arg1;
- (void)_setNeedsUpdateConstraintsNeedingLayout:(bool)arg1;
- (void)_invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel;
- (void)_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:(bool)arg1;
- (id)_recursiveLayoutEngineDescription;
- (id)_recursiveAutolayoutTraceAtLevel:(long long)arg1;
- (id)_rootView;
- (id)_recursiveConstraintsTraceAtLevel:(long long)arg1;
- (id)_relevantLayoutVariables;
- (void)_updateLayoutEngineHostConstraints;
- (void)_uiib_invalidateAutoresizingConstraints;
- (void)_effectiveAutoresizingMask_autoresizesSubviewsChanged;
- (void)_constraints_viewGeometryDidChange;
- (void)_invalidateLayoutEngineHostConstraints;
- (id)_constraintForIdentifier:(id)arg1;
- (bool)_uiib_tryToAddConstraint:(id)arg1 roundingAdjustment:(double)arg2 mutuallyExclusiveConstraints:(id*)arg3;
- (id)_legendEntryForDescriptionForLayout;
- (id)_descriptionForLayoutTrace;
- (struct CGSize { double x1; double x2; })_calculatedSystemLayoutSizeFittingSize:(struct CGSize { double x1; double x2; })arg1 withHorizontalFittingPriority:(float)arg2 verticalFittingPriority:(float)arg3 hasIntentionallyCollapsedHeight:(bool*)arg4;
- (bool)_wantsBaselineUpdatingFollowingConstraintsPass;
- (void)_finishTemporaryInternalConstraints:(id)arg1 withEngine:(id)arg2 constraintsAddedForFitting:(id)arg3;
- (void)_makeTemporaryInternalConstraintsWithEngine:(id)arg1 ignoreAutoresizingMaskConstraints:(bool)arg2 returningConstraintsForViewsNeedingSecondPass:(id*)arg3 constraintsRemovedForFitting:(id)arg4 constraintsAddedForFitting:(id)arg5;
- (void)_recursiveCollectTemporaryInternalConstraintsWithEngine:(id)arg1 ignoreAutoresizingMaskConstraints:(bool)arg2 returningConstraintsForViewsNeedingSecondPass:(id*)arg3 constraintsRemovedForFitting:(id)arg4 constraintsAddedForFitting:(id)arg5;
- (void)_populateEngineWithConstraintsForViewSubtree:(id)arg1 forComputingFittingSizeOfView:(id)arg2;
- (void)_updateContentSizeConstraints;
- (void)_setContentSizeConstraints:(id)arg1;
- (id)_generateContentSizeConstraints;
- (void)_setContentCompressionResistancePriorities:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_contentCompressionResistancePriorities;
- (struct CGSize { double x1; double x2; })_defaultContentCompressionResistancePriorities;
- (struct CGSize { double x1; double x2; })_contentHuggingPriorities;
- (struct CGSize { double x1; double x2; })_defaultContentHuggingPriorities;
- (void)_autoresizingConstraints_frameDidChange;
- (void)_engineHostConstraints_frameDidChange;
- (void)_invalidateEngineHostConstraints;
- (void)_constantsForVerticalAutoresizingConstraints:(double*)arg1 :(double*)arg2;
- (void)_constantsForHorizontalAutoresizingConstraints:(double*)arg1 :(double*)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (unsigned long long)_effectiveAutoresizingMask;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alignmentBounds;
- (void)_oldUpdateLayoutEngineHostConstraints;
- (id)_constraintsEquivalentToAutoresizingMask;
- (void)_setAutoresizingConstraints:(id)arg1;
- (id)_autoresizingConstraints;
- (void)_setLayoutEngineHostConstraints:(id)arg1;
- (id)_layoutEngineHostConstraints;
- (bool)_usesLayoutEngineHostingConstraints;
- (void)_constraints_didChangeAutoresizingConstraintsArrayForContainedView:(id)arg1;
- (void)_constraints_willChangeAutoresizingConstraintsArrayForContainedView:(id)arg1;
- (bool)_usesAutoresizingConstraints;
- (void)_withAutomaticEngineOptimizationDisabledIfEngineExists:(id)arg1;
- (void)_removeConstraint:(id)arg1;
- (void)_addConstraint:(id)arg1;
- (bool)_tryToAddConstraint:(id)arg1 roundingAdjustment:(double)arg2 mutuallyExclusiveConstraints:(id*)arg3;
- (bool)_tryToAddConstraintWithoutUpdatingConstraintsArray:(id)arg1 roundingAdjustment:(double)arg2 mutuallyExclusiveConstraints:(id*)arg3;
- (void)_setPotentiallyHasDanglyConstraints:(bool)arg1;
- (void)_updateAutoresizingConstraints;
- (void)_viewHierarchyUnpreparedForConstraint:(id)arg1;
- (void)_initializeHostedLayoutEngine;
- (id)_defaultLayoutDescription;
- (bool)hasAmbiguousLayout;
- (id)_uiib_layoutEngineCreatingIfNecessary;
- (void)exerciseAmbiguityInLayout;
- (id)_descendantWithAmbiguousLayout;
- (void)_initializeLayoutEngine;
- (id)_contentSizeConstraints;
- (bool)_forwardsSystemLayoutFittingSizeToContentView:(id)arg1;
- (void)_enableLayoutFlushing;
- (void)_disableLayoutFlushing;
- (unsigned long long)_numberOfColumns:(bool)arg1;
- (void)_constrainViewToSuperview;
- (bool)_hasAutolayoutHeightConstraint;
- (void)_removeAutolayoutSizingConstraints;
- (void)_convertToAutolayoutSizingIfNecessary;
- (void)_setAccessoryViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_accessoryViewFrame;
- (id)viewPrintFormatter;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forViewPrintFormatter:(id)arg2;
- (bool)_lightStyleRenderConfig;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_compatibleBounds;
- (long long)_depthFirstCompare:(id)arg1;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isAccessibilityElementByDefault;
- (int)_clipCorners;
- (long long)compareTextEffectsOrdering:(id)arg1;
- (void)setContentHuggingPriority:(float)arg1 forAxis:(long long)arg2;
- (float)contentCompressionResistancePriorityForAxis:(long long)arg1;
- (void)setContentCompressionResistancePriority:(float)arg1 forAxis:(long long)arg2;
- (float)contentHuggingPriorityForAxis:(long long)arg1;
- (void)_setContentHuggingPriorities:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_systemLayoutSizeFittingSize:(struct CGSize { double x1; double x2; })arg1 withHorizontalFittingPriority:(float)arg2 verticalFittingPriority:(float)arg3 hasIntentionallyCollapsedHeight:(bool*)arg4;
- (struct CGSize { double x1; double x2; })systemLayoutSizeFittingSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_syntheticUIEventWithGSEvent:(struct __GSEvent { }*)arg1 touchPhase:(long long)arg2;
- (id)_syntheticTouch;
- (void)setNeedsUpdateConstraints;
- (int)textEffectsVisibilityLevelInKeyboardWindow;
- (void)reduceWidth:(double)arg1;
- (id)_rootInputWindowController;
- (void)_resizeForKeyplaneSize:(struct CGSize { double x1; double x2; })arg1 splitWidthsChanged:(bool)arg2;
- (id)_layoutDebuggingTitle;
- (bool)_hasLayoutEngine;
- (bool)_needsDoubleUpdateConstraintsPass;
- (void)_invalidateIntrinsicContentSizeNeedingLayout:(bool)arg1;
- (float)_zoomAnimationProgress;
- (void)_animateZoomFailureToWindowPoint:(struct CGPoint { double x1; double x2; })arg1 scale:(double)arg2 duration:(float)arg3;
- (int)stateForGestureType:(int)arg1;
- (float)_zoomScale;
- (void)_setZoomScale:(float)arg1 duration:(double)arg2;
- (float)rotationDegrees;
- (void)setRotationDegrees:(float)arg1 duration:(double)arg2;
- (id)valueForGestureAttribute:(int)arg1;
- (void)setValue:(id)arg1 forGestureAttribute:(int)arg2;
- (int)enabledGestures;
- (void)setEnabledGestures:(int)arg1;
- (id)gestureDelegate;
- (void)setGestureDelegate:(id)arg1;
- (bool)canHandleGestures;
- (void)_stopRotationFromEvent:(struct __GSEvent { }*)arg1;
- (void)_stopZoomFromEvent:(struct __GSEvent { }*)arg1;
- (void)_setZoomAnimationProgress:(id)arg1;
- (bool)_isRubberBanding;
- (void)_setGestureInfoZoomScale:(float)arg1;
- (void)_rotateFromEvent:(struct __GSEvent { }*)arg1;
- (bool)_startRotationFromEvent:(struct __GSEvent { }*)arg1;
- (bool)_zoomWithEvent:(struct __GSEvent { }*)arg1;
- (bool)_startZoomFromEvent:(struct __GSEvent { }*)arg1;
- (void)_resetZoomingWithEvent:(struct __GSEvent { }*)arg1;
- (bool)_canStartRotationFromEvent:(struct __GSEvent { }*)arg1;
- (void)_rotateToDegrees:(float)arg1 duration:(float)arg2 event:(struct __GSEvent { }*)arg3;
- (void)rotateToDegrees:(float)arg1;
- (void)_setRotationAnimationProgress:(id)arg1;
- (void)_animateToScrollPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_rubberbandZoomToEvent:(struct __GSEvent { }*)arg1 scale:(float)arg2;
- (bool)_canStartZoomFromEvent:(struct __GSEvent { }*)arg1;
- (void)_zoomToEvent:(struct __GSEvent { }*)arg1 scale:(float)arg2 animate:(bool)arg3 constrainScrollPoint:(bool)arg4;
- (float)_scaleForInternalScale:(float)arg1;
- (float)_rubberBandScaleForScale:(float)arg1;
- (float)_internalScaleForScale:(float)arg1;
- (float)_minimumZoomScaleDelta;
- (void)_zoomToScale:(float)arg1 event:(struct __GSEvent { }*)arg2;
- (void)_zoomToScrollPoint:(struct CGPoint { double x1; double x2; })arg1 scale:(double)arg2 duration:(float)arg3 event:(struct __GSEvent { }*)arg4;
- (struct CGPoint { double x1; double x2; })_scrollPointForPoint:(struct CGPoint { double x1; double x2; })arg1 scale:(float)arg2 constrain:(bool)arg3 snapToEdge:(bool)arg4;
- (void)_gestureChanged:(int)arg1 event:(struct __GSEvent { }*)arg2;
- (struct CGPoint { double x1; double x2; })_constrainedScrollPoint:(struct CGPoint { double x1; double x2; })arg1 contentSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })_scrollerContentSize;
- (void)zoomToScale:(float)arg1;
- (void)_zoomToWindowPoint:(struct CGPoint { double x1; double x2; })arg1 scale:(double)arg2 duration:(float)arg3 constrainScrollPoint:(bool)arg4 event:(struct __GSEvent { }*)arg5;
- (void)_stopGesture:(int)arg1 event:(struct __GSEvent { }*)arg2;
- (void)_startGesture:(int)arg1 event:(struct __GSEvent { }*)arg2;
- (int)_clipCornersOfView:(id)arg1;
- (id)_inheritedRenderConfig;
- (int)textEffectsVisibilityLevel;
- (void)_setRenderConfig:(id)arg1;
- (Class)_printFormatterClass;
- (id)viewForBaselineLayout;
- (void)gestureChanged:(struct __GSEvent { }*)arg1;
- (void)gestureStarted:(struct __GSEvent { }*)arg1;
- (struct CGSize { double x1; double x2; })_systemLayoutSizeFittingSize:(struct CGSize { double x1; double x2; })arg1 withHorizontalFittingPriority:(float)arg2 verticalFittingPriority:(float)arg3;
- (void)updateConstraints;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_nsis_bounds;
- (struct CGPoint { double x1; double x2; })_nsis_origin;
- (bool)endEditing:(bool)arg1;
- (id)textInputView;
- (void)animator:(id)arg1 startAnimation:(id)arg2;
- (void)animator:(id)arg1 stopAnimation:(id)arg2;
- (bool)needsUpdateConstraints;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)removeConstraint:(id)arg1;
- (void)addConstraint:(id)arg1;
- (void)_prepareToAppearInNavigationItem:(id)arg1 onLeft:(bool)arg2;
- (bool)_useContentDimensionVariablesForConstraintLowering;
- (float)_zoomAnimationDurationForScale:(double)arg1;
- (id)_layoutVariablesWithAmbiguousValue;
- (struct CGSize { double x1; double x2; })nsli_engineToUserScalingCoefficients;
- (bool)_layoutEngine_didAddLayoutConstraint:(id)arg1 roundingAdjustment:(double)arg2 mutuallyExclusiveConstraints:(id*)arg3;
- (void)_layoutEngine_willRemoveLayoutConstraint:(id)arg1;
- (struct CGSize { double x1; double x2; })_nsis_contentSize;
- (id)_layoutEngineIfAvailable;
- (bool)_areAccessibilityButtonShapesEnabled;
- (id)_enclosingScrollableScrollerIncludingSelf;
- (id)_enclosingScrollerIncludingSelf;
- (bool)_isScrollingEnabled;
- (int)_containerStyle;
- (int)_style;
- (id)_scriptingInfo;
- (id)recursiveDescription;
- (id)_superDescription;
- (id)_autoresizingDescription;
- (bool)_wantsReapplicationOfAutoLayout;
- (void)setDeliversTouchesForGesturesToSuperview:(bool)arg1;
- (bool)deliversTouchesForGesturesToSuperview;
- (void)setGesturesEnabled:(bool)arg1;
- (bool)gesturesEnabled;
- (bool)_isInteractiveElement;
- (id)_disabledColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visualAltitudeSensitiveBoundsWithInfiniteEdges:(unsigned long long)arg1;
- (bool)_isMemberOfViewControllerHierarchy:(id)arg1;
- (void)_unregisterAsReferenceView;
- (void)_registerAsReferenceView;
- (double)_currentScreenScale;
- (void)_setBackgroundCGColor:(struct CGColor { }*)arg1;
- (void)_setMonitorsSubtree:(bool)arg1;
- (bool)_monitorsSubtree;
- (id)_containingScrollView;
- (id)_subviewAtIndex:(long long)arg1;
- (long long)_viewOrderRelativeToView:(id)arg1;
- (void)_setViewDelegate:(id)arg1;
- (void)setSkipsSubviewEnumeration:(bool)arg1;
- (bool)skipsSubviewEnumeration;
- (void)_renderLayerWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (void)_setContentsTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)_setContentImage:(id)arg1;
- (void)_clearBecomeFirstResponderWhenCapableOnSubtree;
- (void)_setDelaysTouchesForSystemGestures:(bool)arg1;
- (bool)_delaysTouchesForSystemGestures;
- (bool)_animationIsPaused;
- (bool)_alwaysHandleInteractionEvents;
- (bool)_alwaysHandleScrollerMouseEvent;
- (void)_webCustomViewWasRemovedFromSuperview:(id)arg1;
- (void)_webCustomViewWillBeRemovedFromSuperview;
- (void)_webCustomViewWasAddedAsSubviewOfView:(id)arg1;
- (void)_setInterceptMouseEvent:(bool)arg1;
- (void)_invalidateLayerContents;
- (void)_didScroll;
- (id)_scroller;
- (bool)_subclassImplementsIntrinsicSizeWithinSize;
- (bool)_subclassImplementsIntrinsicContentSize;
- (bool)_subclassImplementsDrawRect;
- (id)_initWithMaskImage:(id)arg1;
- (id)_initWithLayer:(id)arg1;
- (bool)_isInExclusiveTouchSubviewTree;
- (bool)_appliesExclusiveTouchToSubviewTree;
- (id)_viewIndexPath;
- (bool)_allowsArchivingAsSubview;
- (void)_removeColorViewBoundsOverlays;
- (id)_colorViewBoundsOverlayCreateIfNecessary:(bool)arg1;
- (void)_removeAlignmentDebuggingOverlays;
- (id)_alignmentDebuggingOverlayCreateIfNecessary:(bool)arg1;
- (void)_constraints_subviewDidChangeSuperview:(id)arg1;
- (void)_descendent:(id)arg1 didMoveFromSuperview:(id)arg2 toSuperview:(id)arg3;
- (void)_setSubviewWantsAutolayoutTripWantsAutolayout:(bool)arg1;
- (void)_unsubscribeToScrollNotificationsIfNecessary:(id)arg1;
- (void)_descendent:(id)arg1 willMoveFromSuperview:(id)arg2 toSuperview:(id)arg3;
- (void)_constraints_subviewWillChangeSuperview:(id)arg1;
- (struct CARenderServerBuffer { }*)_createRenderServerBufferFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 padding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)_renderLayerContentsWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (bool)_isRootForKeyResponderCycle;
- (void)_setIsAncestorOfFirstResponder:(bool)arg1;
- (void)_subscribeToScrollNotificationsIfNecessary:(id)arg1;
- (void)_didChangeFromIdiom:(long long)arg1 onScreen:(id)arg2 traverseHierarchy:(bool)arg3;
- (void)_setUserInterfaceIdiom:(long long)arg1;
- (void)_performUpdatesForPossibleChangesOfIdiom:(long long)arg1 orScreen:(id)arg2 traverseHierarchy:(bool)arg3;
- (void)_willChangeToIdiom:(long long)arg1 onScreen:(id)arg2 traverseHierarchy:(bool)arg3;
- (bool)_shouldInheritScreenScaleAsContentScaleFactor;
- (bool)_controlsOwnScaleFactor;
- (void)_applyScreenScaleToContentScaleFactorIfNotSpecifiedByDeveloper;
- (void)_gestureEnded:(struct __GSEvent { }*)arg1;
- (void)_applyAppearanceInvocations;
- (void)_informContainerThatSubviewsNeedUpdateConstraints;
- (void)_layoutEngine_windowDidChange;
- (void)_setWantsAutolayout;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (struct CGImage { }*)createSnapshotWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (id)_interceptMouseEvent:(struct __GSEvent { }*)arg1;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (void)_enumerateDescendentViews:(id)arg1;
- (bool)_isInTransitionBlock;
- (void)_removeAllAnimations:(bool)arg1;
- (void*)_createIOSurfaceWithPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_enableLayerKitPatternDrawing:(bool)arg1;
- (struct CGImage { }*)newSnapshotWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentsPosition:(int)arg1;
- (bool)_isHiddenForReuse;
- (void)_setHiddenForReuse:(bool)arg1;
- (void)setFixedBackgroundPattern:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBounds;
- (void)_setShouldRasterize:(bool)arg1;
- (void)_resetContentRect;
- (void)_setContentRectInPixels:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forContentSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentStretch;
- (void)setContentStretch:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setContentStretchInPixels:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forContentSize:(struct CGSize { double x1; double x2; })arg2 shouldTile:(bool)arg3;
- (void)_resetContentStretch;
- (void*)_createImageFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 padding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)recursivelyForceDisplayIfNeeded;
- (void)_renderSnapshotWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (void)_updateNeedsDisplayOnBoundsChange;
- (double)contentScaleFactor;
- (void)movedToWindow:(id)arg1;
- (void)movedFromWindow:(id)arg1;
- (void)viewDidMoveToSuperview;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)movedToSuperview:(id)arg1;
- (void)_postMovedFromSuperview:(id)arg1;
- (void)insertSubview:(id)arg1 above:(id)arg2;
- (void)_willMoveToWindow:(id)arg1 withAncestorView:(id)arg2;
- (id)_backgroundColor;
- (void)_setBackgroundColor:(id)arg1;
- (void)_didRemoveSubview:(id)arg1;
- (void)willMoveToSuperview:(id)arg1;
- (void)didAddSubview:(id)arg1;
- (void)insertSubview:(id)arg1 aboveSubview:(id)arg2;
- (void)exchangeSubviewAtIndex:(long long)arg1 withSubviewAtIndex:(long long)arg2;
- (void)_willRemoveSubviewWantingAutolayout:(id)arg1;
- (void)_removeFirstResponderFromSubtree;
- (void)_updateConstraintsAsNecessaryAndApplyLayoutFromEngine;
- (void)_is_layout;
- (struct CGSize { double x1; double x2; })systemLayoutSizeFittingSize:(struct CGSize { double x1; double x2; })arg1 withHorizontalFittingPriority:(float)arg2 verticalFittingPriority:(float)arg3;
- (bool)_wantsAutolayout;
- (void)updateConstraintsIfNeeded;
- (void)_updateConstraintsAtEngineLevelIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRectForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_switchToLayoutEngine:(id)arg1;
- (struct CGSize { double x1; double x2; })_preferredLayoutEngineToUserScalingCoefficients;
- (bool)_shouldDirtyLayoutForConstraints;
- (id)viewWithTag:(long long)arg1;
- (void)didMoveToSuperview;
- (void)movedFromSuperview:(id)arg1;
- (bool)_shouldTryPromoteDescendantToFirstResponder;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (void)_parentalLayoutEngineDidChangeTo:(id)arg1;
- (void)deferredBecomeFirstResponder;
- (void)_makeSubtreePerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)_makeSubtreePerformSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3 copySublayers:(bool)arg4;
- (id)_findFirstSubviewWantingToBecomeFirstResponder;
- (void)willMoveToWindow:(id)arg1;
- (void)_willMoveToWindow:(id)arg1;
- (void)setViewTraversalMark:(bool)arg1;
- (bool)_associatedViewControllerForwardsAppearanceCallbacks:(id)arg1 performHierarchyCheck:(bool)arg2 isRoot:(bool)arg3;
- (bool)viewTraversalMark;
- (void)_setBackgroundCGColor:(struct CGColor { }*)arg1 withSystemColorName:(id)arg2;
- (void)_movedToFront;
- (void)_addSubview:(id)arg1 positioned:(long long)arg2 relativeTo:(id)arg3;
- (void)setOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })origin;
- (void)sizeToFit;
- (bool)autoresizesSubviews;
- (void)setAutoresizesSubviews:(bool)arg1;
- (void)setRotationBy:(float)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forFields:(int)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hitRect;
- (struct CGPoint { double x1; double x2; })_convertOffset:(struct CGPoint { double x1; double x2; })arg1 fromView:(id)arg2;
- (struct CGPoint { double x1; double x2; })_convertOffset:(struct CGPoint { double x1; double x2; })arg1 toView:(id)arg2;
- (struct CGSize { double x1; double x2; })convertSize:(struct CGSize { double x1; double x2; })arg1 fromView:(id)arg2;
- (struct CGSize { double x1; double x2; })convertSize:(struct CGSize { double x1; double x2; })arg1 toView:(id)arg2;
- (bool)isExclusiveTouch;
- (void)setExclusiveTouch:(bool)arg1;
- (void)setMultipleTouchEnabled:(bool)arg1;
- (bool)_isFloatingLayoutItem;
- (bool)_supportsContentDimensionVariables;
- (bool)_needsLayoutOnAnimatedBoundsChangeForNewBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_resizeWithOldSuperviewSize_ancient:(struct CGSize { double x1; double x2; })arg1;
- (void)_resizeWithOldSuperviewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_applyAutoresizingMaskWithOldSuperviewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_applyISEngineLayoutValues;
- (bool)_autoresizingConstraintsAreUpdated;
- (void)_nsis_origin:(struct CGPoint { double x1; double x2; }*)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inEngine:(id)arg3;
- (void)_nsis_center:(struct CGPoint { double x1; double x2; }*)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inEngine:(id)arg3;
- (id)_layoutEngineCreateIfNecessary;
- (unsigned long long)autoresizingMask;
- (void)resizeWithOldSuperviewSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_interceptEvent:(id)arg1;
- (void)_notifyReferenceViewSizeChange;
- (void)layoutBelowIfNeeded;
- (void)resizeSubviewsWithOldSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_is_setNeedsLayout;
- (bool)_needsLayoutOnAnimatedFrameChangeForNewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_gestureRecognizers;
- (id)_gestureInfo;
- (void)_setPresentationControllerToNotifyOnLayoutSubviews:(id)arg1;
- (id)_presentationControllerToNotifyOnLayoutSubviews;
- (void)setTag:(long long)arg1;
- (void)_setShouldArchiveUIAppearanceTags:(bool)arg1;
- (bool)_shouldArchiveUIAppearanceTags;
- (void)_setInternalConstraints:(id)arg1;
- (id)_internalConstraints;
- (void)_setLayoutDebuggingIdentifier:(id)arg1;
- (void)_setLayoutEngine:(id)arg1;
- (id)_boundsHeightVariable;
- (id)_boundsWidthVariable;
- (id)_minYVariable;
- (id)_minXVariable;
- (id)resizableSnapshotViewFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withCapInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (bool)drawViewHierarchyInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)resizableSnapshotFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withCapInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (id)snapshot;
- (id)snapshotViewAfterScreenUpdates:(bool)arg1;
- (void)_unregisterForGeometryChanges;
- (void)_registerForGeometryChanges;
- (void)_addParentGeometryObservers;
- (void)_removeParentGeometryObservers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visualAltitudeSensitiveBoundsWithVisualAltitude:(double)arg1 edges:(unsigned long long)arg2;
- (long long)_currentUserInterfaceIdiom;
- (bool)_unapplyMotionEffect:(id)arg1;
- (bool)_applyKeyPathsAndRelativeValues:(id)arg1 forMotionEffect:(id)arg2;
- (void)_recursivelyConsiderResumingMotionEffects;
- (bool)_motionEffectsAreSuspended;
- (void)setMotionEffects:(id)arg1;
- (id)_motionEffects;
- (void)_updateBackdropMaskViewsInScrollView:(id)arg1;
- (void)_setBoundsForBackdropMaskViews:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setFrameForBackdropMaskViews:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_removeBackdropMaskViews;
- (id)_backdropMaskViewForFlag:(long long)arg1;
- (id)_generateBackdropMaskViewForFlag:(long long)arg1;
- (id)_backdropMaskViews;
- (void)_setBackdropMaskViewFlags:(long long)arg1;
- (id)maskView;
- (void)setMaskView:(id)arg1;
- (void)_setDrawsAsBackdropOverlay:(bool)arg1;
- (bool)_drawsAsBackdropOverlay;
- (double)_imageButtonMargin;
- (double)_textButtonMargin;
- (void)_setFocusState:(long long)arg1;
- (long long)_focusState;
- (bool)_isFocusableElement;
- (void)_setAncestorDefinesTintAdjustmentMode:(bool)arg1;
- (bool)_ancestorDefinesTintAdjustmentMode;
- (void)_setAncestorDefinesTintColor:(bool)arg1;
- (bool)_ancestorDefinesTintColor;
- (void)_endOcclusion:(id)arg1;
- (void)_beginOcclusion:(id)arg1;
- (void)interactionTintColorDidChange;
- (void)tintColorDidChange;
- (long long)_primitiveTintAdjustmentMode;
- (void)setTintAdjustmentMode:(long long)arg1;
- (void)_setAppearanceIsInvalid:(bool)arg1;
- (bool)_appearanceIsInvalid;
- (void)setPreservesSuperviewLayoutMargins:(bool)arg1;
- (bool)preservesSuperviewLayoutMargins;
- (id)_backgroundColorSystemColorName;
- (void)_setBackgroundColorSystemColorName:(id)arg1;
- (bool)_hasOpaqueBackground;
- (void)stopHeartbeat:(SEL)arg1;
- (void)startHeartbeat:(SEL)arg1 inRunLoopMode:(id)arg2;
- (bool)_canBecomeFirstResponderWhenPossible;
- (void)_clearBecomeFirstResponderWhenCapable;
- (id)_previousKeyResponder;
- (id)_nextKeyResponder;
- (id)tapDelegate;
- (void)setTapDelegate:(id)arg1;
- (void)_setChargeEnabled:(bool)arg1;
- (bool)isUserInteractionEnabled;
- (void)_createLayerWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setTraitStorageSubviews:(id)arg1;
- (id)_traitStorageSubviews;
- (void)_setTraitStorageConstraints:(id)arg1;
- (id)_traitStorageConstraints;
- (id)_appearanceTraitCollection;
- (double)_firstBaselineOffsetFromTop;
- (double)_baselineOffsetFromBottom;
- (id)_constraintsArray;
- (id)nsli_contentHeightVariable;
- (id)nsli_contentWidthVariable;
- (id)nsli_boundsHeightVariable;
- (id)nsli_boundsWidthVariable;
- (id)nsli_minYVariable;
- (id)nsli_minXVariable;
- (id)_contentHeightVariable;
- (id)_contentWidthVariable;
- (id)_layoutDebuggingIdentifier;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromCoordinateSpace:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toCoordinateSpace:(id)arg2;
- (id)_traitCollectionForChildEnvironment:(id)arg1;
- (bool)drawViewHierarchyInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 afterScreenUpdates:(bool)arg2;
- (id)snapshotView;
- (bool)_drawViewHierarchyInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_imageSnapshotCapturedAllContent;
- (id)_imageFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)resizableSnapshotViewFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 afterScreenUpdates:(bool)arg2 withCapInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
- (void)_geometryChanged:(unsigned long long)arg1 forAncestor:(id)arg2;
- (void)_removeGeometryChangeObserver:(id)arg1;
- (void)_addGeometryChangeObserver:(id)arg1;
- (void)_setTransformForBackdropMaskViews:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)_reestablishConstraintsForTransformChange;
- (void)_withAutomaticEngineOptimizationDisabled:(id)arg1;
- (bool)isDescendantOfView:(id)arg1;
- (id)_constraintsExceptingSubviewAutoresizingConstraints;
- (void)_invalidateAutoresizingConstraints;
- (bool)_hostsLayoutEngine;
- (void)_notifyGeometryObserversOfOriginChange:(bool)arg1 sizeChanged:(bool)arg2;
- (void)_setCenterForBackdropMaskViews:(struct CGPoint { double x1; double x2; })arg1;
- (void)_constraints_frameDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromCoordinateSpace:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toCoordinateSpace:(id)arg2;
- (bool)canBecomeFirstResponder;
- (double)_visualAltitude;
- (void)_updateParallaxEffectWithAltitude:(double)arg1 bias:(struct CGSize { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })_visualAltitudeBias;
- (void)_addMotionEffect:(id)arg1;
- (void)_removeMotionEffect:(id)arg1;
- (id)_parallaxMotionEffect;
- (void)_endSuspendingMotionEffects;
- (void)_beginSuspendingMotionEffects;
- (id)motionEffects;
- (void)removeMotionEffect:(id)arg1;
- (void)addMotionEffect:(id)arg1;
- (void)_dispatchMotionEffectsVisitorWithDelta:(long long)arg1;
- (void)set_countOfMotionEffectsInSubtree:(unsigned long long)arg1;
- (unsigned long long)_countOfMotionEffectsInSubtree;
- (void)_updateBackdropMaskFrames;
- (void)_recursivelySetHiddenForBackdropMaskViews:(bool)arg1;
- (void)_setHiddenForBackdropMaskViews:(bool)arg1;
- (void)_setCenterForBackdropMaskViews:(struct CGPoint { double x1; double x2; })arg1 convertPoint:(bool)arg2;
- (id)_anyBackdropMaskView;
- (void)_setFrameForBackdropMaskViews:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 convertFrame:(bool)arg2;
- (id)_backdropMaskViewForDarkeningTint;
- (id)_backdropMaskViewForColorBurnTint;
- (void)_setBackdropMaskViewForFilters:(id)arg1;
- (void)_setBackdropMaskViewForDarkeningTint:(id)arg1;
- (void)_setBackdropMaskViewForColorBurnTint:(id)arg1;
- (void)_setBackdropMaskViewForColorTint:(id)arg1;
- (void)_setBackdropMaskViewForGrayscaleTint:(id)arg1;
- (void)_setBackdropMaskView:(id)arg1 forFlag:(long long)arg2;
- (id)_generateBackdropMaskImage;
- (long long)_backdropMaskViewFlags;
- (id)_backdropMaskViewForFilters;
- (id)_backdropMaskViewForColorTint;
- (id)_backdropMaskViewForGrayscaleTint;
- (id)_maskView;
- (void)_setDrawsAsBackdropOverlayWithBlendMode:(long long)arg1;
- (double)_contentMargin;
- (void)_focusStateDidChange;
- (bool)_hasNormalTintAdjustmentMode;
- (id)__darkSystemColorForColor:(id)arg1;
- (void)setTintColor:(id)arg1;
- (long long)_defaultTintAdjustmentMode;
- (long long)tintAdjustmentMode;
- (id)tintColor;
- (id)interactionTintColor;
- (void)setInteractionTintColor:(id)arg1;
- (void)forceDisplayIfNeeded;
- (void)_receiveVisitor:(id)arg1;
- (void)_processTraitsDidChangeRecursively:(id)arg1 forceNotification:(bool)arg2;
- (id)_viewControllerToNotifyOnLayoutSubviews;
- (void)invalidateIntrinsicContentSize;
- (Class)_appearanceGuideClass;
- (void)_invalidateAppearanceForTraitCollection:(id)arg1;
- (void)_invalidateAppearanceForSubviewsOfClass:(Class)arg1;
- (bool)_fakeShouldAnimatePropertyWithKey:(id)arg1;
- (void)_layoutMarginsDidChange;
- (void)layoutMarginsDidChange;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })layoutMargins;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_defaultLayoutMargins;
- (bool)_canDrawContent;
- (struct CGColor { }*)_backgroundCGColor;
- (long long)_topToBottomLeftToRightViewCompare:(id)arg1;
- (void)_collectKeyViews:(id)arg1;
- (void)_promoteSelfOrDescendantToFirstResponderIfNecessary;
- (bool)_shouldResignFirstResponderWithInteractionDisabled;
- (void)_unregisterFromAnimators;
- (void)_unregisterAllMotionEffects;
- (void)removeAllGestureRecognizers;
- (void)_invalidateSubviewCache;
- (void)_setMaskView:(id)arg1;
- (void)_discardLayoutEngine:(id)arg1;
- (id)_primitiveContentCompressionResistancePrioritiesValue;
- (id)_primitiveContentHuggingPrioritiesValue;
- (bool)clipsToBounds;
- (long long)contentMode;
- (bool)clearsContextBeforeDrawing;
- (void)_encodeBackgroundColorWithCoder:(id)arg1;
- (id)_encodableSubviews;
- (void)_encodeFrameWithCoder:(id)arg1;
- (void)setLayoutMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setPrimitiveContentCompressionResistancePrioritiesValue:(id)arg1;
- (void)_setPrimitiveContentHuggingPrioritiesValue:(id)arg1;
- (void)setTranslatesAutoresizingMaskIntoConstraints:(bool)arg1;
- (void)setClearsContextBeforeDrawing:(bool)arg1;
- (id)_tintColorArchivingKey;
- (bool)useBlockyMagnificationInClassic;
- (bool)_isViewHierarchyPreparedForConstraint:(id)arg1;
- (void)removeConstraints:(id)arg1;
- (void)_clearAnimationFilters;
- (id)_normalInheritedTintColor;
- (bool)_isInAWindow;
- (bool)_supportsBecomeFirstResponderWhenPossible;
- (bool)_becomeFirstResponderWhenPossible;
- (id)_firstResponder;
- (void)traitCollectionDidChange:(id)arg1;
- (bool)_shouldDelayTouchForSystemGestures:(id)arg1;
- (id)_appearanceContainer;
- (bool)_containedInAbsoluteResponderChain;
- (id)_interactionTintColor;
- (void)_addPossibleRespondersToArray:(id)arg1;
- (bool)_isAncestorOfFirstResponder;
- (bool)containsView:(id)arg1;
- (bool)cancelMouseTracking;
- (void)gestureEnded:(struct __GSEvent { }*)arg1;
- (bool)cancelTouchTracking;
- (void)_noteTraitsDidChangeRecursively;
- (void)_traitCollectionDidChange:(id)arg1;
- (void)_didChangeFromIdiomOnScreen:(id)arg1 traverseHierarchy:(bool)arg2;
- (void)_rebuildLayoutFromScratch;
- (void)_willChangeToIdiomOnScreen:(id)arg1 traverseHierarchy:(bool)arg2;
- (void)_setNeedsUpdateConstraints;
- (void)_setHostsLayoutEngine:(bool)arg1;
- (void)setCenter:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })frameOrigin;
- (id)_rootForKeyResponderCycle;
- (double)_convertVisualAltitude:(double)arg1 toView:(id)arg2;
- (double)_convertVisualAltitude:(double)arg1 fromView:(id)arg2;
- (id)_layer;
- (bool)_isInVisibleHierarchy;
- (id)_viewControllerForAncestor;
- (bool)_canHandleStatusBarTouchAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isAlphaHittableAndHasAlphaHittableAncestors;
- (bool)_isChargeEnabled;
- (double)_touchSloppinessFactor;
- (void)_recursivelyReconsiderMotionEffectSuspension;
- (void)_recursivelySuspendMotionEffects;
- (void)addConstraints:(id)arg1;
- (bool)translatesAutoresizingMaskIntoConstraints;
- (id)scriptingInfoWithChildren;
- (void)_dispatchTintColorVisitorWithReasons:(unsigned long long)arg1;
- (id)_window;
- (id)_window;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (void)_willChangeToIdiom:(long long)arg1 onScreen:(id)arg2;
- (id)_hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2 windowServerHitTestWindow:(id)arg3;
- (bool)_shouldApplyExclusiveTouch;
- (bool)isMultipleTouchEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_responderSelectionRectForWindow:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_responderExternalTouchRectForWindow:(id)arg1;
- (id)traitCollection;
- (void)restoreUserActivityState:(id)arg1;
- (void)updateUserActivityState:(id)arg1;
- (void)setGestureRecognizers:(id)arg1;
- (id)gestureRecognizers;
- (void)_setVisualAltitudeBias:(struct CGSize { double x1; double x2; })arg1;
- (void)_setVisualAltitude:(double)arg1;
- (void)_recursivelyNameLayerTree;
- (id)_viewDelegate;
- (id)_basicAnimationWithKeyPath:(id)arg1;
- (long long)_userInterfaceIdiom;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)removeGestureRecognizer:(id)arg1;
- (void)addGestureRecognizer:(id)arg1;
- (void)setContentMode:(long long)arg1;
- (void)insertSubview:(id)arg1 belowSubview:(id)arg2;
- (void)setClipsToBounds:(bool)arg1;
- (void)insertSubview:(id)arg1 below:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (bool)_contentHuggingDefault_isUsuallyFixedWidth;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (void)_setInteractionTintColor:(id)arg1;
- (id)_inheritedInteractionTintColor;
- (bool)_canBeReusedInPickerView;
- (void)sendSubviewToBack:(id)arg1;
- (void)setClipsSubviews:(bool)arg1;
- (void)insertSubview:(id)arg1 atIndex:(long long)arg2;
- (void)setContentScaleFactor:(double)arg1;
- (void)layoutSubviews;
- (void)bringSubviewToFront:(id)arg1;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)didMoveToWindow;
- (void)setAlpha:(double)arg1;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)_populateArchivedSubviews:(id)arg1;
- (id)_screen;
- (void)setUserInteractionEnabled:(bool)arg1;
- (id)constraintsAffectingLayoutForAxis:(long long)arg1;
- (id)mpAncestorViewController;
- (void)mpSetFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)mpSetFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)mpPerformRecursiveBlock:(id)arg1;
- (id)mpFirstLabelSubview;
- (void)clearArtworkCatalogs;
- (id)artworkCatalog;
- (void)setFrameHeight:(double)arg1;
- (void)setFrameWidth:(double)arg1;
- (void)setFrameY:(double)arg1;
- (void)setFrameEndX:(double)arg1 y:(double)arg2;
- (void)setFrameX:(double)arg1;
- (void)setFrameOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_web_setSubviews:(id)arg1;
- (id)_findDescendantViewAtPoint:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)_recursiveFindDescendantScrollViewAtPoint:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)abSubviewAtIndexPath:(id)arg1;
- (id)abIndexPathOfSubview:(id)arg1;
- (id)ancestorBackdropView;
- (void)abSetLayoutDebuggingColor:(id)arg1;
- (void)colorize;
- (id)mf_frontSibling;
- (id)mf_enclosingScrollView;
- (double)mf_currentScreenScale;
- (id)_gkAncestryAffectingVisualLayout;
- (id)_gkAncestryDescription;
- (id)_gkRecursiveDescriptionForValue:(id)arg1 forKey:(id)arg2;
- (id)_gkRecursiveDescriptionForKey:(id)arg1;
- (bool)_gkSuperviewHasPerspectiveTransform;
- (double)_gkPerspectiveTransformEZ;
- (void)_gkClearPerspectiveTransform;
- (void)_gkApplyPerspectiveTransform;
- (struct CGPoint { double x1; double x2; })integralCenter;
- (void)setIntegralCenter:(struct CGPoint { double x1; double x2; })arg1;
- (id)_gkRecursiveDescriptionForValue:(id)arg1 forKey:(id)arg2 depth:(long long)arg3;
- (id)_gkRecursiveDescriptionForKey:(id)arg1 depth:(long long)arg2;
- (void)_gkRecursivelyApplyBlock:(id)arg1 depth:(long long)arg2;
- (void)_gkPerformWithoutAnimationWhenRotating:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_gkPopoverPresentationArea;
- (void)_gkAddStandardFadeTransition;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_gkPopoverPresentationInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_gkPopoverPresentationRect;
- (void)_gkEnumerateSubviewsUsingBlock:(id)arg1;
- (void)_gkUseAsModalSheetBackgroundWithGroupName:(id)arg1;
- (void)_gkApplyBackdropViewWithGroupName:(id)arg1;
- (id)_gkBackdropView;
- (id)_gkApplyFakeStatusBarView;
- (void)_gkSetDrawsAsKnockout:(bool)arg1 inBackdrop:(id)arg2;
- (void)_gkApplyBackdropViewIfNeededWithGroupName:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_mapkit_doubleFrame;
- (unsigned long long)_mapkit_countOfSet:(id)arg1 minusSubset:(id)arg2;
- (id)_mapKit_mapView;
- (id)_mapkit_currentLayer;
- (id)_mapkit_accessoryControlToExtendWithCallout;
- (bool)_mapkit_YCoordinate:(double)arg1 liesInDirection:(long long)arg2 startingFromYCoordinate:(double)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_mapkit_rectWithSize:(struct CGSize { double x1; double x2; })arg1 XCoordinate:(double)arg2 atDistance:(double)arg3 inDirection:(long long)arg4 fromEdge:(long long)arg5;
- (void)_mapkit_setContentCompressionResistancePriority:(float)arg1 forAxis:(long long)arg2;
- (struct CGSize { double x1; double x2; })_mapkit_sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)_mapkit_sizeToFit;
- (void)_mapKit_setNeedsDisplay;
- (void)_mapkit_layoutIfNeeded;
- (void)_mapkit_setNeedsUpdateConstraints;
- (double)_mapkit_YCoordinateAtDistance:(double)arg1 inDirection:(long long)arg2 fromEdge:(long long)arg3;
- (double)_mapkit_YCoordinateAtDistance:(double)arg1 inDirection:(long long)arg2 fromYCoordinate:(double)arg3;
- (void)_mapkit_insertSubviewBelowAllOtherSubviews:(id)arg1;
- (struct CGSize { double x1; double x2; })_mapkit_fittingSize;
- (void)_mapkit_setNeedsLayout;
- (int)action;
- (void)setAction:(int)arg1;
- (void)sb_setBoundsAndPositionFromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)centerVerticalInView:(id)arg1;
- (void)centerHorizontalInView:(id)arg1;
- (void)addBorderWithColor:(id)arg1;
- (void)centerSubviewInBounds:(id)arg1;
- (id)superviewOfClass:(Class)arg1;
- (id)firstScrollViewDescendant;
- (id)_firstDescendantOfKind:(Class)arg1;
- (id)pkui_viewControllerFromResponderChain;
- (id)pkui_translationAnimation;
- (void)addTranslationAnimationWithStartTime:(double)arg1 duration:(double)arg2 timing:(id)arg3;
- (void)addDefaultTransformSpringWithStartTime:(double)arg1;
- (void)addTransformAnimationWithStartTime:(double)arg1 duration:(double)arg2 timing:(id)arg3;
- (void)addTranslationSpringWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3 startTime:(double)arg4 timing:(id)arg5;
- (void)addDefaultTranslationSpringWithVelocity:(double)arg1 startTime:(double)arg2;
- (void)pkui_shakeWithCompletion:(id)arg1;
- (void)addTransformSpringWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3 startTime:(double)arg4 timing:(id)arg5;
- (void)addTranslationSpringWithMass:(double)arg1 stiffness:(double)arg2 damping:(double)arg3 startTime:(double)arg4 velocity:(double)arg5 timing:(id)arg6;
- (void)sbui_drawEagerly;
- (bool)cam_isOnScreen:(id)arg1;
- (void)cam_setHidden:(bool)arg1 delay:(double)arg2 animated:(bool)arg3;
- (void)cam_setHidden:(bool)arg1 animated:(bool)arg2;
- (void)cam_rotateWithDeviceOrientation:(long long)arg1 animated:(bool)arg2;
- (id)cam_constraintsForKey:(id)arg1;
- (void)cam_clearAllConstraintsForKey:(id)arg1;
- (void)cam_addConstraint:(id)arg1 forKey:(id)arg2;
- (id)_cam_associatedConstraints;
- (void)cam_removeAllConstraintsForKey:(id)arg1;
- (bool)cam_hasConstraintForKey:(id)arg1;
- (void)cam_addConstraints:(id)arg1 forKey:(id)arg2;
- (bool)cam_isOnScreen:(id)arg1;
- (void)showActionSheet:(id)arg1 animated:(bool)arg2;
- (void)pl_drawBorderWithColor:(id)arg1 width:(double)arg2;
- (void)pl_setHidden:(bool)arg1 delay:(double)arg2 animated:(bool)arg3;
- (bool)pl_isOnScreen:(id)arg1;
- (void)pl_setHidden:(bool)arg1 animated:(bool)arg2;
- (id)_tk_autolayoutTrace;
- (void)tk_constrainLayoutAttribute:(long long)arg1 relatedBy:(long long)arg2 toItem:(id)arg3 attribute:(long long)arg4 multiplier:(double)arg5 constant:(double)arg6;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToValueOfView:(id)arg2 withMultiplier:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofView:(id)arg3 withOffset:(double)arg4;
- (id)_tk_recursiveAutolayoutTraceAtLevel:(long long)arg1 anyDescendantHasAmbiguousLayout:(bool*)arg2;
- (unsigned long long)_tl_depth;
- (id)tk_addedConstraintFotLayoutAttribute:(long long)arg1 asGreaterThanOrEqualToValueOfView:(id)arg2 withOffset:(double)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asLessThanOrEqualToValueOfView:(id)arg2 withOffset:(double)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 relatedBy:(long long)arg2 toItem:(id)arg3 attribute:(long long)arg4 multiplier:(double)arg5 constant:(double)arg6;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofView:(id)arg3 withMultiplier:(double)arg4;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofView:(id)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToValueOfView:(id)arg2 withOffset:(double)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToConstant:(double)arg2;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofView:(id)arg3 withMultiplier:(double)arg4;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToValueOfView:(id)arg2 withMultiplier:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asLessThanOrEqualToValueOfView:(id)arg2 withOffset:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asGreaterThanOrEqualToValueOfView:(id)arg2 withOffset:(double)arg3;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofView:(id)arg3;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToValueOfView:(id)arg2;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToConstant:(double)arg2;
- (id)tk_addedConstraintForLayoutAttribute:(long long)arg1 asEqualToLayoutAttribute:(long long)arg2 ofView:(id)arg3 withOffset:(double)arg4;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToValueOfView:(id)arg2;
- (void)tk_constrainLayoutAttribute:(long long)arg1 asEqualToValueOfView:(id)arg2 withOffset:(double)arg3;
- (id)tk_firstCommonAncestorWithView:(id)arg1;

@end

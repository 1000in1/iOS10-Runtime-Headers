/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/Frameworks/UIKit.framework/UIKit
 */

@class UIScreen, NSArray, UIScreenMode, UISoftwareDimmingWindow, NSDictionary;

@interface UIScreen : NSObject  {
    id _display;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _bounds;
    float _scale;
    float _horizontalScale;
    int _userInterfaceIdiom;
    NSDictionary *_capabilities;
    int _workspaceCapableScreenType;
    struct { 
        unsigned int bitsPerComponent : 4; 
        unsigned int initialized : 1; 
        unsigned int connected : 1; 
        unsigned int overscanCompensation : 2; 
        unsigned int hasShownWindows : 1; 
        unsigned int canAccessDisplay : 1; 
        unsigned int canAccessDisplayValid : 1; 
    } _screenFlags;
    BOOL _wantsSoftwareDimming;
    UISoftwareDimmingWindow *_softwareDimmingWindow;
    int _lastNotifiedBacklightLevel;
}

@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } bounds;
@property(readonly) struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; } applicationFrame;
@property(readonly) float scale;
@property(readonly) NSArray * availableModes;
@property(readonly) UIScreenMode * preferredMode;
@property(retain) UIScreenMode * currentMode;
@property int overscanCompensation;
@property(readonly) UIScreen * mirroredScreen;
@property float brightness;
@property BOOL wantsSoftwareDimming;
@property(setter=_setSoftwareDimmingWindow:,retain) UISoftwareDimmingWindow * _softwareDimmingWindow;
@property(setter=_setLastNotifiedBacklightLevel:) int _lastNotifiedBacklightLevel;
@property(getter=_workspaceCapableScreenType,setter=_setWorkspaceCapableScreenType:) int workspaceCapableScreenType;

+ (id)mainScreen;
+ (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 toView:(id)arg2;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 fromView:(id)arg2;
+ (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toView:(id)arg2;
+ (struct CGPoint { float x1; float x2; })convertPoint:(struct CGPoint { float x1; float x2; })arg1 fromView:(id)arg2;
+ (void)initialize;
+ (id)_screenWithIntegerDisplayID:(unsigned int)arg1;
+ (void)_videoOutSettingsChanged;
+ (BOOL)_shouldDisableJail;
+ (id)_screenWithDisplayID:(id)arg1;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformForScreenOriginRotation:(float)arg1;
+ (id)_screenWithDisplayName:(id)arg1;
+ (id)screens;
+ (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })transformToRotateScreen:(float)arg1;
+ (void)_prepareScreensForAppResume;
+ (id)_workspaceCapableScreens;

- (id)currentMode;
- (id)displayLinkWithTarget:(id)arg1 selector:(SEL)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)dealloc;
- (id)description;
- (void)setWantsSoftwareDimming:(BOOL)arg1;
- (BOOL)wantsSoftwareDimming;
- (void)_setWorkspaceCapableScreenType:(int)arg1;
- (id)_snapshotExcludingWindows:(id)arg1 withRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (float)brightness;
- (void)setBrightness:(float)arg1;
- (void)_setCapability:(id)arg1 forKey:(id)arg2;
- (void)setOverscanCompensation:(int)arg1;
- (int)overscanCompensation;
- (int)screenType;
- (void)setBitsPerComponent:(int)arg1;
- (double)_refreshRate;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_boundsInPixels;
- (BOOL)_isRotatable;
- (id)_lazySoftwareDimmingWindow;
- (float)rawBrightnessForBacklightLevel:(float)arg1;
- (BOOL)_supportsBrightness;
- (void)_postBrightnessDidChangeNotificationIfAppropriate;
- (void)_setLastNotifiedBacklightLevel:(int)arg1;
- (int)_lastNotifiedBacklightLevel;
- (id)_softwareDimmingWindow;
- (id)_capabilities;
- (void)_setUserInterfaceIdiom:(int)arg1;
- (void)_updateCapabilities;
- (void)_updateUserInterfaceIdiom;
- (void)_setWantsFocus:(BOOL)arg1;
- (void)setCurrentMode:(id)arg1;
- (id)preferredMode;
- (BOOL)_hasWindows;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_applicationFrameForInterfaceOrientation:(int)arg1;
- (void)_updateWorkspaceCapableScreenType;
- (BOOL)_hasStatusBar;
- (BOOL)_isOverscanned;
- (BOOL)_overscanAdjustmentNeedsUpdate;
- (void)_disconnectScreen;
- (void)_setSoftwareDimmingWindow:(id)arg1;
- (void)_endObservingBacklightLevelNotifications;
- (void)_requestFocusIfNecessary;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_beginObservingBacklightLevelNotifications;
- (void)_connectScreen;
- (BOOL)_isExternal;
- (void)_updateOverscanCompensationAllowingBackgroundUpdate:(BOOL)arg1;
- (id)_displayID;
- (BOOL)_isWorkspaceCapable;
- (id)availableModes;
- (id)initWithDisplay:(id)arg1;
- (id)_capabilityForKey:(id)arg1;
- (id)mirroredScreen;
- (id)snapshot;
- (int)_imageOrientation;
- (void)_prepareForWindow;
- (id)_name;
- (struct UIEdgeInsets { float x1; float x2; float x3; float x4; })_jailedBoundsEdgeInsets;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_realDisplayBounds;
- (float)_horizontalPixelScale;
- (float)_rotation;
- (int)bitsPerComponent;
- (float)_pointsPerInch;
- (float)_scale;
- (BOOL)_areBoundsJailed;
- (unsigned int)_integerDisplayID;
- (void)_setScale:(float)arg1;
- (void)_computeMetrics;
- (int)_workspaceCapableScreenType;
- (BOOL)_isMainScreen;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })applicationFrame;
- (int)_userInterfaceIdiom;
- (float)scale;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;

@end

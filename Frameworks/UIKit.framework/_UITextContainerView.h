/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/UIKit.framework/UIKit
 */

@class NSString, NSDictionary, NSTextContainer, NSTextStorage, NSLayoutManager;

@interface _UITextContainerView : UIView <NSUITextViewCommonMethods> {
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _textContainerInset;
    struct CGPoint { 
        double x; 
        double y; 
    } _textContainerOrigin;
    struct CGSize { 
        double width; 
        double height; 
    } _minSize;
    struct CGSize { 
        double width; 
        double height; 
    } _maxSize;
    NSTextContainer *_textContainer;
    NSDictionary *_linkTextAttributes;
    struct { 
        unsigned int textContainerOriginInvalid : 1; 
        unsigned int verticalLayout : 2; 
        unsigned int horizontallyResizable : 1; 
        unsigned int verticallyResizable : 1; 
    } _tcvFlags;
}

@property NSTextContainer * textContainer;
@property(readonly) NSTextStorage * textStorage;
@property(readonly) NSLayoutManager * layoutManager;
@property struct UIEdgeInsets { double x1; double x2; double x3; double x4; } textContainerInset;
@property(getter=isHorizontallyResizable) bool horizontallyResizable;
@property(getter=isVerticallyResizable) bool verticallyResizable;
@property struct CGSize { double x1; double x2; } minSize;
@property struct CGSize { double x1; double x2; } maxSize;
@property(copy) NSDictionary * linkTextAttributes;
@property bool usesTiledViews;
@property long long layoutOrientation;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(copy,readonly) NSString * description;
@property(copy,readonly) NSString * debugDescription;
@property struct _NSRange { unsigned long long x1; unsigned long long x2; } markedRange;

+ (Class)layerClass;

- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTextContainer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 avoidAdditionalLayout:(bool)arg2;
- (struct CGPoint { double x1; double x2; })textContainerOrigin;
- (void)setConstrainedFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })textContainerInset;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })markedRange;
- (id)layoutManager;
- (void)updateInsertionPointStateAndRestartTimer:(bool)arg1;
- (void)invalidateTextContainerOrigin;
- (id)linkTextAttributes;
- (long long)layoutOrientation;
- (id)textStorage;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)setMaxSize:(struct CGSize { double x1; double x2; })arg1;
- (void)dealloc;
- (id)description;
- (void)_ensureLayoutCompleteToEndOfCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)isVerticallyResizable;
- (bool)_ensureLayoutCompleteForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withExtensionFactor:(double)arg2 minimumExtensionDistance:(double)arg3 repetitions:(unsigned long long)arg4;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_extendedGlyphRangeForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 maxGlyphIndex:(unsigned long long)arg2 drawingToScreen:(bool)arg3;
- (bool)_ensureLayoutCompleteForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withExtension:(bool)arg2;
- (void)_ensureMinAndMaxSizesConsistentWithBounds;
- (void)setLinkTextAttributes:(id)arg1;
- (void)setTextContainerInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setHorizontallyResizable:(bool)arg1;
- (bool)usesTiledViews;
- (void)setMinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setUsesTiledViews:(bool)arg1;
- (void)setVerticallyResizable:(bool)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (void)setLayoutOrientation:(long long)arg1;
- (id)textContainer;
- (bool)isHorizontallyResizable;
- (struct CGSize { double x1; double x2; })minSize;
- (void)_didScroll;
- (void)sizeToFit;
- (void)tintColorDidChange;
- (struct CGSize { double x1; double x2; })maxSize;

@end

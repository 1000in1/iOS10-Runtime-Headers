/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
 */

@class VCClientRelay, NSObject<VCCallSessionDelegate>, NSDictionary, NSObject<OS_dispatch_queue>, NSMutableArray, VideoAttributes, VCBitrateArbiter, VCImageAttributeRules, GKRingBuffer, VCJitterBuffer, VCTransport, GKInterfaceListener, NSData, VCWCMClient, LoopbackSocketTunnel, TimingCollection, NSObject<OS_dispatch_source>, NSNumber, AVAudioPayload, NSObject<VideoConferenceChannelQualityDelegate>, AVAudioTierPicker, LoopbackIDSTunnel, NSArray, NSMutableDictionary, AVAudioTier, NSString, NSObject<VideoConferenceRealTimeChannel>, VCCapabilities, TCPTunnelClient, NSCondition, VCCallInfo, VCSessionMessaging, VCSecureDataChannel, VCCallLinkCongestionDetector;

@interface VCCallSession : NSObject <VCSecureDataChannelDelegate, LoopbackSocketTunnelDelegate> {
    NSObject<VCCallSessionDelegate> *delegate;
    VCCallInfo *localCallInfo;
    VCCallInfo *remoteCallInfo;
    struct tagHANDLE { int x1; } *rtpHandle;
    struct tagHANDLE { int x1; } *rtpVideo;
    int numEncodedBytes;
    int numBufferBytesAvailable;
    booldidUseICE;
    struct tagCONNRESULT { 
        unsigned int dwCallID; 
        int iResultCount; 
        int iRole; 
        unsigned int dwRemoteCallID; 
        int proto; 
        int bIfRelay; 
        unsigned short wRelayServType; 
        unsigned short wChannelNumber; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbLocal; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemote; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbDst; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemoteSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRelayExt; 
        unsigned int dwRTT; 
        int bIfLocalCellularQoS; 
        int bIfRemoteCellularQoS; 
        int iLocalCellTech; 
        int iRemoteCellTech; 
        unsigned int dwCellularUniqueTag; 
        unsigned short wCellularMTU; 
        int bIfUpgrade; 
        int bIfPrimary; 
        int bIfReplaceOnly; 
        struct tagCONNRESULT {} *next; 
    } connectionResult;
    struct tagCONNRESULT { 
        unsigned int dwCallID; 
        int iResultCount; 
        int iRole; 
        unsigned int dwRemoteCallID; 
        int proto; 
        int bIfRelay; 
        unsigned short wRelayServType; 
        unsigned short wChannelNumber; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbLocal; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemote; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbDst; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemoteSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRelayExt; 
        unsigned int dwRTT; 
        int bIfLocalCellularQoS; 
        int bIfRemoteCellularQoS; 
        int iLocalCellTech; 
        int iRemoteCellTech; 
        unsigned int dwCellularUniqueTag; 
        unsigned short wCellularMTU; 
        int bIfUpgrade; 
        int bIfPrimary; 
        int bIfReplaceOnly; 
        struct tagCONNRESULT {} *next; 
    } origConnectionResult;
    long long state;
    NSMutableArray *audioPayloads;
    AVAudioPayload *currentAudioPayload;
    AVAudioTierPicker *audioTierPicker_AppleCalling;
    AVAudioTierPicker *audioTierPicker_FaceTime;
    AVAudioTier *currentAudioTier;
    AVAudioTier *requestedAudioTier;
    long long videoPayload;
    long long sampleRate;
    long long samplesPerFrame;
    long long blockSize;
    float blockSeconds;
    struct tagHANDLE { int x1; } *hAUIO;
    struct tagHANDLE { int x1; } *hSIP;
    double lastReceivedAudio;
    boollaunchedShutdownThread;
    boolisAudioRunning;
    boolisWaitingForICEResult;
    booldidSend200OK;
    float remoteParticipantVolume;
    NSObject<VideoConferenceRealTimeChannel> *rtChannel;
    LoopbackSocketTunnel *tunnel;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    } mutex;
    booluseLoopback;
    boolreceivedSIPInvite;
    VCImageAttributeRules *imageAttributeRules;
    BOOL szRemoteRTPIP[48];
    int iRemoteRTPPort;
    int iRemoteRTCPPort;
    VCCapabilities *caps;
    int _deviceRole;
    struct tagHANDLE { int x1; } *hMediaQueue;
    struct tagHANDLE { int x1; } *hAFRC;
    GKRingBuffer *ringBuf;
    unsigned int lastReceived;
    char *bundleBuffer;
    int bundledPackets;
    int packetsPerBundle;
    unsigned int bundleTimestamp;
    int bundlePayload;
    int canUseSpecialAACBundle;
    int preferredAudioCodec;
    int audioTxBitrate;
    int audioHeaderSize;
    unsigned int afrcBitrate;
    double audioInterval;
    booluseSBR;
    booluseControlByte;
    booluseUEP;
    NSDictionary *_allPayloadsLocalFeaturesString;
    NSMutableDictionary *featuresListStringDict;
    unsigned char inputMeter;
    boolaudioIsPaused;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    } pauseLock;
    NSObject<OS_dispatch_queue> *videoQueue;
    NSArray *mutedPeers;
    int bandwidthUpstream;
    int bandwidthDownstream;
    boolallowAudioRecording;
    int aacBlockSize;
    boolfInitialBandwidthDetection;
    int carrierBitrateCap;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    } vpioFormat;
    boolallowAudioSwitching;
    boolshouldUpdateLastReceivedPacketTimestamp;
    double lastReceivedPacketTimestamp;
    boolisRemoteMediaStalled;
    int packetsSinceStall;
    boolisAttemptingRelay;
    long long relayState;
    boolallowsRelay;
    int pendingRelayCount;
    boolinitialSecondaryRelaySetupDone;
    boolrequiresWifi;
    booluseCompressedConnectionData;
    int natType;
    unsigned int lastSentAudioSampleTime;
    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;
    TCPTunnelClient *_tcpTunnelClient;
    LoopbackIDSTunnel *_idsTunnel;
    TimingCollection *perfTimers;
    double packetLossRate;
    double timeLastCheckedNetworkConditions;
    double timeLastKnowGoodNetworkPLR;
    double timeLastKnowGoodNetworkRTT;
    double networkConditionsTimeoutInSeconds;
    NSString *peerCN;
    NSString *sessionID;
    unsigned int roundTripTime;
    float packetLateAndMissingRatio;
    float callerPreEmptiveTimeoutInSecs;
    int sampleLogCount;
    double timeSinceLastReportedNoPackets;
    double noRemotePacketsTimeout;
    booldidAttemptSIPInvite;
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    } qualityDelegateLock;
    NSObject<OS_dispatch_queue> *qualityQueue;
    NSObject<OS_dispatch_queue> *managerQueue;
    boolshouldTimeoutPackets;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    } srtpLock;
    booldidPrepareSRTP;
    booluseAFRC;
    boolisRTCPFBEnabled;
    VCCallLinkCongestionDetector *congestionDetector;
    boolshouldSendAudio;
    boolisRemoteDevice4x;
    boolisGKVoiceChat;
    void *packetThread;
    int signalStrength;
    int signalRaw;
    int signalGrade;
    boolbBWEstOperatingModeInitialized;
    boolbBWEstNewBWEstModeEnabled;
    boolbBWEstFakeLargeFrameModeEnabled;
    boolbBWEstActiveProbingSenderLog;
    struct CGSize { 
        double width; 
        double height; 
    } remoteScreenPortraitAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    } remoteScreenLandscapeAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    } remoteExpectedPortraitAspectRatio;
    struct CGSize { 
        double width; 
        double height; 
    } remoteExpectedLandscapeAspectRatio;
    boolisStarted;
    NSData *srtpKeyBytes;
    boolisInitiator;
    boolsentClientSuccessfulDidStart;
    double videoThrottlingTimeout;
    unsigned int awdCallNonce;
    VCSessionMessaging *messaging;
    boolisCurrentNetworkBad;
    boolrequestedTimeoutRelay;
    unsigned int callSessionBitrate;
    NSObject<OS_dispatch_queue> *cellTechQueue;
    NSObject<OS_dispatch_source> *cellTechChangeSource;
    VCBitrateArbiter *callSessionBitrateArbiter;
    NSObject<OS_dispatch_source> *connectionTimeoutSource;
    unsigned short maxPacketLength;
    double lastTierSwitch;
    boolaudioTierHysteresis;
    long long initialSentBytes;
    long long initialReceivedBytes;
    VCJitterBuffer *vcJitterBuffer;
    struct tagHANDLE { int x1; } *hVideoReceiver;
    struct tagHANDLE { int x1; } *hVideoTransmitter;
    boolremoteSupportsVisibleRect;
    boolremoteSupportsExpectedAspectRatio;
    boolcanLocalResizePIP;
    boolcanRemoteResizePIP;
    boolreceivedFirstRemoteFrame;
    int fecMode;
    NSObject<OS_dispatch_source> *sessionHealthMonitor;
    VideoAttributes *remoteVideoAttributes;
    double lastVideoQualityNotificationUpdate;
    unsigned int remoteFrameWidth;
    unsigned int remoteFrameHeight;
    GKInterfaceListener *interfaceListener;
    VCWCMClient *vcWCMClient;
    NSCondition *connectionDataTimeoutCondVar;
    VCTransport *transport;
    struct OpaqueVTPixelTransferSession { } *hdTransferSession;
    struct __CVPixelBufferPool { } *hdBufferPool;
    struct CGSize { 
        double width; 
        double height; 
    } expectedDecodeSize;
    struct opaqueRTCReporting { } *reportingAgent;
    int reportUpdateInterval;
    int reportReportFrequency;
    boolenableAFRCDump;
    int operatingMode;
    unsigned int receivedAudioBytes;
    unsigned int sentAudioBytes;
    double lastVCLogCallbackTime;
    struct SKEStateOpaque { } *skeState;
    struct __CFData { } *secretKey;
    VCSecureDataChannel *secureDataChannel;
    VCClientRelay *_vcClientRelay;
    NSString *basebandCodecType;
    NSNumber *basebandCodecSampleRate;
    bool_didSendBasebandCodec;
    unsigned int dwRTT_ice;
    NSObject<OS_dispatch_queue> *timestampQueue;
    boolshouldSendBlackFrame;
}

@property(copy) NSString * peerCN;
@property(readonly) VCJitterBuffer * vcJitterBuffer;
@property(readonly) bool isCaller;
@property(copy) NSString * sessionID;
@property bool isStarted;
@property(retain) VCImageAttributeRules * imageAttributeRules;
@property bool shouldSendAudio;
@property unsigned int roundTripTime;
@property bool useAFRC;
@property bool isRTCPFBEnabled;
@property double packetLossRate;
@property float packetLateAndMissingRatio;
@property(readonly) double networkQuality;
@property double networkConditionsTimeoutInSeconds;
@property int signalStrength;
@property int signalRaw;
@property int signalGrade;
@property unsigned int lastSentAudioSampleTime;
@property int natType;
@property bool requiresWifi;
@property bool useCompressedConnectionData;
@property(retain) NSObject<VCCallSessionDelegate> * delegate;
@property NSObject<VideoConferenceRealTimeChannel> * rtChannel;
@property struct tagHANDLE { int x1; }* rtpHandle;
@property int numEncodedBytes;
@property int numBufferBytesAvailable;
@property struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; } connectionResult;
@property struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; } origConnectionResult;
@property unsigned short maxPacketLength;
@property long long state;
@property bool didUseICE;
@property long long videoPayload;
@property long long sampleRate;
@property(readonly) bool isAudioRunning;
@property(readonly) bool videoIsPaused;
@property(readonly) bool audioIsPaused;
@property bool isGKVoiceChat;
@property(readonly) AVAudioPayload * currentAudioPayload;
@property bool isWaitingForICEResult;
@property bool receivedSIPInvite;
@property struct tagHANDLE { int x1; }* hMediaQueue;
@property struct tagHANDLE { int x1; }* hAFRC;
@property(retain) GKRingBuffer * ringBuf;
@property unsigned int lastReceived;
@property int bundledPackets;
@property int packetsPerBundle;
@property int preferredAudioCodec;
@property(readonly) int audioTxBitrate;
@property bool useControlByte;
@property bool useUEP;
@property unsigned char inputMeter;
@property int bandwidthUpstream;
@property int bandwidthDownstream;
@property(retain) NSArray * mutedPeers;
@property NSObject<VideoConferenceChannelQualityDelegate> * qualityDelegate;
@property bool shouldTimeoutPackets;
@property(retain) NSData * srtpKeyBytes;
@property(retain) VideoAttributes * remoteVideoAttributes;
@property unsigned int remoteFrameWidth;
@property unsigned int remoteFrameHeight;
@property int operatingMode;
@property(readonly) bool isSKEOptimizationEnabled;
@property(readonly) bool isRemoteMediaStalled;
@property(retain) VCCapabilities * capabilities;
@property int deviceRole;
@property int pendingRelayCount;
@property bool initialSecondaryRelaySetupDone;
@property(retain) NSNumber * basebandCodecSampleRate;
@property(copy) NSString * basebandCodecType;
@property(readonly) int audioTierNetworkBitrate;
@property(readonly) int audioTierAudioBitrate;
@property(readonly) int audioTierPacketsPerBundle;
@property(readonly) int audioTierPayload;

+ (id)keyPathsForValuesAffectingNetworkQuality;

- (id)peerCN;
- (id)capabilities;
- (void)setCapabilities:(id)arg1;
- (void)callAlarmsWithRTPTimeStamp:(unsigned int)arg1;
- (void)processResolutionChangeToVideoRule:(id)arg1 featuresListString:(id)arg2;
- (void)updateVideoQualityNotification:(double)arg1;
- (bool)initializeVideoReceiver:(id*)arg1 reportingAgent:(struct opaqueRTCReporting { }*)arg2;
- (bool)initializeVideoTransmitter:(id*)arg1 encodeRule:(id)arg2 unpausing:(bool)arg3 reportingAgent:(struct opaqueRTCReporting { }*)arg4;
- (bool)onCaptureFrame:(struct __CVBuffer { }*)arg1 audioTS:(unsigned int)arg2 audioHT:(double)arg3 videoHT:(double)arg4 cameraBits:(unsigned char)arg5;
- (void)processBlackFrame:(struct __CVBuffer { }*)arg1;
- (void)onPlayVideo:(struct __CVBuffer { }*)arg1 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 cameraStatusBits:(unsigned char)arg3;
- (double)sessionReceivingBitrate;
- (double)sessionReceivingFramerate;
- (double)sessionTransmittingBitrate;
- (double)sessionTransmittingFramerate;
- (void)setupBasebandCodecInfoMessages;
- (void)setupHandoverCandidateChangeMessage;
- (void)setupAudioOnOffStateMessages;
- (void)setupAudioPausedHBMessages;
- (void)setupCellTechChangeMessages;
- (void)setupAudioPauseMessages;
- (void)setupVideoPauseMessages;
- (void)handleDuplication:(bool)arg1;
- (void)shouldSendBlackFrame:(bool)arg1;
- (void)adjustBitrateForConnectionType;
- (void)setupBitrateNegotation;
- (const char *)matchedFeaturesStringForPayload:(int)arg1;
- (void)doSipEndProc:(id)arg1;
- (int)interfaceForConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg1;
- (void)remotePauseDidChangeToState:(bool)arg1 forVideo:(bool)arg2;
- (unsigned int)maxBitrateForConnectionType;
- (id)createLocalFeaturesString;
- (id)retrieveRawFeaturesString;
- (id)deriveAspectRatioFLS;
- (id)createInitiateRelayDictionary;
- (void)stopLoopbackProc:(id)arg1;
- (bool)sipConnectWithError:(id*)arg1;
- (bool)setupAudioCodecWithPayload:(int)arg1;
- (unsigned int)codecBitmapForPayloads:(int*)arg1 count:(int)arg2;
- (id)addAudioPayload:(int)arg1;
- (void)setupAACELDPayload:(int)arg1;
- (void)useAudioPayload:(id)arg1 withBitrate:(unsigned int)arg2;
- (void)updateAudioTxBitrate;
- (void)useAudioTier:(id)arg1;
- (void)startAudioIOWithCompletionHandler:(id)arg1;
- (bool)setupAudioCookies;
- (bool)allocateBundleBuffer;
- (bool)setupAudioEncoders;
- (void)stopAudioIOProc:(id)arg1;
- (bool)setupCallerRTPChannelWithError:(id*)arg1;
- (bool)sendSIPInviteWithError:(id*)arg1;
- (bool)startRTPWithError:(id*)arg1;
- (bool)isValidVideoPayloadOverride:(id)arg1;
- (bool)canNegotiateVideoPayload:(int)arg1 forConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg2;
- (bool)startAFRC:(id*)arg1;
- (void)negotiateFeaturesString:(id)arg1 forPayload:(int)arg2;
- (void)getDecodePayloads:(int**)arg1 numPayloads:(int*)arg2 withPayload:(int)arg3 secondaryPayloads:(int*)arg4 numSecondaryPayloads:(int)arg5;
- (bool)chooseSecondaryPayloads:(int*)arg1 count:(int)arg2;
- (bool)choosePayload:(int*)arg1 count:(int)arg2;
- (bool)setMatchedFeaturesString:(char *)arg1 localFeaturesString:(id)arg2 remoteFeaturesString:(id)arg3;
- (id)pickFeaturesStringForPayload:(int)arg1 featuresListDict:(id)arg2 remote:(bool)arg3;
- (bool)is3GCall;
- (id)allPayloadsLocalFeaturesString;
- (bool)treatAsCellular;
- (void)getAllPayloadsForVideo:(int**)arg1 count:(int*)arg2;
- (void)getAllPayloadsForAudio:(int**)arg1 count:(int*)arg2 secondaryPayloads:(int**)arg3 secondaryCount:(int*)arg4;
- (bool)getForcedPayload:(int*)arg1;
- (void)launchDeadlineExitTimer;
- (bool)createSDP:(int*)arg1 audioPayloadCount:(int)arg2 secondaryPayloadTypes:(int*)arg3 secondaryPayloadCount:(int)arg4 videoPayloadTypes:(int*)arg5 videoPayloadCount:(int)arg6 localFeaturesList:(id)arg7 answerBandwidth:(int)arg8 maxBandwidth:(int)arg9 imageSizesSend:(struct imageTag {}**)arg10 imageSendCount:(int*)arg11 imageSizesRecv:(struct imageTag {}**)arg12 imageRecvCount:(int*)arg13 sdp:(char *)arg14 numSDPBytes:(int*)arg15 error:(id*)arg16;
- (id)getCompatibleLocalFeaturesListForPayloads:(int*)arg1 count:(int)arg2;
- (int)getAllCompatibleVideoPayloads:(int**)arg1;
- (bool)negotiateMaxBandwidth:(int*)arg1;
- (bool)setRTPPayloads:(int*)arg1 numPayloads:(int)arg2 withError:(id*)arg3;
- (bool)setRTPDestinationWithError:(id*)arg1;
- (bool)negotiatePayloads:(int**)arg1 numPayloads:(int*)arg2 withError:(id*)arg3;
- (bool)createMediaQueueHandle:(id*)arg1;
- (bool)createRTPHandles:(id*)arg1;
- (void)resetState;
- (void)disconnectWithNoRemotePackets:(long long)arg1 timeoutUsed:(double)arg2;
- (int)generateConnectionData:(char **)arg1 forCallID:(unsigned int)arg2 connectionDataSize:(int*)arg3 nonCellularCandidateTimeout:(double)arg4;
- (void)stopLoopback;
- (bool)stopAFRC:(id*)arg1;
- (bool)stopMediaQueue:(id*)arg1;
- (void)stopAudio;
- (void)disableSessionHealthMonitor;
- (void)doSipEndAction:(int)arg1 callID:(unsigned int)arg2 error:(id)arg3;
- (long long)calculateSIPEndAction:(bool)arg1 currentState:(long long)arg2 error:(id)arg3;
- (void)logIdentity:(struct __SecIdentity { }*)arg1;
- (double)iceTimeoutInSeconds:(bool)arg1;
- (void)initiateRelayRequest;
- (void)setupMessaging;
- (void)setLocalIdentityForKeyExchange;
- (void)setupDTLSDefaults;
- (void)updateQOS;
- (struct __SecIdentity { }*)retrieveIdentity;
- (int)sipCallback:(int)arg1 callID:(unsigned int)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void*)arg5 confIndex:(int*)arg6;
- (unsigned int)connectionResultCallback:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg1 didReceiveICEPacket:(bool)arg2 didUseRelay:(bool)arg3 secretKey:(struct __CFData { }*)arg4 skeResult:(int)arg5;
- (void)setupInitialSecondaryRelayWithCallbackRelayFlag:(bool)arg1 callID:(unsigned int)arg2;
- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)arg1;
- (void)enableSessionHealthMonitor;
- (void)startAudioWithCompletionHandler:(id)arg1;
- (void)notifyDelegateSessionStarted;
- (bool)shouldNotifyDelegateDidStartBeforeAudioSetup;
- (void)processSIPMessage:(char *)arg1 msgOut:(char *)arg2 optional:(void*)arg3 confIndex:(int*)arg4;
- (bool)startMediaQueue:(id*)arg1;
- (void)sendBasebandCodecMessage;
- (bool)doBandwidthDetection:(struct tagHANDLE { int x1; }*)arg1 error:(id*)arg2;
- (void)setupEncryptionWithKey:(const struct __CFData {}**)arg1 confIndex:(int*)arg2;
- (int)handleIncomingWithCallID:(unsigned int)arg1 msgIn:(const char *)arg2 msgOut:(char *)arg3 optional:(void*)arg4 confIndex:(int*)arg5 error:(id*)arg6;
- (void)connectionResultFromSIP:(struct tagSIPCallbackData { void *x1; struct tagCONNRESULT { unsigned int x_2_1_1; int x_2_1_2; int x_2_1_3; unsigned int x_2_1_4; int x_2_1_5; int x_2_1_6; unsigned short x_2_1_7; unsigned short x_2_1_8; struct tagIPPORT { int x_9_2_1; BOOL x_9_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_9_2_3; unsigned short x_9_2_4; } x_2_1_9; struct tagIPPORT { int x_10_2_1; BOOL x_10_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_10_2_3; unsigned short x_10_2_4; } x_2_1_10; struct tagIPPORT { int x_11_2_1; BOOL x_11_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_11_2_3; unsigned short x_11_2_4; } x_2_1_11; struct tagIPPORT { int x_12_2_1; BOOL x_12_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_12_2_3; unsigned short x_12_2_4; } x_2_1_12; struct tagIPPORT { int x_13_2_1; BOOL x_13_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_13_2_3; unsigned short x_13_2_4; } x_2_1_13; struct tagIPPORT { int x_14_2_1; BOOL x_14_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_14_2_3; unsigned short x_14_2_4; } x_2_1_14; unsigned int x_2_1_15; int x_2_1_16; int x_2_1_17; int x_2_1_18; int x_2_1_19; unsigned int x_2_1_20; unsigned short x_2_1_21; int x_2_1_22; int x_2_1_23; int x_2_1_24; struct tagCONNRESULT {} *x_2_1_25; } x2; int x3; }*)arg1;
- (void)inviteeICEResultTimer:(float)arg1 shouldBailIfRelay:(bool)arg2;
- (void)logConnectionType:(int)arg1;
- (void)logConnectionSuccess;
- (void)deleteIDSTunnel;
- (void)sipConnectThreadProc:(id)arg1;
- (void)setupLoopback;
- (void)wcmGetCallConfig:(unsigned int*)arg1 targetBitrate:(unsigned int*)arg2;
- (void)wcmSetCallConfig:(unsigned int)arg1 interferenceLevel:(unsigned int)arg2;
- (void)vcSecureDataChannel:(id)arg1 receivedData:(id)arg2;
- (void)setSrtpKeyBytes:(id)arg1;
- (id)srtpKeyBytes;
- (void)setInitialSecondaryRelaySetupDone:(bool)arg1;
- (bool)initialSecondaryRelaySetupDone;
- (void)setPendingRelayCount:(int)arg1;
- (int)pendingRelayCount;
- (void)setBasebandCodecType:(id)arg1;
- (void)setBasebandCodecSampleRate:(id)arg1;
- (bool)isRemoteMediaStalled;
- (int)operatingMode;
- (void)setRemoteFrameHeight:(unsigned int)arg1;
- (unsigned int)remoteFrameHeight;
- (void)setRemoteFrameWidth:(unsigned int)arg1;
- (unsigned int)remoteFrameWidth;
- (id)remoteVideoAttributes;
- (void)setIsStarted:(bool)arg1;
- (bool)shouldSendAudio;
- (void)setIsRTCPFBEnabled:(bool)arg1;
- (bool)isRTCPFBEnabled;
- (bool)useAFRC;
- (void)setShouldTimeoutPackets:(bool)arg1;
- (bool)shouldTimeoutPackets;
- (void)setPacketLateAndMissingRatio:(float)arg1;
- (float)packetLateAndMissingRatio;
- (id)currentAudioPayload;
- (void)setSignalGrade:(int)arg1;
- (int)signalGrade;
- (void)setSignalRaw:(int)arg1;
- (int)signalRaw;
- (void)setSignalStrength:(int)arg1;
- (void)setRoundTripTime:(unsigned int)arg1;
- (unsigned int)roundTripTime;
- (void)setNetworkConditionsTimeoutInSeconds:(double)arg1;
- (double)networkConditionsTimeoutInSeconds;
- (void)setPacketLossRate:(double)arg1;
- (void)setPeerCN:(id)arg1;
- (void)setLastSentAudioSampleTime:(unsigned int)arg1;
- (unsigned int)lastSentAudioSampleTime;
- (void)setNatType:(int)arg1;
- (bool)audioIsPaused;
- (void)setMutedPeers:(id)arg1;
- (id)mutedPeers;
- (void)setBandwidthDownstream:(int)arg1;
- (int)bandwidthDownstream;
- (void)setBandwidthUpstream:(int)arg1;
- (int)bandwidthUpstream;
- (void)setUseCompressedConnectionData:(bool)arg1;
- (bool)useCompressedConnectionData;
- (void)setInputMeter:(unsigned char)arg1;
- (unsigned char)inputMeter;
- (bool)useUEP;
- (bool)useControlByte;
- (void)setPreferredAudioCodec:(int)arg1;
- (int)preferredAudioCodec;
- (int)audioTxBitrate;
- (void)setBundledPackets:(int)arg1;
- (int)bundledPackets;
- (void)setLastReceived:(unsigned int)arg1;
- (unsigned int)lastReceived;
- (void)setRingBuf:(id)arg1;
- (id)ringBuf;
- (void)setHAFRC:(struct tagHANDLE { int x1; }*)arg1;
- (struct tagHANDLE { int x1; }*)hAFRC;
- (void)setHMediaQueue:(struct tagHANDLE { int x1; }*)arg1;
- (struct tagHANDLE { int x1; }*)hMediaQueue;
- (void)setNumBufferBytesAvailable:(int)arg1;
- (int)numBufferBytesAvailable;
- (void)setNumEncodedBytes:(int)arg1;
- (int)numEncodedBytes;
- (void)setRtChannel:(id)arg1;
- (id)rtChannel;
- (void)setReceivedSIPInvite:(bool)arg1;
- (bool)receivedSIPInvite;
- (void)setIsWaitingForICEResult:(bool)arg1;
- (bool)isWaitingForICEResult;
- (bool)isAudioRunning;
- (void)setVideoPayload:(long long)arg1;
- (long long)videoPayload;
- (void)setDidUseICE:(bool)arg1;
- (void)setMaxPacketLength:(unsigned short)arg1;
- (unsigned short)maxPacketLength;
- (void)setOrigConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; })arg1;
- (struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; })origConnectionResult;
- (void)setConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; })arg1;
- (struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; })connectionResult;
- (void)setRtpHandle:(struct tagHANDLE { int x1; }*)arg1;
- (struct tagHANDLE { int x1; }*)rtpHandle;
- (int)audioTierPayload;
- (int)audioTierPacketsPerBundle;
- (int)audioTierAudioBitrate;
- (int)audioTierNetworkBitrate;
- (bool)isSKEOptimizationEnabled;
- (id)callMetadata;
- (id)localParticipantID;
- (id)remoteParticipantID;
- (void)rcvdFirstRemoteFrame;
- (void)processCancelRelayRequest:(id)arg1 didOriginateRequest:(bool)arg2;
- (void)processRelayUpdateDict:(id)arg1 didOriginateRequest:(bool)arg2;
- (void)processRelayRequestResponseDict:(id)arg1 didOriginateRequest:(bool)arg2;
- (bool)stillWantsToRelay;
- (bool)setPauseVideo:(bool)arg1 error:(id*)arg2;
- (bool)setPauseAudio:(bool)arg1 error:(id*)arg2;
- (bool)isGKVoiceChat;
- (void)setIsGKVoiceChat:(bool)arg1;
- (void)setPacketsPerBundle:(int)arg1;
- (void)setShouldSendAudio:(bool)arg1;
- (id)inviteDataForParticipantID:(id)arg1 callID:(unsigned int*)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id*)arg5;
- (int)rtcpDescriptor;
- (bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingInviteData:(id)arg3 isCaller:(bool)arg4 capabilities:(id)arg5 idsSocket:(int)arg6 error:(id*)arg7;
- (int)sendAudioHeartbeat:(unsigned int)arg1;
- (void)sendThreadedAudio:(struct tagEncodedAudio { unsigned int x1; float x2; int x3; unsigned char x4[16]; unsigned char x5; }*)arg1 buffer:(char *)arg2 bufferSize:(unsigned int)arg3;
- (int)encodeAudio:(void*)arg1 numInputBytes:(int)arg2 outputBytes:(void*)arg3 numOutputBytes:(int)arg4 withPayload:(int*)arg5;
- (void)timeoutUnfinishedConnection;
- (bool)handshakeComplete:(struct SSLContext { }*)arg1 withError:(struct __CFError {}**)arg2;
- (void)updateLastReceivedPacket:(bool)arg1;
- (void)updateLastReceivedAudioTime;
- (id)qualityDelegate;
- (void)setQualityDelegate:(id)arg1;
- (void)handlePrimaryConnChange:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg1 oldResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg2;
- (void)resetVideoRulesForConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg1 interface:(int)arg2 videoReportingDictionary:(id)arg3;
- (id)getVideoRuleForVideoMode:(unsigned long long)arg1 interface:(int)arg2;
- (bool)chooseVideoPayloadForInterface:(int)arg1 connectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg2;
- (int)applyFeaturesListStringForPayload:(int)arg1;
- (id)getFeaturesListStringForPayload:(int)arg1;
- (void)remoteCellTechStateUpdate:(int)arg1 maxRemoteBitrate:(unsigned int)arg2;
- (void)handleCellTechChange:(int)arg1 cellularMaxPktLen:(unsigned short)arg2;
- (bool)isBetterForIncomingSIPThanOtherSession:(id)arg1 result:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg2;
- (void)updateVideoQualityStatus:(double)arg1 bitrate:(double)arg2 time:(double)arg3 isRemote:(bool)arg4;
- (void)setUseAFRC:(bool)arg1;
- (void)startAWDStats;
- (void)setOperatingMode:(int)arg1;
- (id)createInitiateRelayDictionaryForCall:(unsigned int)arg1 primaryConnection:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg2;
- (int)packetsPerBundle;
- (void)enableAudio:(bool)arg1;
- (bool)pullAudioSamples:(char *)arg1 timestamp:(unsigned int*)arg2 byteCount:(int*)arg3 sampleCount:(int*)arg4 sampleRate:(int*)arg5 receivedBytes:(int*)arg6 lastReceivedAudioTime:(double*)arg7 padding:(char *)arg8 paddingLength:(char *)arg9 silence:(int*)arg10;
- (id)vcJitterBuffer;
- (void)sendData:(id)arg1 encrypted:(bool)arg2;
- (id)createRelayUpdateDictionary:(id)arg1;
- (void)resetICETimeoutToLongTimeout;
- (bool)createTCPTunnelForParticipantID:(id)arg1 relayDictionary:(id)arg2 didOriginateRequest:(bool)arg3 relayType:(unsigned char)arg4 error:(id*)arg5;
- (void)deleteTCPTunnel;
- (bool)allowAdditionalConnection:(unsigned int)arg1;
- (bool)setPauseVideo:(bool)arg1 force:(bool)arg2 error:(id*)arg3;
- (bool)stopVideo:(bool)arg1 error:(id*)arg2;
- (bool)startVideo:(bool)arg1 error:(id*)arg2;
- (bool)setPauseAudio:(bool)arg1 force:(bool)arg2 error:(id*)arg3;
- (void)stopAudioIO;
- (void)startPausedHeartbeat;
- (void)stopPausedHeartbeat;
- (void)processRemoteIPChange:(char *)arg1 dataLength:(int)arg2 callID:(unsigned int)arg3 remoteCandidateVersion:(unsigned short)arg4;
- (id)createSKEBlobWithRemoteSKEBlob:(id)arg1;
- (bool)createConnectionDataForParticipantID:(id)arg1 pCallID:(unsigned int*)arg2 nonCellularCandidateTimeout:(double)arg3 error:(id*)arg4 useRelay:(bool)arg5;
- (void)initWithRelevantStorebagEntries;
- (void)notifyDelegateAndEndCall:(long long)arg1 didRemoteCancel:(bool)arg2 error:(id)arg3;
- (void)cleanupMedia;
- (void)reportDashboardEndResult;
- (bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingBlob:(id)arg3 isCaller:(bool)arg4 capabilities:(id)arg5 useRelay:(bool)arg6 error:(id*)arg7;
- (bool)createClientRelayWithIDSSocket:(int)arg1 error:(id*)arg2;
- (bool)createIDSTunnelWithSocket:(int)arg1 error:(id*)arg2;
- (void)setupNonConnectionCheckCall;
- (void)setupPeerInfo:(id)arg1 usingInviteData:(id)arg2 isCaller:(bool)arg3 capabilities:(id)arg4;
- (int)deviceRole;
- (bool)bundleAudio:(void*)arg1 withPayload:(int)arg2 numInputBytes:(int)arg3;
- (int)sendAudioBundle:(bool)arg1 atTimeStamp:(unsigned int)arg2 nextInterval:(float)arg3;
- (float)nextAudioInterval:(int)arg1;
- (bool)chooseAudioNetworkBitrate;
- (int)bundleAndSendSamples:(char *)arg1 numEncodedBytes:(int)arg2 withPayload:(int)arg3 timeStamp:(unsigned int)arg4 bufferedSamples:(int)arg5 hasNewSamples:(bool)arg6;
- (void)cancelConnectionTimeoutTimer;
- (void)setupConnectionTimeoutTimerWithErrorCode:(int)arg1 detailedCode:(int)arg2 description:(id)arg3 reason:(id)arg4;
- (void)setRemoteVideoAttributes:(id)arg1;
- (void)resetLoopback;
- (void)sendTimings;
- (void)updateLastReceivedPacketWithTimestamp:(double)arg1;
- (void)updateRemoteMediaStallState:(double)arg1;
- (void)updateNetworkCheckHint:(double)arg1;
- (void)logDetailedNetworkInformation;
- (void)disconnectWithNoRemotePackets:(long long)arg1;
- (bool)setupAudioTierPicker;
- (void)setupAudioHeaderSize;
- (void)setupSecondaryRelayForCall:(unsigned int)arg1 callerRequired:(id)arg2;
- (void)notifyDelegateToCancelRelay;
- (void)getVideoSettings:(int)arg1 forInterface:(int)arg2 width:(int*)arg3 height:(int*)arg4 framerate:(int*)arg5 bitRate:(int*)arg6;
- (bool)disconnect:(id)arg1 didRemoteCancel:(bool)arg2;
- (bool)chooseVideoPayload:(int*)arg1 count:(int)arg2 forConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg3;
- (void)setUseUEP:(bool)arg1;
- (void)setUseControlByte:(bool)arg1;
- (int)Conference_SetBWEstMode:(bool)arg1 bFakeLargeFrameMode:(bool)arg2;
- (id)newRemoteScreenAttributesForOrientation:(int)arg1;
- (bool)findFeatureString:(const char *)arg1 value:(char *)arg2 valueLength:(unsigned long long)arg3 withPrefix:(const char *)arg4;
- (unsigned int)audioCapForConnectionResult:(const struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg1;
- (bool)evaluateEnableRRx:(int*)arg1;
- (void)updateMaxPktLength:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg1;
- (bool)isCallOngoing;
- (bool)didUseICE;
- (bool)resultMatchesIPInRemoteConnectionData:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; int x22; int x23; int x24; struct tagCONNRESULT {} *x25; }*)arg1;
- (bool)videoIsPaused;
- (bool)getRealAudioTxBitrate:(unsigned short*)arg1 RxBitrate:(unsigned short*)arg2 duplication:(unsigned short*)arg3;
- (void)setupTransport;
- (id)basebandCodecSampleRate;
- (id)basebandCodecType;
- (unsigned int)videoRTPID;
- (unsigned int)audioRTPID;
- (void)setImageAttributeRules:(id)arg1;
- (id)imageAttributeRules;
- (void)loopbackSocketTunnel:(id)arg1 receivedData:(id)arg2 from:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg3;
- (void)networkStateDidChange;
- (void)sendARPLData:(id)arg1 toCallID:(unsigned int)arg2;
- (int)natType;
- (double)networkQuality;
- (void)processRemoteIPChange:(id)arg1 callID:(unsigned int)arg2;
- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;
- (void)setDeviceRole:(int)arg1;
- (void)setRequiresWifi:(bool)arg1;
- (bool)requiresWifi;
- (unsigned int)connectionType;
- (void)setSampleRate:(long long)arg1;
- (double)packetLossRate;
- (unsigned int)callID;
- (int)signalStrength;
- (long long)sampleRate;
- (bool)isCaller;
- (id)init;
- (void)setDelegate:(id)arg1;
- (void)unlock;
- (void)lock;
- (id)sessionID;
- (void)setSessionID:(id)arg1;
- (id)delegate;
- (void)setState:(long long)arg1;
- (long long)state;
- (void)dealloc;
- (id)description;
- (bool)isStarted;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
 */

@class NSObject<VideoConferenceRealTimeChannel>, VCCallSession, GKNATObserver, NSObject<VideoConferenceSpeakingDelegate>, VideoConferenceManager, NSObject<VideoConferenceDelegate>, NSDictionary, NSObject<OS_dispatch_queue>, NSArray, VCVideoRule, NSString, AVAudioManager, NSObject<VideoConferenceChannelQualityDelegate>, NSMutableDictionary;

@interface VideoConference : NSObject <VCCallSessionDelegate, GKNATObserverDelegate> {
    NSObject<VideoConferenceDelegate> *delegate;
    VideoConferenceManager *manager;
    AVAudioManager *audioManager;
    struct _opaque_pthread_rwlock_t { 
        long __sig; 
        BOOL __opaque[124]; 
    } stateLock;
    NSMutableDictionary *sessionDict;
    NSArray *sessionArray;
    BOOL outputMeteringEnabled;
    BOOL inputMeteringEnabled;
    float outputMeterLevel;
    float inputMeterLevel;
    BOOL microphoneMuted;
    NSObject<VideoConferenceRealTimeChannel> *rtChannel;
    NSObject<OS_dispatch_queue> *audioManagerQueue;
    void *remoteVideoLayer;
    void *remoteVideoBackLayer;
    int remoteVideoSlot;
    int remoteVideoSlotBack;
    struct tagHANDLE { int x1; } *hVR;
    struct tagHANDLE { int x1; } *hVT;
    BOOL isRecvVideo;
    double dAudioHostTime;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } xRemoteLayer;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } xAudioTS;
    unsigned int dwAudioTS;
    BOOL forceNoICE;
    BOOL useViceroyBlobFormat;
    int chatMode;
    BOOL isFocus;
    NSString *currentFocus;
    VCCallSession *currentFocusSession;
    BOOL hasMic;
    float conferenceVolume;
    NSArray *mutedPeers;
    NSArray *connectedPeers;
    unsigned int talkingPeersLimit;
    unsigned char speakingArray[16];
    NSObject<VideoConferenceSpeakingDelegate> *speakingDelegate;
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
    float longTerm;
    float shortTerm;
    BOOL isTalking;
    unsigned int talkTime;
    int packetsPerBundle;
    unsigned int recvRTPTimeStamp;
    BOOL disableVAD;
    BOOL isAttemptingRelay;
    BOOL requiresWifi;
    unsigned int preferredCodec;
    int upstreamBandwidth;
    int downstreamBandwidth;
    BOOL useAFRC;
    BOOL isGKVoiceChat;
    BOOL isUsingSuppression;
    BOOL shouldTimeoutPackets;
    unsigned char requestedCameraType;
    BOOL useCompressedConnectionData;
    NSDictionary *natTypeDictionary;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } natMutex;
    struct _opaque_pthread_cond_t { 
        long __sig; 
        BOOL __opaque[24]; 
    } natCond;
    unsigned int lastSentAudioSampleTime;
    double lastReceivedAudioTimestamp;
    int audioTimeStampDelta;
    GKNATObserver *natObserver;
    unsigned long mostRecentStartedCall;
    unsigned long lastActiveCall;
    BOOL bweOperatingModeInitialized;
    BOOL useNewBWEMode;
    BOOL useActiveProbingSenderLog;
    BOOL useFakeLargeFrameMode;
    BOOL shouldPrioritizeParticipantIDForSIPInvite;
    BOOL shouldResumeAudio;
    BOOL shouldResumeVideo;
    NSObject<OS_dispatch_queue> *delegateNotificationQueue;
    int conferenceOperatingMode;
    int localFrameWidth;
    int localFrameHeight;
    VCVideoRule *conferenceCaptureRule;
}

@property BOOL useCompressedConnectionData;
@property(getter=isSpeakerPhoneEnabled) BOOL enableSpeakerPhone;
@property BOOL requiresWifi;
@property BOOL shouldPrioritizeParticipantIDForSIPInvite;
@property NSObject<VideoConferenceDelegate> * delegate;
@property BOOL useViceroyBlobFormat;
@property(getter=isMicrophoneMuted) BOOL microphoneMuted;
@property(getter=isOutputMeteringEnabled) BOOL outputMeteringEnabled;
@property(getter=isInputMeteringEnabled) BOOL inputMeteringEnabled;
@property(readonly) float outputMeterLevel;
@property(readonly) float inputMeterLevel;
@property(setter=setRTChannel:) NSObject<VideoConferenceRealTimeChannel> * rtChannel;
@property int chatMode;
@property BOOL isFocus;
@property(copy) NSString * currentFocus;
@property int packetsPerBundle;
@property BOOL hasMic;
@property float conferenceVolume;
@property NSObject<VideoConferenceSpeakingDelegate> * speakingDelegate;
@property NSObject<VideoConferenceChannelQualityDelegate> * qualityDelegate;
@property unsigned int talkingPeersLimit;
@property BOOL disableVAD;
@property BOOL shouldTimeoutPackets;
@property int upstreamBandwidth;
@property int downstreamBandwidth;
@property void* remoteVideoLayer;
@property void* remoteVideoBackLayer;
@property(readonly) int localFrameHeight;
@property(readonly) int localFrameWidth;
@property unsigned int preferredCodec;
@property BOOL isUsingSuppression;
@property BOOL isGKVoiceChat;
@property(readonly) VCVideoRule * conferenceCaptureRule;
@property unsigned long lastActiveCall;


- (void)avConferencePreviewDidStopCapture;
- (void)avConferencePreviewError:(id)arg1;
- (bool)onCaptureFrame:(struct __CVBuffer { }*)arg1 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 cameraStatusBits:(unsigned char)arg3;
- (bool)initiateResolutionChangeToWidth:(int)arg1 height:(int)arg2 rate:(int)arg3;
- (bool)stopVideoIO:(BOOL)arg1 error:(id*)arg2;
- (bool)session:(id)arg1 startVideoIO:(id*)arg2 captureRule:(id)arg3 isUnpausing:(BOOL)arg4;
- (void)session:(id)arg1 didSeeThermalChange:(double)arg2;
- (bool)session:(id)arg1 receivedRemoteFrame:(struct __CVBuffer { }*)arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 withScreenAttributes:(id)arg4 videoAttributes:(id)arg5 isFirstFrame:(BOOL)arg6;
- (void)session:(id)arg1 didChangeVideoRule:(id)arg2;
- (BOOL)setPauseVideo:(BOOL)arg1;
- (BOOL)setPauseAudio:(BOOL)arg1;
- (void)defaultCleanupSession:(id)arg1;
- (unsigned int)connectionResultCallbackForCallID:(unsigned long)arg1 result:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; struct tagCONNRESULT {} *x22; }*)arg2 didReceiveICEPacket:(BOOL)arg3 didUseRelay:(BOOL)arg4;
- (void)cleanupSession:(id)arg1 didRemoteCancel:(BOOL)arg2;
- (void)cleanupSession:(id)arg1 withDelay:(unsigned int)arg2;
- (void)threadSafeCleanupSession:(id)arg1;
- (void)cleanupProc:(id)arg1;
- (void)markUnfinishedSessions;
- (BOOL)matchesIncomingConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; struct tagCONNRESULT {} *x22; }*)arg1;
- (BOOL)hasSessionWaitingForSIPInvite;
- (BOOL)matchesParticipantID:(id)arg1;
- (unsigned long)callIDForOpenSessionWithParticipantID:(id)arg1;
- (BOOL)matchesCallID:(unsigned long)arg1;
- (int)sipCallbackNotification:(int)arg1 callID:(unsigned long)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void*)arg5 confIndex:(int*)arg6;
- (id)loopbackSessionWaitingForSIPInvite;
- (id)sessionForIncomingConnectionResult:(struct tagCONNRESULT { unsigned int x1; int x2; int x3; unsigned int x4; int x5; int x6; unsigned short x7; unsigned short x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; struct tagIPPORT { int x_13_1_1; BOOL x_13_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_13_1_3; unsigned short x_13_1_4; } x13; struct tagIPPORT { int x_14_1_1; BOOL x_14_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_14_1_3; unsigned short x_14_1_4; } x14; unsigned int x15; int x16; int x17; int x18; int x19; unsigned int x20; unsigned short x21; struct tagCONNRESULT {} *x22; }*)arg1;
- (id)sessionForIncomingParticipantID:(id)arg1;
- (bool)onPlaySound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 averagePower:(float)arg5;
- (bool)onCaptureSound:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 bufferedSamples:(int)arg6 hostTime:(double)arg7 averagePower:(float)arg8 voiceActivity:(unsigned long)arg9;
- (float)powerIntToFloat:(unsigned char)arg1;
- (void)updateMeters:(unsigned short)arg1;
- (void)updateMeter:(unsigned char)arg1 forParticipant:(id)arg2 atIndex:(unsigned int)arg3;
- (int)pullDecodedMeshMode:(char *)arg1 timestamp:(unsigned int)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (int)pullDecodedAsFocusClient:(char *)arg1 timestamp:(unsigned int)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (int)pullDecodedAsFocus:(char *)arg1 timestamp:(unsigned int)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (void)calculateMixingArrays:(unsigned int*)arg1 talkingMask:(unsigned int)arg2;
- (unsigned int)calculateTalkingMaskAtTimeStamp:(unsigned int)arg1 samples:(char *)arg2 numBytes:(int)arg3 numSamples:(int)arg4;
- (unsigned int)pruneQuietestPeers:(unsigned int)arg1 talking:(unsigned int)arg2 mask:(unsigned int)arg3 meters:(char *)arg4;
- (BOOL)recvSamplesForSession:(id)arg1 samples:(char *)arg2 numBytes:(int)arg3 numSamples:(int)arg4 storeTimestamp:(unsigned int)arg5;
- (int)captureMeshMode:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 bufferedSamples:(int)arg5 hostTime:(double)arg6;
- (int)captureAsFocusClient:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 averagePower:(unsigned char)arg5;
- (int)captureAsFocus:(char *)arg1 numBytes:(int)arg2 numSamples:(int)arg3 timeStamp:(unsigned int)arg4 timeStampDelta:(int)arg5 averagePower:(unsigned char)arg6;
- (unsigned char)powerFloatToInt:(float)arg1;
- (BOOL)updateSpeaking:(unsigned long)arg1 timeStamp:(unsigned int)arg2;
- (int)tryrdlock;
- (id)conferenceCaptureRule;
- (BOOL)shouldPrioritizeParticipantIDForSIPInvite;
- (void)setDisableVAD:(BOOL)arg1;
- (BOOL)disableVAD;
- (BOOL)isUsingSuppression;
- (id)speakingDelegate;
- (void)setDownstreamBandwidth:(int)arg1;
- (int)downstreamBandwidth;
- (void)setUpstreamBandwidth:(int)arg1;
- (int)upstreamBandwidth;
- (unsigned int)preferredCodec;
- (int)chatMode;
- (BOOL)hasMic;
- (void)setHasMic:(BOOL)arg1;
- (int)remoteVideoSlot:(BOOL)arg1;
- (void)createVideoImageQueues;
- (void)setCallReportProtobuf:(unsigned long)arg1 withProtobufData:(id)arg2 forMetricID:(int)arg3;
- (id)connectionBlobForParticipantID:(id)arg1 callID:(unsigned int*)arg2 error:(id*)arg3;
- (void)connectionBlobForParticipantID:(id)arg1 callID:(unsigned long)arg2 block:(id)arg3 queue:(id)arg4 caller:(id)arg5;
- (id)inviteDataForParticipantID:(id)arg1 callID:(unsigned int*)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id*)arg5;
- (double)packetLossRateForCallID:(unsigned long)arg1;
- (id)openSessionForParticipant:(id)arg1;
- (void)stopCallID:(unsigned long)arg1 didRemoteCancel:(BOOL)arg2 error:(id)arg3;
- (id)sessionForParticipantID:(id)arg1;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(unsigned long)arg2 usingInviteData:(id)arg3 isCaller:(BOOL)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(BOOL)arg6 capabilities:(id)arg7 error:(id*)arg8;
- (void)notifyDelegateOfLocalVariablesChange;
- (id)connectionBlobForParticipantID:(id)arg1 callID:(unsigned int*)arg2 nonCellularCandidateTimeout:(double)arg3 error:(id*)arg4;
- (void)setIsUsingSuppression:(BOOL)arg1;
- (void)rdlock;
- (void)wrlock;
- (int)natTypeForCallSessions:(const char *)arg1;
- (id)newSession;
- (void)cleanupQueues;
- (void)session:(id)arg1 didReceiveARPLData:(id)arg2 fromCallID:(unsigned long)arg3;
- (void)setBWEOptions:(BOOL)arg1 UseNewBWEMode:(BOOL)arg2 FakeLargeFrameMode:(BOOL)arg3 ProbingSenderLog:(BOOL)arg4;
- (void)session:(id)arg1 inititiateRelayRequest:(id)arg2;
- (bool)didDetectBandwidth:(BOOL)arg1 upstreamBandwidth:(int)arg2 downstreamBandwidth:(int)arg3;
- (void)session:(id)arg1 didChangeRemoteScreenAttributes:(id)arg2;
- (void)remoteAudioDidPause:(BOOL)arg1 callID:(unsigned long)arg2;
- (void)remoteVideoDidPause:(BOOL)arg1 callID:(unsigned long)arg2;
- (void)session:(id)arg1 didStopWithDelay:(int)arg2 error:(id)arg3;
- (void)session:(id)arg1 didStopWithError:(id)arg2;
- (void)session:(id)arg1 didStart:(BOOL)arg2 connectionType:(unsigned int)arg3 localUseCell:(unsigned int)arg4 remoteUseCell:(unsigned int)arg5 error:(id)arg6;
- (void)session:(id)arg1 withCallID:(unsigned long)arg2 networkHint:(BOOL)arg3;
- (void)session:(id)arg1 cancelRelayRequest:(id)arg2;
- (void)session:(id)arg1 sendIPChangeRequest:(id)arg2 withCallID:(unsigned long)arg3;
- (void)setShouldTimeoutPackets:(BOOL)arg1;
- (BOOL)shouldTimeoutPackets;
- (void)setUseCompressedConnectionData:(BOOL)arg1;
- (BOOL)useCompressedConnectionData;
- (id)rtChannel;
- (BOOL)isGKVoiceChat;
- (void)setIsGKVoiceChat:(BOOL)arg1;
- (int)packetsPerBundle;
- (void)setPacketsPerBundle:(int)arg1;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(unsigned long)arg2 usingBlob:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 error:(id*)arg6;
- (id)qualityDelegate;
- (void)setQualityDelegate:(id)arg1;
- (void)handleCellTechChange:(int)arg1 cellularMaxPktLen:(unsigned short)arg2;
- (void)session:(id)arg1 sendRelayResponse:(id)arg2;
- (void)didChangeLocalVariablesForSession:(id)arg1;
- (void)session:(id)arg1 packMeters:(char *)arg2 withLength:(char *)arg3;
- (void)session:(id)arg1 receivedNoPacketsForSeconds:(double)arg2;
- (void)session:(id)arg1 remoteMediaStalled:(BOOL)arg2;
- (void)session:(id)arg1 withCallID:(unsigned long)arg2 videoIsDegraded:(BOOL)arg3 isRemote:(BOOL)arg4;
- (void)getNSError:(id*)arg1 code:(int)arg2 detailedCode:(int)arg3 filePath:(id)arg4 description:(id)arg5 reason:(id)arg6;
- (void)getNSError:(id*)arg1 code:(int)arg2 detailedCode:(int)arg3 returnCode:(int)arg4 filePath:(id)arg5 description:(id)arg6 reason:(id)arg7;
- (void)NATTypeDictionaryUpdated:(id)arg1;
- (int)conferenceOperatingMode;
- (BOOL)getIsAudioPaused:(BOOL*)arg1 callID:(unsigned long)arg2 error:(id*)arg3;
- (void)setInputMeteringEnabled:(BOOL)arg1;
- (void)sendARPLData:(id)arg1 toCallID:(unsigned long)arg2;
- (void)processRelayUpdate:(unsigned long)arg1 updateDict:(id)arg2 didOriginateRequest:(BOOL)arg3;
- (void)processRelayRequestResponse:(unsigned long)arg1 responseDict:(id)arg2 didOriginateRequest:(BOOL)arg3;
- (void)setConferenceOperatingMode:(int)arg1;
- (BOOL)setPauseVideo:(BOOL)arg1 callID:(unsigned long)arg2 error:(id*)arg3;
- (BOOL)setPauseAudio:(BOOL)arg1 callID:(unsigned long)arg2 error:(id*)arg3;
- (int)natType;
- (BOOL)isSpeakerPhoneEnabled;
- (void)setEnableSpeakerPhone:(BOOL)arg1;
- (id)statsForCallID:(unsigned long)arg1;
- (double)roundTripTimeForCallID:(unsigned long)arg1;
- (double)localPacketLossRateForCallID:(unsigned long)arg1;
- (double)remotePacketLossRateForCallID:(unsigned long)arg1;
- (struct CGSize { float x1; float x2; })remoteFrameSizeForCallID:(unsigned long)arg1;
- (int)localFrameWidth;
- (int)localFrameHeight;
- (double)remoteBitrateForCallID:(unsigned long)arg1;
- (double)remoteFramerateForCallID:(unsigned long)arg1;
- (double)localBitrateForCallID:(unsigned long)arg1;
- (double)localFramerateForCallID:(unsigned long)arg1;
- (void*)remoteVideoBackLayer;
- (void*)remoteVideoLayer;
- (BOOL)isMicrophoneMuted;
- (void)setMicrophoneMuted:(BOOL)arg1;
- (float)inputMeterLevel;
- (BOOL)getIsVideoPaused:(BOOL*)arg1 callID:(unsigned long)arg2 error:(id*)arg3;
- (float)outputMeterLevel;
- (BOOL)isInputMeteringEnabled;
- (void)setOutputMeteringEnabled:(BOOL)arg1;
- (BOOL)isOutputMeteringEnabled;
- (void)processRemoteIPChange:(id)arg1 callID:(unsigned long)arg2;
- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;
- (void)setLastActiveCall:(unsigned long)arg1;
- (unsigned long)lastActiveCall;
- (void)setCallReport:(unsigned long)arg1 withReport:(id)arg2;
- (void)remoteCancelledCallID:(unsigned long)arg1;
- (void)stopCallID:(unsigned long)arg1;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(unsigned long)arg2 oldCallID:(unsigned long)arg3 usingInviteData:(id)arg4 isCaller:(BOOL)arg5 relayResponseDict:(id)arg6 didOriginateRelayRequest:(BOOL)arg7 capabilities:(id)arg8 error:(id*)arg9;
- (void)setRequiresWifi:(BOOL)arg1;
- (BOOL)requiresWifi;
- (double)networkQualityForCallID:(unsigned long)arg1;
- (void)setSessionID:(id)arg1 callID:(unsigned long)arg2;
- (void)setPeerCN:(id)arg1 callID:(unsigned long)arg2;
- (id)callMetadataForCallID:(unsigned long)arg1;
- (void)inviteDataForParticipantID:(id)arg1 callID:(unsigned long)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(unsigned int)arg4 block:(id)arg5 queue:(id)arg6 caller:(id)arg7;
- (void)setUseViceroyBlobFormat:(BOOL)arg1;
- (BOOL)useViceroyBlobFormat;
- (void)setRemoteVideoBackLayer:(void*)arg1;
- (void)setRemoteVideoLayer:(void*)arg1;
- (void)cleanupManager;
- (void)stopAllCalls:(id)arg1;
- (void)warmupForCall:(int)arg1;
- (unsigned long)initializeNewCall;
- (unsigned int)talkingPeersLimit;
- (void)forceNoICE:(BOOL)arg1;
- (void)setConferenceVolume:(float)arg1;
- (float)conferenceVolume;
- (void)setRTChannel:(id)arg1;
- (void)setShouldPrioritizeParticipantIDForSIPInvite:(BOOL)arg1;
- (void)setPreferredCodec:(unsigned int)arg1;
- (void)setSendAudio:(BOOL)arg1 forCallID:(unsigned long)arg2;
- (BOOL)shouldSendAudioForCallID:(unsigned long)arg1;
- (void)setTalkingPeersLimit:(unsigned int)arg1;
- (void)setSpeakingDelegate:(id)arg1;
- (void)updatedConnectedPeers:(id)arg1;
- (void)updatedMutedPeers:(id)arg1 forParticipantID:(id)arg2;
- (void)setIsFocus:(BOOL)arg1;
- (id)currentFocus;
- (void)setChatMode:(int)arg1;
- (void)setCurrentFocus:(id)arg1;
- (int)stateForCallID:(unsigned long)arg1;
- (BOOL)matchesOpenSessionForParticipantID:(id)arg1;
- (BOOL)isFocus;
- (id)init;
- (void)setDelegate:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (BOOL)setActive:(BOOL)arg1;
- (void)unlock;

@end

/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
 */

@class NSRecursiveLock, <GKNATObserverDelegate>, NSMutableDictionary, NSObject<OS_dispatch_semaphore>, NSObject<OS_dispatch_queue>, GKNATObserver_SCContext, NSObject<OS_dispatch_group>;

@interface GKNATObserverInternal : GKNATObserver  {
    <GKNATObserverDelegate> *_delegate;
    struct __SCDynamicStore { } *_dynamicStore;
    NSRecursiveLock *_xNATCheck;
    int _lastReportedNATType;
    int _lastReportedCarrierNATType;
    int _lastReportedNonCarrierNATType;
    NSMutableDictionary *_interfaceInfoDictionary;
    bool_nonCarrierInterfacesOnly;
    bool_checkTCPAndSSL;
    bool_favorNonCarrier;
    bool_newCarrierType;
    bool_addInRangeFlag;
    bool_addCarrierFlag;
    bool_ignoreNatTypeCache;
    bool_ignoreCarrierBundle;
    int _NATCheckRetryCount;
    double _NATCheckRetryDelay;
    NSMutableDictionary *_currentNetworkNames;
    NSObject<OS_dispatch_queue> *_natCheckQueue;
    NSObject<OS_dispatch_queue> *_reportNATQueue;
    NSObject<OS_dispatch_group> *_natCheckGroup;
    NSObject<OS_dispatch_semaphore> *_natCheckNetNameSema;
    bool_fNATCheckQueued;
    bool_fNATCheckInProgress;
    GKNATObserver_SCContext *_sccontext;
    bool_hasNATCheckStarted;
    bool_hasNATCheckEnded;
}


- (void)updateNatTypeCache_OSXGamedScheme:(id)arg1;
- (id)retrieveNatTypeCache_OSXGamedScheme;
- (void)HTTPSCheckWithIPPort:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg1 useCache:(bool)arg2;
- (void)HTTPCheckWithIPPort:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg1 useCache:(bool)arg2;
- (void)NATCheckWithIPPort:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg1 useCache:(bool)arg2;
- (int)callHTTPTestFromIPPort:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg1 ToServer:(id)arg2 isSSL:(bool)arg3;
- (void)cacheNATFlags:(id)arg1 forNetwork:(id)arg2;
- (struct tagCommNATInfo { unsigned int x1; unsigned int x2; unsigned short x3[3]; unsigned int x4; }*)callCommNATTestFromIPPort:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg1;
- (unsigned int)setSSLFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(bool)arg3;
- (unsigned int)setTCPFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(bool)arg3;
- (unsigned int)setCommNATFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(bool)arg3;
- (id)lookupCachedNATFlagsForNetwork:(id)arg1;
- (id)nameForNetworkWithIPPort:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg1 interfaceName:(id)arg2;
- (void)updateNatTypeCache:(id)arg1;
- (id)retrieveNatTypeCache;
- (id)retrieveNatTypeCache_CachePlistScheme;
- (void)updateNatTypeCache_CachePlistScheme:(id)arg1;
- (bool)ensureNatCachePathExists;
- (void)reportNATType;
- (void)calculateSummmaryNATType:(int*)arg1 andCarrierNATType:(int*)arg2 andNonCarrierNATType:(int*)arg3 copyInterfaceInfoDictionary:(id*)arg4;
- (int)natTypeForCommNATFlags:(unsigned int)arg1 isCarrier:(bool)arg2 commnatFlagsCached:(bool)arg3 tcpFlagsCached:(bool)arg4 sslFlagsCached:(bool)arg5;
- (unsigned int)setFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(bool)arg3 isCachedKey:(id)arg4 mask:(unsigned int)arg5;
- (void)registerForNetworkChanges;
- (void)shouldTryNATCheck;
- (int)currentNATType;
- (void)tryNATCheckWithDelay:(double)arg1;
- (void)clearRetries;
- (id)init;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)dealloc;
- (oneway void)release;
- (id)initWithOptions:(id)arg1;

@end

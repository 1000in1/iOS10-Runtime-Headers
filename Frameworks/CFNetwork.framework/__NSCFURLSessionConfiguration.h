/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/Frameworks/CFNetwork.framework/CFNetwork
 */

@class NSArray, NSString, NSHTTPCookieStorage, NSDictionary, NSURLCache, NSURLCredentialStorage;

@interface __NSCFURLSessionConfiguration : NSObject <NSCopying, NSSecureCoding> {
    struct __CFURLStorageSession { } *_legacyStorageSystem;
    BOOL _backgroundSession;
    BOOL _allowsCellularAccess;
    BOOL _discretionary;
    BOOL _HTTPShouldUsePipelining;
    BOOL _HTTPShouldSetCookies;
    BOOL __credStorageSet;
    BOOL __urlCacheSet;
    BOOL __cookieStorageSet;
    BOOL _tasks_created_suspended;
    BOOL _skip_download_unlink;
    BOOL __preventsIdleSleep;
    BOOL __usePipeliningHeuristics;
    BOOL __startSynchronously;
    NSString *_identifier;
    unsigned int _requestCachePolicy;
    unsigned int _networkServiceType;
    NSDictionary *_connectionProxyDictionary;
    int _TLSMinimumSupportedProtocol;
    int _TLSMaximumSupportedProtocol;
    unsigned int _HTTPCookieAcceptPolicy;
    NSDictionary *_HTTPAdditionalHeaders;
    int _HTTPMaximumConnectionsPerHost;
    NSArray *_protocolClasses;
    NSURLCredentialStorage *_URLCredentialStorage;
    NSURLCredentialStorage *__credStorage;
    NSURLCache *__urlCache;
    NSHTTPCookieStorage *__cookieStorage;
    NSString *_disposition;
    struct _CFHSTSPolicy { } *_HSTSPolicy;
    NSDictionary *__cfurlConnectionProperties;
    NSDictionary *__socketStreamProperties;
    NSArray *__contentDispHeadEncFallback;
    double _timeoutIntervalForRequest;
    double _timeoutIntervalForResource;
    double _connectionCachePurgeTimeout;
    double _connectionCacheCellPurgeTimeout;
}

@property(getter=isBackgroundSession) BOOL backgroundSession;
@property(copy) NSString * identifier;
@property unsigned int requestCachePolicy;
@property double timeoutIntervalForRequest;
@property double timeoutIntervalForResource;
@property unsigned int networkServiceType;
@property BOOL allowsCellularAccess;
@property(getter=isDiscretionary) BOOL discretionary;
@property(copy) NSDictionary * connectionProxyDictionary;
@property int TLSMinimumSupportedProtocol;
@property int TLSMaximumSupportedProtocol;
@property BOOL HTTPShouldUsePipelining;
@property BOOL HTTPShouldSetCookies;
@property unsigned int HTTPCookieAcceptPolicy;
@property(copy) NSDictionary * HTTPAdditionalHeaders;
@property int HTTPMaximumConnectionsPerHost;
@property(copy) NSArray * protocolClasses;
@property(getter=URLCredentialStoreage,setter=setURLCredentialStorage:,retain) NSURLCredentialStorage * URLCredentialStorage;
@property(retain) NSURLCredentialStorage * _credStorage;
@property BOOL _credStorageSet;
@property(getter=URLCache,setter=setURLCache:,retain) NSURLCache * URLCache;
@property(retain) NSURLCache * _urlCache;
@property BOOL _urlCacheSet;
@property(getter=HTTPCookieStorage,setter=setHTTPCookieStorage:,retain) NSHTTPCookieStorage * HTTPCookieStorage;
@property(retain) NSHTTPCookieStorage * _cookieStorage;
@property BOOL _cookieStorageSet;
@property NSString * disposition;
@property(retain) struct _CFHSTSPolicy { }* HSTSPolicy;
@property double connectionCachePurgeTimeout;
@property double connectionCacheCellPurgeTimeout;
@property BOOL tasks_created_suspended;
@property BOOL skip_download_unlink;
@property(copy) NSDictionary * _cfurlConnectionProperties;
@property(copy) NSDictionary * _socketStreamProperties;
@property BOOL _preventsIdleSleep;
@property BOOL _usePipeliningHeuristics;
@property BOOL _startSynchronously;
@property(copy) NSArray * _contentDispHeadEncFallback;

+ (id)backgroundSessionConfiguration:(id)arg1;
+ (id)ephemeralSessionConfiguration;
+ (id)defaultSessionConfiguration;
+ (BOOL)supportsSecureCoding;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)URLCredentialStoreage;
- (id)URLCredentialStorage;
- (id)URLCache;
- (id)HTTPCookieStorage_ifSet;
- (void)setURLCredentialStorage:(id)arg1;
- (void)setURLCache:(id)arg1;
- (void)setHTTPCookieStorage:(id)arg1;
- (void)set_contentDispHeadEncFallback:(id)arg1;
- (id)_contentDispHeadEncFallback;
- (void)set_startSynchronously:(BOOL)arg1;
- (BOOL)_startSynchronously;
- (void)set_usePipeliningHeuristics:(BOOL)arg1;
- (BOOL)_usePipeliningHeuristics;
- (void)set_preventsIdleSleep:(BOOL)arg1;
- (BOOL)_preventsIdleSleep;
- (id)_socketStreamProperties;
- (id)_cfurlConnectionProperties;
- (double)connectionCacheCellPurgeTimeout;
- (double)connectionCachePurgeTimeout;
- (struct _CFHSTSPolicy { }*)HSTSPolicy;
- (void)setDisposition:(id)arg1;
- (void)set_cookieStorageSet:(BOOL)arg1;
- (BOOL)_cookieStorageSet;
- (void)set_cookieStorage:(id)arg1;
- (void)set_urlCacheSet:(BOOL)arg1;
- (BOOL)_urlCacheSet;
- (void)set_urlCache:(id)arg1;
- (id)_urlCache;
- (void)set_credStorageSet:(BOOL)arg1;
- (BOOL)_credStorageSet;
- (void)set_credStorage:(id)arg1;
- (id)_credStorage;
- (void)setProtocolClasses:(id)arg1;
- (id)protocolClasses;
- (void)setHTTPMaximumConnectionsPerHost:(int)arg1;
- (int)HTTPMaximumConnectionsPerHost;
- (void)setHTTPCookieAcceptPolicy:(unsigned int)arg1;
- (unsigned int)HTTPCookieAcceptPolicy;
- (void)setHTTPShouldSetCookies:(BOOL)arg1;
- (void)setHTTPShouldUsePipelining:(BOOL)arg1;
- (BOOL)HTTPShouldUsePipelining;
- (void)setTLSMaximumSupportedProtocol:(int)arg1;
- (int)TLSMaximumSupportedProtocol;
- (void)setTLSMinimumSupportedProtocol:(int)arg1;
- (int)TLSMinimumSupportedProtocol;
- (void)setConnectionProxyDictionary:(id)arg1;
- (id)connectionProxyDictionary;
- (void)setDiscretionary:(BOOL)arg1;
- (BOOL)isDiscretionary;
- (void)setAllowsCellularAccess:(BOOL)arg1;
- (BOOL)allowsCellularAccess;
- (void)setNetworkServiceType:(unsigned int)arg1;
- (unsigned int)networkServiceType;
- (void)setTimeoutIntervalForResource:(double)arg1;
- (double)timeoutIntervalForResource;
- (void)setTimeoutIntervalForRequest:(double)arg1;
- (double)timeoutIntervalForRequest;
- (void)setRequestCachePolicy:(unsigned int)arg1;
- (unsigned int)requestCachePolicy;
- (void)setIdentifier:(id)arg1;
- (void)setBackgroundSession:(BOOL)arg1;
- (id)initWithDisposition:(id)arg1;
- (void)set_socketStreamProperties:(id)arg1;
- (void)set_cfurlConnectionProperties:(id)arg1;
- (void)setSkip_download_unlink:(BOOL)arg1;
- (void)setTasks_created_suspended:(BOOL)arg1;
- (void)setConnectionCacheCellPurgeTimeout:(double)arg1;
- (void)setConnectionCachePurgeTimeout:(double)arg1;
- (void)setHSTSPolicy:(struct _CFHSTSPolicy { }*)arg1;
- (id)_cookieStorage;
- (id)disposition;
- (BOOL)tasks_created_suspended;
- (BOOL)isBackgroundSession;
- (BOOL)HTTPShouldSetCookies;
- (id)HTTPCookieStorage;
- (id)identifier;
- (void)setHTTPAdditionalHeaders:(id)arg1;
- (id)HTTPAdditionalHeaders;
- (BOOL)skip_download_unlink;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

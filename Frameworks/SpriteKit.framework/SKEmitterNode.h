/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode6.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator8.0.sdk/System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class UIColor, SKTexture, SKKeyframeSequence, SKAction, SKNode, SKShader;

@interface SKEmitterNode : SKNode  {
    SKTexture *_particleTexture;
    struct SKCEmitterSprite { int (**x1)(); struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node<SKCAction *, void *> {} *x_1_2_1; struct __list_node<SKCAction *, void *> {} *x_1_2_2; } x_2_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long long x_2_2_1; } x_2_1_2; } x2; struct shared_ptr<PKPath> { struct PKPath {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; id x4; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 1; unsigned int x11 : 1; unsigned int x12 : 1; unsigned int x13 : 1; unsigned int x14 : 1; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; unsigned int x21 : 1; unsigned int x22 : 1; unsigned int x23 : 1; unsigned int x24 : 1; unsigned int x25 : 1; unsigned int x26 : 1; unsigned int x27 : 1; unsigned int x28 : 1; unsigned int x29 : 1; unsigned int x30 : 1; boolx31; unsigned int x32 : 1; unsigned int x33 : 1; unsigned int x34 : 1; unsigned int x35 : 1; unsigned int x36 : 1; unsigned int x37 : 1; unsigned int x38 : 1; unsigned int x39 : 1; unsigned int x40 : 1; unsigned int x41 : 1; float x42; struct SKCSprite {} *x43; unsigned int x44; unsigned int x45; unsigned int x46; id x47; id x48; boolx49; boolx50; struct __CVBuffer {} *x51; struct __CVBuffer {} *x52; struct __CVOpenGLESTextureCache {} *x53; id x54; id x55; id x56; unsigned int x57; unsigned int x58; unsigned int x59; struct { float x_60_1_1; float x_60_1_2; } x60; struct { float x_61_1_1; float x_61_1_2; } x61; struct { float x_62_1_1; float x_62_1_2; } x62; struct { struct { float x_1_2_1; float x_1_2_2; } x_63_1_1; struct { float x_2_2_1; float x_2_2_2; } x_63_1_2; } x63; struct __CVBuffer {} *x64; struct __CVBuffer {} *x65; boolx66; struct { struct { union _GLKVector4 { struct { float x_1_4_1; float x_1_4_2; float x_1_4_3; float x_1_4_4; } x_1_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; } x_1_3_2; struct { float x_3_4_1; float x_3_4_2; float x_3_4_3; float x_3_4_4; } x_1_3_3; float x_1_3_4[4]; } x_1_2_1; unsigned char x_1_2_2[4]; float x_1_2_3[3]; } x_67_1_1[4]; } x67; struct { /* ? */ } *x68; struct { /* ? */ } *x69; struct { struct { float x_1_2_1; float x_1_2_2; } x_70_1_1; struct { float x_2_2_1; float x_2_2_2; } x_70_1_2; struct { float x_3_2_1; float x_3_2_2; } x_70_1_3; struct { float x_4_2_1; float x_4_2_2; } x_70_1_4; } x70; struct { struct { float x_1_2_1; float x_1_2_2; } x_71_1_1; struct { float x_2_2_1; float x_2_2_2; } x_71_1_2; } x71; long long x72; struct { struct { float x_1_2_1; float x_1_2_2; } x_73_1_1; struct { float x_2_2_1; float x_2_2_2; } x_73_1_2; } x73; struct SKCSprite {} *x74; union _GLKMatrix4 { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; float x_1_2_9; float x_1_2_10; float x_1_2_11; float x_1_2_12; float x_1_2_13; float x_1_2_14; float x_1_2_15; float x_1_2_16; } x_75_1_1; float x_75_1_2[16]; } x75; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > { struct __list_node_base<SKCSprite *, void *> { struct __list_node<SKCSprite *, void *> {} *x_1_2_1; struct __list_node<SKCSprite *, void *> {} *x_1_2_2; } x_76_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > > { unsigned long long x_2_2_1; } x_76_1_2; } x76; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > {} *x77; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > {} *x78; unsigned int x79; unsigned int x80; boolx81; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > { struct __tree<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > { struct __tree_node<SKCSprite *, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<SKCSprite *, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<SKCSprite *> > { unsigned long long x_3_3_1; } x_1_2_3; } x_82_1_1; } x82; struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *> > { struct __hash_table<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *> > { struct unique_ptr<std::__1::__hash_node<SKCAction *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<SKCAction *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > > { struct __hash_node<SKCAction *, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<SKCAction *, void *> *>, std::__1::allocator<std::__1::__hash_node<SKCAction *, void *> > > { struct __hash_node_base<std::__1::__hash_node<SKCAction *, void *> *> { struct __hash_node<SKCAction *, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<SKCAction *> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<SKCAction *> > { float x_4_3_1; } x_1_2_4; } x_83_1_1; } x83; float x84; float x85; float x86; id x87; struct { float x_88_1_1; float x_88_1_2; } x88; id x89; boolx90; struct { struct { float x_1_2_1; float x_1_2_2; } x_91_1_1; struct { float x_2_2_1; float x_2_2_2; } x_91_1_2; } x91; struct { float x_92_1_1; float x_92_1_2; } x92; unsigned int x93; struct { float x_94_1_1; float x_94_1_2; } x94; struct { float x_95_1_1; float x_95_1_2; } x95; float x96; float x97; float x98; float x99; float x100; float x101; float x102; float x103; struct { float x_104_1_1; float x_104_1_2; float x_104_1_3; float x_104_1_4; } x104; struct { float x_105_1_1; float x_105_1_2; float x_105_1_3; float x_105_1_4; } x105; float x106; float x107; float x108; struct { struct { float x_1_2_1; float x_1_2_2; } x_109_1_1; struct { float x_2_2_1; float x_2_2_2; } x_109_1_2; } x109; id x110; float x111; id x112; struct SKCSprite {} *x113; id x114; double x115; boolx116; struct SKCKeyframeSequence {} *x117; struct SKCKeyframeSequence {} *x118; struct SKCKeyframeSequence {} *x119; struct SKCKeyframeSequence {} *x120; struct SKCKeyframeSequence {} *x121; unsigned long long x122; unsigned long long x123; int x124; int x125; struct vector<SKCParticle *, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_126_1_1; struct SKCParticle {} **x_126_1_2; struct __compressed_pair<SKCParticle **, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_3_2_1; } x_126_1_3; } x126; struct vector<SKCParticle *, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_127_1_1; struct SKCParticle {} **x_127_1_2; struct __compressed_pair<SKCParticle **, std::__1::allocator<SKCParticle *> > { struct SKCParticle {} **x_3_2_1; } x_127_1_3; } x127; double x128; double x129; double x130; double x131; struct CGSize { double x_132_1_1; double x_132_1_2; } x132; float x133; float x134; float x135; struct { float x_136_1_1; float x_136_1_2; float x_136_1_3; float x_136_1_4; } x136; struct { float x_137_1_1; float x_137_1_2; float x_137_1_3; float x_137_1_4; } x137; struct { float x_138_1_1; float x_138_1_2; float x_138_1_3; float x_138_1_4; } x138; float x139; float x140; float x141; struct list<PKPoint, std::__1::allocator<PKPoint> > { struct __list_node_base<PKPoint, void *> { struct __list_node<PKPoint, void *> {} *x_1_2_1; struct __list_node<PKPoint, void *> {} *x_1_2_2; } x_142_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PKPoint, void *> > > { unsigned long long x_2_2_1; } x_142_1_2; } x142; struct { float x_143_1_1; float x_143_1_2; } x143; struct { float x_144_1_1; float x_144_1_2; } x144; float x145; float x146; float x147; float x148; struct { float x_149_1_1; float x_149_1_2; } x149; float x150; float x151; float x152; float x153; float x154; float x155; float x156; float x157; float x158; float x159; float x160; float x161; id x162; long long x163; unsigned int x164; } *_eSprite;
    SKNode *_target;
    SKKeyframeSequence *_colorSequence;
    SKKeyframeSequence *_colorBlendSequence;
    SKKeyframeSequence *_alphaSequence;
    SKKeyframeSequence *_scaleSequence;
    SKKeyframeSequence *_rotationSequence;
}

@property(retain) SKTexture * particleTexture;
@property double particleZPosition;
@property double particleZPositionRange;
@property double particleZPositionSpeed;
@property long long particleBlendMode;
@property(retain) UIColor * particleColor;
@property double particleColorRedRange;
@property double particleColorGreenRange;
@property double particleColorBlueRange;
@property double particleColorAlphaRange;
@property double particleColorRedSpeed;
@property double particleColorGreenSpeed;
@property double particleColorBlueSpeed;
@property double particleColorAlphaSpeed;
@property(retain) SKKeyframeSequence * particleColorSequence;
@property double particleColorBlendFactor;
@property double particleColorBlendFactorRange;
@property double particleColorBlendFactorSpeed;
@property(retain) SKKeyframeSequence * particleColorBlendFactorSequence;
@property struct CGPoint { double x1; double x2; } particlePosition;
@property struct CGVector { double x1; double x2; } particlePositionRange;
@property double particleSpeed;
@property double particleSpeedRange;
@property double emissionAngle;
@property double emissionAngleRange;
@property double xAcceleration;
@property double yAcceleration;
@property double particleBirthRate;
@property unsigned long long numParticlesToEmit;
@property double particleLifetime;
@property double particleLifetimeRange;
@property double particleRotation;
@property double particleRotationRange;
@property double particleRotationSpeed;
@property struct CGSize { double x1; double x2; } particleSize;
@property double particleScale;
@property double particleScaleRange;
@property double particleScaleSpeed;
@property(retain) SKKeyframeSequence * particleScaleSequence;
@property double particleAlpha;
@property double particleAlphaRange;
@property double particleAlphaSpeed;
@property(retain) SKKeyframeSequence * particleAlphaSequence;
@property(copy) SKAction * particleAction;
@property unsigned int fieldBitMask;
@property SKNode * targetNode;
@property(retain) SKShader * shader;


- (void)advanceSimulationTime:(double)arg1;
- (void)resetSimulation;
- (double)particleZPositionSpeed;
- (void)setPhysicsWorld:(id)arg1;
- (double)particleBirthRate;
- (void)setParticleDensity:(double)arg1;
- (double)particleDensity;
- (void)setDensityBased:(bool)arg1;
- (bool)densityBased;
- (void)setParticleZPositionRange:(double)arg1;
- (double)particleZPositionRange;
- (void)setParticleZPosition:(double)arg1;
- (double)particleZPosition;
- (id)targetNode;
- (void)setEmissionAngleRange:(double)arg1;
- (double)emissionAngleRange;
- (void)setEmissionAngle:(double)arg1;
- (double)emissionAngle;
- (void)setParticleSpeedRange:(double)arg1;
- (double)particleSpeedRange;
- (void)setParticleSpeed:(double)arg1;
- (double)particleSpeed;
- (void)setParticleBlendMode:(long long)arg1;
- (long long)particleBlendMode;
- (void)setParticleAlphaSpeed:(double)arg1;
- (double)particleAlphaSpeed;
- (void)setParticleAlphaRange:(double)arg1;
- (double)particleAlphaRange;
- (void)setParticleAlpha:(double)arg1;
- (double)particleAlpha;
- (void)setParticleScaleSpeed:(double)arg1;
- (double)particleScaleSpeed;
- (void)setParticleScaleRange:(double)arg1;
- (double)particleScaleRange;
- (void)setParticleScale:(double)arg1;
- (double)particleScale;
- (void)setParticleRotationSpeed:(double)arg1;
- (double)particleRotationSpeed;
- (void)setParticleRotationRange:(double)arg1;
- (double)particleRotationRange;
- (void)setParticleRotation:(double)arg1;
- (double)particleRotation;
- (void)setParticleLifetimeRange:(double)arg1;
- (double)particleLifetimeRange;
- (void)setParticleLifetime:(double)arg1;
- (double)particleLifetime;
- (void)setParticleColorBlendFactorSpeed:(double)arg1;
- (double)particleColorBlendFactorSpeed;
- (void)setParticleColorBlendFactorRange:(double)arg1;
- (double)particleColorBlendFactorRange;
- (void)setParticleColorBlendFactor:(double)arg1;
- (double)particleColorBlendFactor;
- (void)setParticleColorAlphaSpeed:(double)arg1;
- (double)particleColorAlphaSpeed;
- (void)setParticleColorBlueSpeed:(double)arg1;
- (double)particleColorBlueSpeed;
- (void)setParticleColorGreenSpeed:(double)arg1;
- (double)particleColorGreenSpeed;
- (void)setParticleColorRedSpeed:(double)arg1;
- (double)particleColorRedSpeed;
- (void)setParticleColorAlphaRange:(double)arg1;
- (double)particleColorAlphaRange;
- (void)setParticleColorBlueRange:(double)arg1;
- (double)particleColorBlueRange;
- (void)setParticleColorGreenRange:(double)arg1;
- (double)particleColorGreenRange;
- (void)setParticleColorRedRange:(double)arg1;
- (double)particleColorRedRange;
- (id)shader;
- (id)particleRotationSequence;
- (id)particleScaleSequence;
- (id)particleColorBlendFactorSequence;
- (id)particleColorSequence;
- (id)particleAlphaSequence;
- (unsigned long long)numParticlesToEmit;
- (struct CGVector { double x1; double x2; })particlePositionRange;
- (struct CGPoint { double x1; double x2; })particlePosition;
- (id)particleAction;
- (void)setShader:(id)arg1;
- (void)setParticleRotationSequence:(id)arg1;
- (void)setParticleScaleSequence:(id)arg1;
- (void)setParticleColorBlendFactorSequence:(id)arg1;
- (void)setParticleColorSequence:(id)arg1;
- (void)setParticleAlphaSequence:(id)arg1;
- (void)setNumParticlesToEmit:(unsigned long long)arg1;
- (void)setParticleAction:(id)arg1;
- (void)setParticleBirthRate:(double)arg1;
- (void)setParticleZPositionSpeed:(double)arg1;
- (void)setParticlePositionRange:(struct CGVector { double x1; double x2; })arg1;
- (void)setParticlePosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setParticleTexture:(id)arg1;
- (void)setTargetNode:(id)arg1;
- (id)particleTexture;
- (void)setParticleSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })particleSize;
- (id)particleColor;
- (void)setParticleColor:(id)arg1;
- (id)physicsWorld;
- (void)setPaused:(bool)arg1;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setFieldBitMask:(unsigned int)arg1;
- (unsigned int)fieldBitMask;
- (void)setYAcceleration:(double)arg1;
- (void)setXAcceleration:(double)arg1;
- (double)yAcceleration;
- (double)xAcceleration;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void).cxx_destruct;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;

@end

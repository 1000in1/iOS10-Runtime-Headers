/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

@interface SKEmitterNode : SKNode {
    SKKeyframeSequence * _alphaSequence;
    SKKeyframeSequence * _colorBlendSequence;
    SKKeyframeSequence * _colorSequence;
    SKKeyframeSequence * _fieldInfluenceSequence;
    unsigned int  _particleRenderOrder;
    SKTexture * _particleTexture;
    SKKeyframeSequence * _rotationSequence;
    SKKeyframeSequence * _scaleSequence;
    SKShader * _shader;
    struct SKCEmitterNode { int (**x1)(); id x2; id x3; struct SKCNode {} x4; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_5_1_1; struct SKCNode {} **x_5_1_2; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_3_2_1; } x_5_1_3; } x5; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_6_1_1; struct SKCNode {} **x_6_1_2; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_3_2_1; } x_6_1_3; } x6; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_7_1_1; struct SKCNode {} **x_7_1_2; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_3_2_1; } x_7_1_3; } x7; id x8; float x9; bool x10; struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node<SKCAction *, void *> {} *x_1_2_1; struct __list_node<SKCAction *, void *> {} *x_1_2_2; } x_11_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long x_2_2_1; } x_11_1_2; } x11; struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node<SKCAction *, void *> {} *x_1_2_1; struct __list_node<SKCAction *, void *> {} *x_1_2_2; } x_12_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long x_2_2_1; } x_12_1_2; } x12; bool x13; id x14; int x15; bool x16; float x17; float x18; bool x19; bool x20; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_21_1_1[4]; } x21; bool x22; bool x23; id x24; id x25; struct SKCParticleSystemNode {} x26; struct SKCParticleSystem {} *x27; float x28; bool x29; struct SKCKeyframeSequence {} *x30; struct SKCKeyframeSequence {} *x31; struct SKCKeyframeSequence {} *x32; struct SKCKeyframeSequence {} *x33; struct SKCKeyframeSequence {} *x34; struct SKCKeyframeSequence {} *x35; unsigned int x36; unsigned int x37; int x38; int x39; double x40; double x41; double x42; double x43; struct CGSize { float x_44_1_1; float x_44_1_2; } x44; float x45; float x46; float x47; float x48; float x49; struct { float x_50_1_1; float x_50_1_2; float x_50_1_3; float x_50_1_4; } x50; struct { float x_51_1_1; float x_51_1_2; float x_51_1_3; float x_51_1_4; } x51; struct { float x_52_1_1; float x_52_1_2; float x_52_1_3; float x_52_1_4; } x52; float x53; float x54; float x55; struct list<PKPoint, std::__1::allocator<PKPoint> > { struct __list_node_base<PKPoint, void *> { struct __list_node<PKPoint, void *> {} *x_1_2_1; struct __list_node<PKPoint, void *> {} *x_1_2_2; } x_56_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PKPoint, void *> > > { unsigned long x_2_2_1; } x_56_1_2; } x56; struct { float x_57_1_1; float x_57_1_2; } x57; struct { float x_58_1_1; float x_58_1_2; } x58; float x59; float x60; float x61; float x62; struct { float x_63_1_1; float x_63_1_2; } x63; float x64; float x65; float x66; float x67; float x68; float x69; float x70; float x71; float x72; float x73; float x74; float x75; id x76; unsigned int x77; } * _skcEmitterNode;
    SKNode * _target;
}

@property (nonatomic) float emissionAngle;
@property (nonatomic) float emissionAngleRange;
@property (nonatomic) unsigned int fieldBitMask;
@property (nonatomic) unsigned int numParticlesToEmit;
@property (nonatomic, copy) SKAction *particleAction;
@property (nonatomic) float particleAlpha;
@property (nonatomic) float particleAlphaRange;
@property (nonatomic, retain) SKKeyframeSequence *particleAlphaSequence;
@property (nonatomic) float particleAlphaSpeed;
@property (nonatomic) float particleBirthRate;
@property (nonatomic) int particleBlendMode;
@property (nonatomic, retain) UIColor *particleColor;
@property (nonatomic) float particleColorAlphaRange;
@property (nonatomic) float particleColorAlphaSpeed;
@property (nonatomic) float particleColorBlendFactor;
@property (nonatomic) float particleColorBlendFactorRange;
@property (nonatomic, retain) SKKeyframeSequence *particleColorBlendFactorSequence;
@property (nonatomic) float particleColorBlendFactorSpeed;
@property (nonatomic) float particleColorBlueRange;
@property (nonatomic) float particleColorBlueSpeed;
@property (nonatomic) float particleColorGreenRange;
@property (nonatomic) float particleColorGreenSpeed;
@property (nonatomic) float particleColorRedRange;
@property (nonatomic) float particleColorRedSpeed;
@property (nonatomic, retain) SKKeyframeSequence *particleColorSequence;
@property (nonatomic) float particleLifetime;
@property (nonatomic) float particleLifetimeRange;
@property (nonatomic) struct CGPoint { float x1; float x2; } particlePosition;
@property (nonatomic) struct CGVector { float x1; float x2; } particlePositionRange;
@property (nonatomic) unsigned int particleRenderOrder;
@property (nonatomic) float particleRotation;
@property (nonatomic) float particleRotationRange;
@property (nonatomic) float particleRotationSpeed;
@property (nonatomic) float particleScale;
@property (nonatomic) float particleScaleRange;
@property (nonatomic, retain) SKKeyframeSequence *particleScaleSequence;
@property (nonatomic) float particleScaleSpeed;
@property (nonatomic) struct CGSize { float x1; float x2; } particleSize;
@property (nonatomic) float particleSpeed;
@property (nonatomic) float particleSpeedRange;
@property (nonatomic, retain) SKTexture *particleTexture;
@property (nonatomic) float particleZPosition;
@property (nonatomic) float particleZPositionRange;
@property (nonatomic) float particleZPositionSpeed;
@property (nonatomic, retain) SKShader *shader;
@property (nonatomic) SKNode *targetNode;
@property (nonatomic) float xAcceleration;
@property (nonatomic) float yAcceleration;

- (void).cxx_destruct;
- (void)_didMakeBackingNode;
- (struct SKCNode { int (**x1)(); id x2; id x3; struct SKCNode {} x4; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_5_1_1; struct SKCNode {} **x_5_1_2; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_3_2_1; } x_5_1_3; } x5; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_6_1_1; struct SKCNode {} **x_6_1_2; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_3_2_1; } x_6_1_3; } x6; struct vector<SKCNode *, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_7_1_1; struct SKCNode {} **x_7_1_2; struct __compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> > { struct SKCNode {} **x_3_2_1; } x_7_1_3; } x7; id x8; float x9; bool x10; struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node<SKCAction *, void *> {} *x_1_2_1; struct __list_node<SKCAction *, void *> {} *x_1_2_2; } x_11_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long x_2_2_1; } x_11_1_2; } x11; struct list<SKCAction *, std::__1::allocator<SKCAction *> > { struct __list_node_base<SKCAction *, void *> { struct __list_node<SKCAction *, void *> {} *x_1_2_1; struct __list_node<SKCAction *, void *> {} *x_1_2_2; } x_12_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > > { unsigned long x_2_2_1; } x_12_1_2; } x12; bool x13; id x14; int x15; bool x16; float x17; float x18; bool x19; bool x20; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_21_1_1[4]; } x21; }*)_makeBackingNode;
- (unsigned int)activeParticleCount;
- (void)advanceSimulationTime:(double)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (BOOL)densityBased;
- (id)description;
- (float)emissionAngle;
- (float)emissionAngleRange;
- (float)emissionDistance;
- (float)emissionDistanceRange;
- (void)encodeWithCoder:(id)arg1;
- (unsigned int)fieldBitMask;
- (id)fieldInfluenceSequence;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (BOOL)isEqualToNode:(id)arg1;
- (unsigned int)numParticlesToEmit;
- (id)particleAction;
- (float)particleAlpha;
- (float)particleAlphaRange;
- (id)particleAlphaSequence;
- (float)particleAlphaSpeed;
- (float)particleBirthRate;
- (int)particleBlendMode;
- (id)particleColor;
- (float)particleColorAlphaRange;
- (float)particleColorAlphaSpeed;
- (float)particleColorBlendFactor;
- (float)particleColorBlendFactorRange;
- (id)particleColorBlendFactorSequence;
- (float)particleColorBlendFactorSpeed;
- (float)particleColorBlueRange;
- (float)particleColorBlueSpeed;
- (float)particleColorGreenRange;
- (float)particleColorGreenSpeed;
- (float)particleColorRedRange;
- (float)particleColorRedSpeed;
- (id)particleColorSequence;
- (float)particleDensity;
- (float)particleLifetime;
- (float)particleLifetimeRange;
- (struct CGPoint { float x1; float x2; })particlePosition;
- (struct CGVector { float x1; float x2; })particlePositionRange;
- (unsigned int)particleRenderOrder;
- (float)particleRotation;
- (float)particleRotationRange;
- (id)particleRotationSequence;
- (float)particleRotationSpeed;
- (float)particleScale;
- (float)particleScaleRange;
- (id)particleScaleSequence;
- (float)particleScaleSpeed;
- (struct CGSize { float x1; float x2; })particleSize;
- (float)particleSpeed;
- (float)particleSpeedRange;
- (id)particleTexture;
- (float)particleZPosition;
- (float)particleZPositionRange;
- (float)particleZPositionSpeed;
- (id)physicsWorld;
- (void)resetSimulation;
- (void)setDensityBased:(BOOL)arg1;
- (void)setEmissionAngle:(float)arg1;
- (void)setEmissionAngleRange:(float)arg1;
- (void)setEmissionDistance:(float)arg1;
- (void)setEmissionDistanceRange:(float)arg1;
- (void)setFieldBitMask:(unsigned int)arg1;
- (void)setFieldInfluenceSequence:(id)arg1;
- (void)setNumParticlesToEmit:(unsigned int)arg1;
- (void)setParticleAction:(id)arg1;
- (void)setParticleAlpha:(float)arg1;
- (void)setParticleAlphaRange:(float)arg1;
- (void)setParticleAlphaSequence:(id)arg1;
- (void)setParticleAlphaSpeed:(float)arg1;
- (void)setParticleBirthRate:(float)arg1;
- (void)setParticleBlendMode:(int)arg1;
- (void)setParticleColor:(id)arg1;
- (void)setParticleColorAlphaRange:(float)arg1;
- (void)setParticleColorAlphaSpeed:(float)arg1;
- (void)setParticleColorBlendFactor:(float)arg1;
- (void)setParticleColorBlendFactorRange:(float)arg1;
- (void)setParticleColorBlendFactorSequence:(id)arg1;
- (void)setParticleColorBlendFactorSpeed:(float)arg1;
- (void)setParticleColorBlueRange:(float)arg1;
- (void)setParticleColorBlueSpeed:(float)arg1;
- (void)setParticleColorGreenRange:(float)arg1;
- (void)setParticleColorGreenSpeed:(float)arg1;
- (void)setParticleColorRedRange:(float)arg1;
- (void)setParticleColorRedSpeed:(float)arg1;
- (void)setParticleColorSequence:(id)arg1;
- (void)setParticleDensity:(float)arg1;
- (void)setParticleLifetime:(float)arg1;
- (void)setParticleLifetimeRange:(float)arg1;
- (void)setParticlePosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setParticlePositionRange:(struct CGVector { float x1; float x2; })arg1;
- (void)setParticleRenderOrder:(unsigned int)arg1;
- (void)setParticleRotation:(float)arg1;
- (void)setParticleRotationRange:(float)arg1;
- (void)setParticleRotationSequence:(id)arg1;
- (void)setParticleRotationSpeed:(float)arg1;
- (void)setParticleScale:(float)arg1;
- (void)setParticleScaleRange:(float)arg1;
- (void)setParticleScaleSequence:(id)arg1;
- (void)setParticleScaleSpeed:(float)arg1;
- (void)setParticleSize:(struct CGSize { float x1; float x2; })arg1;
- (void)setParticleSpeed:(float)arg1;
- (void)setParticleSpeedRange:(float)arg1;
- (void)setParticleTexture:(id)arg1;
- (void)setParticleZPosition:(float)arg1;
- (void)setParticleZPositionRange:(float)arg1;
- (void)setParticleZPositionSpeed:(float)arg1;
- (void)setPhysicsWorld:(id)arg1;
- (void)setShader:(id)arg1;
- (void)setTargetNode:(id)arg1;
- (void)setWantsNewParticles:(BOOL)arg1;
- (void)setXAcceleration:(float)arg1;
- (void)setYAcceleration:(float)arg1;
- (id)shader;
- (id)targetNode;
- (BOOL)wantsNewParticles;
- (float)xAcceleration;
- (float)yAcceleration;

@end

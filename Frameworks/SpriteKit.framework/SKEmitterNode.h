/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode5.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator7.0.sdk/System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class SKAction, SKKeyframeSequence, SKNode, UIColor, SKTexture;

@interface SKEmitterNode : SKNode  {
    SKTexture *_particleTexture;
    struct SKCEmitterSprite { int (**x1)(); id x2; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 1; unsigned int x6 : 1; unsigned int x7 : 1; unsigned int x8 : 1; unsigned int x9 : 1; unsigned int x10 : 1; unsigned int x11 : 1; unsigned int x12 : 1; unsigned int x13 : 1; unsigned int x14 : 1; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; unsigned int x18 : 1; unsigned int x19 : 1; unsigned int x20 : 1; unsigned int x21 : 1; unsigned int x22 : 1; unsigned int x23 : 1; unsigned int x24 : 1; unsigned int x25 : 1; unsigned int x26 : 1; unsigned int x27 : 1; unsigned int x28 : 1; unsigned int x29 : 1; unsigned int x30 : 1; unsigned int x31 : 1; unsigned int x32 : 1; unsigned int x33 : 1; unsigned int x34 : 1; unsigned int x35 : 1; unsigned int x36 : 1; unsigned int x37 : 1; unsigned int x38 : 1; float x39; struct SKCSprite {} *x40; id x41; boolx42; boolx43; struct __CVBuffer {} *x44; struct __CVBuffer {} *x45; struct __CVOpenGLESTextureCache {} *x46; id x47; id x48; unsigned int x49; unsigned int x50; unsigned int x51; struct { float x_52_1_1; float x_52_1_2; } x52; struct { float x_53_1_1; float x_53_1_2; } x53; struct { float x_54_1_1; float x_54_1_2; } x54; struct { struct { float x_1_2_1; float x_1_2_2; } x_55_1_1; struct { float x_2_2_1; float x_2_2_2; } x_55_1_2; } x55; struct __CVBuffer {} *x56; struct __CVBuffer {} *x57; boolx58; struct { struct { unsigned char x_1_2_1[4]; float x_1_2_2[3]; float x_1_2_3[2]; } x_59_1_1[4]; } x59; struct { /* ? */ } *x60; struct { /* ? */ } *x61; struct { struct { float x_1_2_1; float x_1_2_2; } x_62_1_1; struct { float x_2_2_1; float x_2_2_2; } x_62_1_2; struct { float x_3_2_1; float x_3_2_2; } x_62_1_3; struct { float x_4_2_1; float x_4_2_2; } x_62_1_4; } x62; struct { struct { float x_1_2_1; float x_1_2_2; } x_63_1_1; struct { float x_2_2_1; float x_2_2_2; } x_63_1_2; } x63; int x64; struct { struct { float x_1_2_1; float x_1_2_2; } x_65_1_1; struct { float x_2_2_1; float x_2_2_2; } x_65_1_2; } x65; struct SKCSprite {} *x66; union _GLKMatrix4 { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; float x_1_2_4; float x_1_2_5; float x_1_2_6; float x_1_2_7; float x_1_2_8; float x_1_2_9; float x_1_2_10; float x_1_2_11; float x_1_2_12; float x_1_2_13; float x_1_2_14; float x_1_2_15; float x_1_2_16; } x_67_1_1; float x_67_1_2[16]; } x67; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > {} *x68; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > {} *x69; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > {} *x70; unsigned int x71; unsigned int x72; boolx73; struct list<SKCAction *, std::__1::allocator<SKCAction *> > {} *x74; struct set<SKCSprite *, std::__1::less<SKCSprite *>, std::__1::allocator<SKCSprite *> > {} *x75; struct unordered_set<SKCAction *, std::__1::hash<SKCAction *>, std::__1::equal_to<SKCAction *>, std::__1::allocator<SKCAction *> > {} *x76; float x77; float x78; float x79; id x80; struct { float x_81_1_1; float x_81_1_2; } x81; id x82; boolx83; struct { struct { float x_1_2_1; float x_1_2_2; } x_84_1_1; struct { float x_2_2_1; float x_2_2_2; } x_84_1_2; } x84; struct { float x_85_1_1; float x_85_1_2; } x85; unsigned int x86; struct { float x_87_1_1; float x_87_1_2; } x87; struct { float x_88_1_1; float x_88_1_2; } x88; float x89; float x90; float x91; float x92; float x93; float x94; struct { float x_95_1_1; float x_95_1_2; float x_95_1_3; float x_95_1_4; } x95; struct { float x_96_1_1; float x_96_1_2; float x_96_1_3; float x_96_1_4; } x96; float x97; float x98; float x99; struct { struct { float x_1_2_1; float x_1_2_2; } x_100_1_1; struct { float x_2_2_1; float x_2_2_2; } x_100_1_2; } x100; id x101; struct SKCSprite {} *x102; id x103; struct SKCKeyframeSequence {} *x104; struct SKCKeyframeSequence {} *x105; struct SKCKeyframeSequence {} *x106; struct SKCKeyframeSequence {} *x107; struct SKCKeyframeSequence {} *x108; unsigned int x109; unsigned int x110; int x111; int x112; struct vector<SKCParticle *, std::__1::allocator<SKCParticle *> > { struct { /* ? */ } **x_113_1_1; struct { /* ? */ } **x_113_1_2; struct __compressed_pair<SKCParticle **, std::__1::allocator<SKCParticle *> > { struct { /* ? */ } **x_3_2_1; } x_113_1_3; } x113; struct vector<SKCParticle *, std::__1::allocator<SKCParticle *> > { struct { /* ? */ } **x_114_1_1; struct { /* ? */ } **x_114_1_2; struct __compressed_pair<SKCParticle **, std::__1::allocator<SKCParticle *> > { struct { /* ? */ } **x_3_2_1; } x_114_1_3; } x114; double x115; double x116; double x117; double x118; struct CGSize { float x_119_1_1; float x_119_1_2; } x119; float x120; float x121; struct { float x_122_1_1; float x_122_1_2; float x_122_1_3; float x_122_1_4; } x122; struct { float x_123_1_1; float x_123_1_2; float x_123_1_3; float x_123_1_4; } x123; struct { float x_124_1_1; float x_124_1_2; float x_124_1_3; float x_124_1_4; } x124; float x125; float x126; float x127; struct { float x_128_1_1; float x_128_1_2; } x128; boolx129; struct { float x_130_1_1; float x_130_1_2; } x130; struct { float x_131_1_1; float x_131_1_2; } x131; float x132; float x133; float x134; float x135; struct { float x_136_1_1; float x_136_1_2; } x136; float x137; float x138; float x139; float x140; float x141; float x142; float x143; float x144; float x145; float x146; float x147; float x148; id x149; int x150; } *_eSprite;
    SKNode *_target;
    SKKeyframeSequence *_colorSequence;
    SKKeyframeSequence *_colorBlendSequence;
    SKKeyframeSequence *_alphaSequence;
    SKKeyframeSequence *_scaleSequence;
    SKKeyframeSequence *_rotationSequence;
}

@property(retain) SKTexture * particleTexture;
@property float particleZPosition;
@property float particleZPositionRange;
@property int particleBlendMode;
@property(retain) UIColor * particleColor;
@property float particleColorRedRange;
@property float particleColorGreenRange;
@property float particleColorBlueRange;
@property float particleColorAlphaRange;
@property float particleColorRedSpeed;
@property float particleColorGreenSpeed;
@property float particleColorBlueSpeed;
@property float particleColorAlphaSpeed;
@property(retain) SKKeyframeSequence * particleColorSequence;
@property float particleColorBlendFactor;
@property float particleColorBlendFactorRange;
@property float particleColorBlendFactorSpeed;
@property(retain) SKKeyframeSequence * particleColorBlendFactorSequence;
@property struct CGPoint { float x1; float x2; } particlePosition;
@property struct CGPoint { float x1; float x2; } particlePositionRange;
@property float particleSpeed;
@property float particleSpeedRange;
@property float emissionAngle;
@property float emissionAngleRange;
@property float xAcceleration;
@property float yAcceleration;
@property float particleBirthRate;
@property unsigned int numParticlesToEmit;
@property float particleLifetime;
@property float particleLifetimeRange;
@property float particleRotation;
@property float particleRotationRange;
@property float particleRotationSpeed;
@property struct CGSize { float x1; float x2; } particleSize;
@property float particleScale;
@property float particleScaleRange;
@property float particleScaleSpeed;
@property(retain) SKKeyframeSequence * particleScaleSequence;
@property float particleAlpha;
@property float particleAlphaRange;
@property float particleAlphaSpeed;
@property(retain) SKKeyframeSequence * particleAlphaSequence;
@property(copy) SKAction * particleAction;
@property SKNode * targetNode;


- (void)advanceSimulationTime:(double)arg1;
- (void)resetSimulation;
- (void)setParticleSize:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })particleSize;
- (float)particleBirthRate;
- (void)setParticleZPositionRange:(float)arg1;
- (float)particleZPositionRange;
- (void)setParticleZPosition:(float)arg1;
- (float)particleZPosition;
- (id)targetNode;
- (void)setEmissionAngleRange:(float)arg1;
- (float)emissionAngleRange;
- (void)setEmissionAngle:(float)arg1;
- (float)emissionAngle;
- (void)setParticleSpeedRange:(float)arg1;
- (float)particleSpeedRange;
- (void)setParticleSpeed:(float)arg1;
- (float)particleSpeed;
- (void)setParticleBlendMode:(int)arg1;
- (int)particleBlendMode;
- (void)setParticleAlphaSpeed:(float)arg1;
- (float)particleAlphaSpeed;
- (void)setParticleAlphaRange:(float)arg1;
- (float)particleAlphaRange;
- (void)setParticleAlpha:(float)arg1;
- (float)particleAlpha;
- (void)setParticleScaleSpeed:(float)arg1;
- (float)particleScaleSpeed;
- (void)setParticleScaleRange:(float)arg1;
- (float)particleScaleRange;
- (void)setParticleScale:(float)arg1;
- (float)particleScale;
- (void)setParticleRotationSpeed:(float)arg1;
- (float)particleRotationSpeed;
- (void)setParticleRotationRange:(float)arg1;
- (float)particleRotationRange;
- (void)setParticleRotation:(float)arg1;
- (float)particleRotation;
- (void)setParticleLifetimeRange:(float)arg1;
- (float)particleLifetimeRange;
- (void)setParticleLifetime:(float)arg1;
- (float)particleLifetime;
- (void)setParticleColorBlendFactorSpeed:(float)arg1;
- (float)particleColorBlendFactorSpeed;
- (void)setParticleColorBlendFactorRange:(float)arg1;
- (float)particleColorBlendFactorRange;
- (void)setParticleColorBlendFactor:(float)arg1;
- (float)particleColorBlendFactor;
- (void)setParticleColorAlphaSpeed:(float)arg1;
- (float)particleColorAlphaSpeed;
- (void)setParticleColorBlueSpeed:(float)arg1;
- (float)particleColorBlueSpeed;
- (void)setParticleColorGreenSpeed:(float)arg1;
- (float)particleColorGreenSpeed;
- (void)setParticleColorRedSpeed:(float)arg1;
- (float)particleColorRedSpeed;
- (void)setParticleColorAlphaRange:(float)arg1;
- (float)particleColorAlphaRange;
- (void)setParticleColorBlueRange:(float)arg1;
- (float)particleColorBlueRange;
- (void)setParticleColorGreenRange:(float)arg1;
- (float)particleColorGreenRange;
- (void)setParticleColorRedRange:(float)arg1;
- (float)particleColorRedRange;
- (void)setParticleColor:(id)arg1;
- (id)particleColor;
- (id)particleRotationSequence;
- (id)particleScaleSequence;
- (id)particleColorBlendFactorSequence;
- (id)particleColorSequence;
- (id)particleAlphaSequence;
- (unsigned int)numParticlesToEmit;
- (struct CGPoint { float x1; float x2; })particlePositionRange;
- (struct CGPoint { float x1; float x2; })particlePosition;
- (id)particleAction;
- (void)setParticleRotationSequence:(id)arg1;
- (void)setParticleScaleSequence:(id)arg1;
- (void)setParticleColorBlendFactorSequence:(id)arg1;
- (void)setParticleColorSequence:(id)arg1;
- (void)setParticleAlphaSequence:(id)arg1;
- (void)setNumParticlesToEmit:(unsigned int)arg1;
- (void)setParticleAction:(id)arg1;
- (void)setParticleBirthRate:(float)arg1;
- (void)setParticlePositionRange:(struct CGPoint { float x1; float x2; })arg1;
- (void)setParticlePosition:(struct CGPoint { float x1; float x2; })arg1;
- (void)setParticleTexture:(id)arg1;
- (void)setTargetNode:(id)arg1;
- (id)particleTexture;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)setYAcceleration:(float)arg1;
- (void)setXAcceleration:(float)arg1;
- (float)yAcceleration;
- (float)xAcceleration;
- (id)init;
- (void).cxx_destruct;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)setPaused:(BOOL)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

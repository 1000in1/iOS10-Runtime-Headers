/* Generated by RuntimeBrowser.
   Image: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class SKDisplayLink, SKNode, NSData, SKLabelNode, NSMutableDictionary, SKScene, EAGLContext, NSObject<OS_dispatch_queue>;

@interface SKView : UIView  {
    bool_allowsTransparency;
    bool_priorResignActivePausedState;
    unsigned long long _frameInterval;
    SKDisplayLink *_displayLink;
    NSObject<OS_dispatch_queue> *_updateQueue;
    double _timePreviousUpdate;
    SKLabelNode *_statsLabel;
    double _prevViewAspect;
    unsigned int _spritesRendered;
    unsigned int _spritesSubmitted;
    int _frames;
    unsigned int _prevSpritesRendered;
    unsigned int _prevSpritesRenderedSubmitted;
    double _timeBeginFrameCount;
    float _fps;
    EAGLContext *_context;
    unsigned int _colorRenderBuffer;
    unsigned int _depthStencilRenderBuffer;
    unsigned int _frameBuffer;
    bool_prefersLowPowerGPU;
    bool_usesAsyncUpdateQueue;
    bool_hasRenderedOnce;
    bool_hasRenderedForCurrentUpdate;
    bool_isInTransition;
    bool_disableInput;
    bool_mouseIsDown;
    SKNode *_nodeUnderCursor;
    float _transitionDuration;
    float _transitionTime;
    SKScene *_nextScene;
    SKScene *_scene;
    bool_paused;
    NSData *_spriteArrayHint;

  /* Error parsing encoded ivar type info: ^{SKCRenderer=@@BBff@@f{?=ff}{?=^{xglProgram}{?={?=ff}{?=ff}}I(_GLKMatrix4={?=ffffffffffffffff}[16f])III{?=ffff}q{?=ff}{?=IIII{?=ff}B}}{?=^{xglProgram}{?={?=ff}{?=ff}}I(_GLKMatrix4={?=ffffffffffffffff}[16f])III{?=ffff}q{?=ff}{?=IIII{?=ff}B}}{stack<PKRect, std::__1::deque<PKRect, std::__1::allocator<PKRect> > >={deque<PKRect, std::__1::allocator<PKRect> >={__split_buffer<PKRect *, std::__1::allocator<PKRect *> >=^^{?}^^{?}^^{?}{__compressed_pair<PKRect **, std::__1::allocator<PKRect *> >=^^{?}}}Q{__compressed_pair<unsigned long, std::__1::allocator<PKRect> >=Q}}}{stack<_GLKMatrix4, std::__1::deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > >={deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> >={__split_buffer<_GLKMatrix4 *, std::__1::allocator<_GLKMatrix4 *> >=^^(_GLKMatrix4)^^(_GLKMatrix4)^^(_GLKMatrix4){__compressed_pair<_GLKMatrix4 **, std::__1::allocator<_GLKMatrix4 *> >=^^(_GLKMatrix4)}}Q{__compressed_pair<unsigned long, std::__1::allocator<_GLKMatrix4> >=Q}}}{stack<SKCTextureAttachment, std::__1::deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > >={deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> >={__split_buffer<SKCTextureAttachment *, std::__1::allocator<SKCTextureAttachment *> >=^^{?}^^{?}^^{?}{__compressed_pair<SKCTextureAttachment **, std::__1::allocator<SKCTextureAttachment *> >=^^{?}}}Q{__compressed_pair<unsigned long, std::__1::allocator<SKCTextureAttachment> >=Q}}}{?=ff}{?=ff}{SKCRenderPassNew=^{xglProgram}(_GLKMatrix4={?=ffffffffffffffff}[16f])IQIIq{?={?=ff}{?=ff}}^{SKCSprite}IIBBBBBBBBB{?=IIII{?=ff}B}BBBBBBBBBBBB@ffI{?=ffff}@{?={?=ff}{?=ff}}{?={?=ff}{?=ff}}{?=ff}fIB*@}IiiffidQQQQQQffIIIIdfIi@@@@BBBB{list<SKCRenderPassNew, std::__1::allocator<SKCRenderPassNew> >={__list_node_base<SKCRenderPassNew, void *>=^{__list_node<SKCRenderPassNew, void *>}^{__list_node<SKCRenderPassNew, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderPassNew, void *> > >=Q}}II^S[10500{?=[4{?=(_GLKVector4={?=ffff}{?=ffff}{?=ffff}[4f])[4C][3f]}]}]IIII^{xglProgram}^{xglProgram}^{xglProgram}^{xglProgram}^{xglProgram}^{xglProgram}@i@iII{list<SKCSprite *, std::__1::allocator<SKCSprite *> >={__list_node_base<SKCSprite *, void *>=^{__list_node<SKCSprite *, void *>}^{__list_node<SKCSprite *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > >=Q}}{vector<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >=^^{SpriteRenderInfo}^^{SpriteRenderInfo}{__compressed_pair<const SKCRenderer::SpriteRenderInfo **, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >=^^{SpriteRenderInfo}}}{vector<SKCRenderer::SpriteRenderInfo, std::__1::allocator<SKCRenderer::SpriteRenderInfo> >=^{SpriteRenderInfo}^{SpriteRenderInfo}{__compressed_pair<SKCRenderer::SpriteRenderInfo *, std::__1::allocator<SKCRenderer::SpriteRenderInfo> >=^{SpriteRenderInfo}}}{SKRenderQuadPool={vector<SKRenderQuad *, std::__1::allocator<SKRenderQuad *> >=^^{?}^^{?}{__compressed_pair<SKRenderQuad **, std::__1::allocator<SKRenderQuad *> >=^^{?}}}QQ^{?}Q}{map<const SKCSprite *, PKPoint, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, PKPoint> > >={__tree<std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, PKPoint> > >=^{__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true> >=Q}}}{list<const SKCSprite *, std::__1::allocator<const SKCSprite *> >={__list_node_base<const SKCSprite *, void *>=^{__list_node<const SKCSprite *, void *>}^{__list_node<const SKCSprite *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<const SKCSprite *, void *> > >=Q}}{map<const SKCSprite *, ShadowInfo *, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, ShadowInfo *> > >={__tree<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, ShadowInfo *> > >=^{__tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true> >=Q}}}{map<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > >={__tree<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > >=^{__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true> >=Q}}}@BBBBBBBBBBBBBB} */
    struct SKCRenderer { id x1; id x2; boolx3; boolx4; float x5; float x6; id x7; id x8; float x9; struct { float x_10_1_1; float x_10_1_2; } x10; struct { struct xglProgram {} *x_11_1_1; struct { struct { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_11_1_2; unsigned int x_11_1_3; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_4_2_1; float x_4_2_2[16]; } x_11_1_4; unsigned int x_11_1_5; unsigned int x_11_1_6; unsigned int x_11_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; } x_11_1_8; long long x_11_1_9; struct { float x_10_2_1; float x_10_2_2; } x_11_1_10; struct { unsigned int x_11_2_1; unsigned int x_11_2_2; unsigned int x_11_2_3; unsigned int x_11_2_4; struct { float x_5_3_1; float x_5_3_2; } x_11_2_5; boolx_11_2_6; } x_11_1_11; } x11; struct { struct xglProgram {} *x_12_1_1; struct { struct { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_12_1_2; unsigned int x_12_1_3; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_4_2_1; float x_4_2_2[16]; } x_12_1_4; unsigned int x_12_1_5; unsigned int x_12_1_6; unsigned int x_12_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; } x_12_1_8; long long x_12_1_9; struct { float x_10_2_1; float x_10_2_2; } x_12_1_10; struct { unsigned int x_11_2_1; unsigned int x_11_2_2; unsigned int x_11_2_3; unsigned int x_11_2_4; struct { float x_5_3_1; float x_5_3_2; } x_11_2_5; boolx_11_2_6; } x_12_1_11; } x12; struct stack<PKRect, std::__1::deque<PKRect, std::__1::allocator<PKRect> > > { struct deque<PKRect, std::__1::allocator<PKRect> > { struct __split_buffer<PKRect *, std::__1::allocator<PKRect *> > { struct { /* ? */ } **x_1_3_1; struct { /* ? */ } **x_1_3_2; struct { /* ? */ } **x_1_3_3; struct __compressed_pair<PKRect **, std::__1::allocator<PKRect *> > { struct { /* ? */ } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<PKRect> > { unsigned long long x_3_3_1; } x_1_2_3; } x_13_1_1; } x13; struct stack<_GLKMatrix4, std::__1::deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > > { struct deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > { struct __split_buffer<_GLKMatrix4 *, std::__1::allocator<_GLKMatrix4 *> > { union { /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_1_4_1; void*x_1_4_2; unsigned long x_1_4_3; void*x_1_4_4; void*x_1_4_5; void*x_1_4_6; void*x_1_4_7; const int x_1_4_8; void*x_1_4_9; void*x_1_4_10; } **x_1_3_1; union { void*x_2_4_1; void*x_2_4_2; unsigned long x_2_4_3; void*x_2_4_4; void*x_2_4_5; void*x_2_4_6; void*x_2_4_7; const int x_2_4_8; void*x_2_4_9; void*x_2_4_10; } **x_1_3_2; union { void*x_3_4_1; void*x_3_4_2; unsigned long x_3_4_3; void*x_3_4_4; void*x_3_4_5; void*x_3_4_6; void*x_3_4_7; const int x_3_4_8; void*x_3_4_9; void*x_3_4_10; } **x_1_3_3; struct __compressed_pair<_GLKMatrix4 **, std::__1::allocator<_GLKMatrix4 *> > { union { void*x_1_5_1; void*x_1_5_2; unsigned long x_1_5_3; void*x_1_5_4; void*x_1_5_5; void*x_1_5_6; void*x_1_5_7; const int x_1_5_8; void*x_1_5_9; void*x_1_5_10; } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<_GLKMatrix4> > { unsigned long long x_3_3_1; } x_1_2_3; } x_14_1_1; } x14; struct stack<SKCTextureAttachment, std::__1::deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > > { struct deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > { struct __split_buffer<SKCTextureAttachment *, std::__1::allocator<SKCTextureAttachment *> > { struct { /* ? */ } **x_1_3_1; struct { /* ? */ } **x_1_3_2; struct { /* ? */ } **x_1_3_3; struct __compressed_pair<SKCTextureAttachment **, std::__1::allocator<SKCTextureAttachment *> > { struct { /* ? */ } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<SKCTextureAttachment> > { unsigned long long x_3_3_1; } x_1_2_3; } x_15_1_1; } x15; struct { float x_16_1_1; float x_16_1_2; } x16; struct { float x_17_1_1; float x_17_1_2; } x17; struct SKCRenderPassNew { struct xglProgram {} *x_18_1_1; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_2_2_1; float x_2_2_2[16]; } x_18_1_2; unsigned int x_18_1_3; unsigned long long x_18_1_4; unsigned int x_18_1_5; unsigned int x_18_1_6; long long x_18_1_7; struct { struct { float x_1_3_1; float x_1_3_2; } x_8_2_1; struct { float x_2_3_1; float x_2_3_2; } x_8_2_2; } x_18_1_8; struct SKCSprite {} *x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; boolx_18_1_12; boolx_18_1_13; boolx_18_1_14; boolx_18_1_15; boolx_18_1_16; boolx_18_1_17; boolx_18_1_18; boolx_18_1_19; boolx_18_1_20; struct { unsigned int x_21_2_1; unsigned int x_21_2_2; unsigned int x_21_2_3; unsigned int x_21_2_4; struct { float x_5_3_1; float x_5_3_2; } x_21_2_5; boolx_21_2_6; } x_18_1_21; boolx_18_1_22; boolx_18_1_23; boolx_18_1_24; boolx_18_1_25; boolx_18_1_26; boolx_18_1_27; boolx_18_1_28; boolx_18_1_29; boolx_18_1_30; boolx_18_1_31; boolx_18_1_32; boolx_18_1_33; id x_18_1_34; float x_18_1_35; float x_18_1_36; unsigned int x_18_1_37; struct { float x_38_2_1; float x_38_2_2; float x_38_2_3; float x_38_2_4; } x_18_1_38; id x_18_1_39; struct { struct { float x_1_3_1; float x_1_3_2; } x_40_2_1; struct { float x_2_3_1; float x_2_3_2; } x_40_2_2; } x_18_1_40; struct { struct { float x_1_3_1; float x_1_3_2; } x_41_2_1; struct { float x_2_3_1; float x_2_3_2; } x_41_2_2; } x_18_1_41; struct { float x_42_2_1; float x_42_2_2; } x_18_1_42; float x_18_1_43; unsigned int x_18_1_44; boolx_18_1_45; char *x_18_1_46; id x_18_1_47; } x18; unsigned int x19; int x20; int x21; float x22; float x23; int x24; double x25; unsigned long long x26; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; unsigned long long x31; float x32; float x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; double x38; float x39; unsigned int x40; int x41; id x42; id x43; id x44; id x45; boolx46; boolx47; boolx48; boolx49; struct list<SKCRenderPassNew, std::__1::allocator<SKCRenderPassNew> > { struct __list_node_base<SKCRenderPassNew, void *> { struct __list_node<SKCRenderPassNew, void *> {} *x_1_2_1; struct __list_node<SKCRenderPassNew, void *> {} *x_1_2_2; } x_50_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderPassNew, void *> > > { unsigned long long x_2_2_1; } x_50_1_2; } x50; unsigned int x51; unsigned int x52; unsigned short *x53; struct { struct { union _GLKVector4 { struct { float x_1_4_1; float x_1_4_2; float x_1_4_3; float x_1_4_4; } x_1_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; } x_1_3_2; struct { float x_3_4_1; float x_3_4_2; float x_3_4_3; float x_3_4_4; } x_1_3_3; float x_1_3_4[4]; } x_1_2_1; unsigned char x_1_2_2[4]; float x_1_2_3[3]; } x_54_1_1[4]; } x54[10500]; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; struct xglProgram {} *x59; struct xglProgram {} *x60; struct xglProgram {} *x61; struct xglProgram {} *x62; struct xglProgram {} *x63; struct xglProgram {} *x64; id x65; int x66; id x67; int x68; unsigned int x69; unsigned int x70; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > { struct __list_node_base<SKCSprite *, void *> { struct __list_node<SKCSprite *, void *> {} *x_1_2_1; struct __list_node<SKCSprite *, void *> {} *x_1_2_2; } x_71_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > > { unsigned long long x_2_2_1; } x_71_1_2; } x71; struct vector<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > { struct SpriteRenderInfo {} **x_72_1_1; struct SpriteRenderInfo {} **x_72_1_2; struct __compressed_pair<const SKCRenderer::SpriteRenderInfo **, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > { struct SpriteRenderInfo {} **x_3_2_1; } x_72_1_3; } x72; struct vector<SKCRenderer::SpriteRenderInfo, std::__1::allocator<SKCRenderer::SpriteRenderInfo> > { struct SpriteRenderInfo {} *x_73_1_1; struct SpriteRenderInfo {} *x_73_1_2; struct __compressed_pair<SKCRenderer::SpriteRenderInfo *, std::__1::allocator<SKCRenderer::SpriteRenderInfo> > { struct SpriteRenderInfo {} *x_3_2_1; } x_73_1_3; } x73; struct SKRenderQuadPool { struct vector<SKRenderQuad *, std::__1::allocator<SKRenderQuad *> > { struct { /* ? */ } **x_1_2_1; struct { /* ? */ } **x_1_2_2; struct __compressed_pair<SKRenderQuad **, std::__1::allocator<SKRenderQuad *> > { struct { /* ? */ } **x_3_3_1; } x_1_2_3; } x_74_1_1; unsigned long long x_74_1_2; unsigned long long x_74_1_3; struct { /* ? */ } *x_74_1_4; unsigned long long x_74_1_5; } x74; struct map<const SKCSprite *, PKPoint, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, PKPoint> > > { struct __tree<std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, PKPoint> > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_75_1_1; } x75; struct list<const SKCSprite *, std::__1::allocator<const SKCSprite *> > { struct __list_node_base<const SKCSprite *, void *> { struct __list_node<const SKCSprite *, void *> {} *x_1_2_1; struct __list_node<const SKCSprite *, void *> {} *x_1_2_2; } x_76_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<const SKCSprite *, void *> > > { unsigned long long x_2_2_1; } x_76_1_2; } x76; struct map<const SKCSprite *, ShadowInfo *, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, ShadowInfo *> > > { struct __tree<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, ShadowInfo *> > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_77_1_1; } x77; struct map<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > > { struct __tree<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_78_1_1; } x78; id x79; boolx80; boolx81; boolx82; boolx83; boolx84; boolx85; boolx86; boolx87; boolx88; boolx89; boolx90; boolx91; boolx92; boolx93; } *_renderer;

    NSMutableDictionary *_touchMap;
    float _prevBackingScaleFactor;
    NSObject<OS_dispatch_queue> *_renderQueue;
    boolshowsFPS;
    boolshowsNodeCount;
}

@property bool _showsOutlineInterior;
@property bool _shouldCenterStats;
@property bool _showsCoreAnimationFPS;
@property bool _showsGPUStats;
@property bool _showsCPUStats;
@property bool _showsCulledNodesInNodeCount;
@property bool _showsTotalAreaRendered;
@property bool _showsSpriteBounds;
@property(readonly) SKScene * _scene;
@property(readonly) SKScene * _nextScene;
@property(readonly) double _fps;
@property(readonly) int _spriteRenderCount;
@property(readonly) int _spriteSubmitCount;
@property bool _usesAsyncUpdateQueue;
@property double _viewScale;
@property struct CGPoint { double x1; double x2; } _viewTranslation;
@property(getter=isPaused) bool paused;
@property bool showsFPS;
@property bool showsDrawCount;
@property bool showsNodeCount;
@property bool showsQuadCount;
@property bool showsPhysics;
@property bool showsFields;
@property(getter=isAsynchronous) bool asynchronous;
@property bool allowsTransparency;
@property bool ignoresSiblingOrder;
@property bool shouldCullNonVisibleNodes;
@property long long frameInterval;
@property(readonly) SKScene * scene;
@property double physicsDebugStrokeWidth;
@property(readonly) struct CGSize { double x1; double x2; } pixelSize;
@property(retain) EAGLContext * _context;

+ (Class)layerClass;

- (void)set_viewTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)set_viewScale:(double)arg1;
- (void)renderToOpenGLTextureId:(unsigned int)arg1 size:(struct CGSize { double x1; double x2; })arg2 scaleFactor:(double)arg3;
- (id)_nextScene;
- (void)_setUpdateQueue:(id)arg1;
- (double)physicsDebugStrokeWidth;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 updateQueue:(id)arg2;
- (id)textureFromNode:(id)arg1 crop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)textureFromNode:(id)arg1;
- (void)setShouldCullNonVisibleNodes:(bool)arg1;
- (bool)shouldCullNonVisibleNodes;
- (void)writeContentsToPNG:(id)arg1;
- (void)presentScene:(id)arg1 transition:(id)arg2;
- (void)setAllowsTransparency:(bool)arg1;
- (bool)allowsTransparency;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromScene:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toScene:(id)arg2;
- (bool)_usesAsyncUpdateQueue;
- (void)set_usesAsyncUpdateQueue:(bool)arg1;
- (id)_textureFromNode:(id)arg1 crop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)startRenderCallbacks;
- (void)_setupContext;
- (void)_renderContent;
- (void)renderContent;
- (void)presentScene:(id)arg1;
- (void)remakeFramebuffer:(double)arg1;
- (void)CBApplicationDidBecomeActive;
- (void)CBApplicationWillResignActive;
- (void)setUpRenderCallback;
- (void)setPhysicsDebugStrokeWidth:(double)arg1;
- (void)set_context:(id)arg1;
- (void)bindOpenGLContext;
- (void)stopRenderCallbacks;
- (void)renderCallback:(double)arg1;
- (struct CGPoint { double x1; double x2; })_viewTranslation;
- (double)_viewScale;
- (int)_spriteSubmitCount;
- (int)_spriteRenderCount;
- (double)_fps;
- (void)_showAllStats;
- (bool)_showsTotalAreaRendered;
- (bool)_showsCulledNodesInNodeCount;
- (bool)_showsGPUStats;
- (bool)_showsCPUStats;
- (bool)_showsCoreAnimationFPS;
- (bool)_shouldCenterStats;
- (void)set_shouldCenterStats:(bool)arg1;
- (bool)_showsSpriteBounds;
- (void)set_showsSpriteBounds:(bool)arg1;
- (bool)showsFields;
- (bool)_showsOutlineInterior;
- (void)set_showsOutlineInterior:(bool)arg1;
- (bool)showsDrawCount;
- (bool)showsQuadCount;
- (bool)showsNodeCount;
- (bool)showsFPS;
- (bool)showsSpriteBounds;
- (struct CGSize { double x1; double x2; })pixelSize;
- (bool)ignoresSiblingOrder;
- (void)setIgnoresSiblingOrder:(bool)arg1;
- (void)setShowsFields:(bool)arg1;
- (void)setShowsPhysics:(bool)arg1;
- (void)set_showsTotalAreaRendered:(bool)arg1;
- (void)set_showsCoreAnimationFPS:(bool)arg1;
- (void)set_showsCPUStats:(bool)arg1;
- (void)set_showsGPUStats:(bool)arg1;
- (void)set_showsCulledNodesInNodeCount:(bool)arg1;
- (void)setShowsQuadCount:(bool)arg1;
- (void)setShowsDrawCount:(bool)arg1;
- (void)setShowsNodeCount:(bool)arg1;
- (void)setShowsFPS:(bool)arg1;
- (void)setShowsSpriteBounds:(bool)arg1;
- (bool)showsPhysics;
- (id)scene;
- (void)_initialize;
- (void)setPaused:(bool)arg1;
- (bool)isPaused;
- (void)setAsynchronous:(bool)arg1;
- (bool)isOpaque;
- (void)displayLayer:(id)arg1;
- (long long)frameInterval;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (void).cxx_destruct;
- (bool)isAsynchronous;
- (void)_update:(double)arg1;
- (void)willMoveToSuperview:(id)arg1;
- (id)snapshot;
- (id)_context;
- (void)setFrameInterval:(long long)arg1;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (id)_scene;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)layoutSubviews;

@end
